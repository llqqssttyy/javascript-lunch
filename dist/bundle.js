(()=>{"use strict";var t={840:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,"/* 카테고리/정렬 필터 */\n.restaurant-filter-container {\n  display: flex;\n  justify-content: space-between;\n\n  padding: 0 16px;\n  margin-top: 24px;\n}\n\n.restaurant-filter-container select {\n  height: 44px;\n  min-width: 125px;\n\n  border: 1px solid #d0d5dd;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 16px;\n}\n\n.restaurant-filter {\n  padding: 8px;\n}\n","",{version:3,sources:["webpack://./src/components/App.css"],names:[],mappings:"AAAA,eAAe;AACf;EACE,aAAa;EACb,8BAA8B;;EAE9B,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,gBAAgB;;EAEhB,yBAAyB;EACzB,kBAAkB;EAClB,uBAAuB;;EAEvB,eAAe;AACjB;;AAEA;EACE,YAAY;AACd",sourcesContent:["/* 카테고리/정렬 필터 */\n.restaurant-filter-container {\n  display: flex;\n  justify-content: space-between;\n\n  padding: 0 16px;\n  margin-top: 24px;\n}\n\n.restaurant-filter-container select {\n  height: 44px;\n  min-width: 125px;\n\n  border: 1px solid #d0d5dd;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 16px;\n}\n\n.restaurant-filter {\n  padding: 8px;\n}\n"],sourceRoot:""}]);const s=i},182:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,".bookmark-tab-container {\n  width: 100%;\n  padding: 0 16px;\n  margin-top: 22px;\n}\n\n.bookmark-tab {\n  display: flex;\n  align-items: center;\n}\n\n.tab-item {\n  width: 50%;\n  min-height: 100%;\n  padding: 9px 0;\n\n  font-size: 16px;\n  text-align: center;\n  color: var(--grey-300);\n\n  border-bottom: 2px solid var(--grey-200);\n}\n\n.tab-item.active {\n  color: var(--primary-color);\n\n  border-bottom: 2px solid var(--primary-color);\n}\n","",{version:3,sources:["webpack://./src/components/BookmarkTab/BookmarkTab.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,UAAU;EACV,gBAAgB;EAChB,cAAc;;EAEd,eAAe;EACf,kBAAkB;EAClB,sBAAsB;;EAEtB,wCAAwC;AAC1C;;AAEA;EACE,2BAA2B;;EAE3B,6CAA6C;AAC/C",sourcesContent:[".bookmark-tab-container {\n  width: 100%;\n  padding: 0 16px;\n  margin-top: 22px;\n}\n\n.bookmark-tab {\n  display: flex;\n  align-items: center;\n}\n\n.tab-item {\n  width: 50%;\n  min-height: 100%;\n  padding: 9px 0;\n\n  font-size: 16px;\n  text-align: center;\n  color: var(--grey-300);\n\n  border-bottom: 2px solid var(--grey-200);\n}\n\n.tab-item.active {\n  color: var(--primary-color);\n\n  border-bottom: 2px solid var(--primary-color);\n}\n"],sourceRoot:""}]);const s=i},382:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,"/* GNB ********************************************/\n.gnb {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 64px;\n\n  padding: 0 16px;\n\n  background-color: var(--primary-color);\n}\n\n.gnb__title {\n  color: #fcfcfd;\n}\n\n.gnb__button {\n  height: 40px;\n\n  border: none;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 24px;\n  cursor: pointer;\n}\n\n.gnb__button img {\n  display: block;\n  width: 40px;\n  height: 40px;\n  object-fit: contain;\n}\n","",{version:3,sources:["webpack://./src/components/GNB/GNB.css"],names:[],mappings:"AAAA,mDAAmD;AACnD;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,YAAY;;EAEZ,eAAe;;EAEf,sCAAsC;AACxC;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,YAAY;;EAEZ,YAAY;EACZ,kBAAkB;EAClB,uBAAuB;;EAEvB,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,cAAc;EACd,WAAW;EACX,YAAY;EACZ,mBAAmB;AACrB",sourcesContent:["/* GNB ********************************************/\n.gnb {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 64px;\n\n  padding: 0 16px;\n\n  background-color: var(--primary-color);\n}\n\n.gnb__title {\n  color: #fcfcfd;\n}\n\n.gnb__button {\n  height: 40px;\n\n  border: none;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 24px;\n  cursor: pointer;\n}\n\n.gnb__button img {\n  display: block;\n  width: 40px;\n  height: 40px;\n  object-fit: contain;\n}\n"],sourceRoot:""}]);const s=i},400:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,".modal {\n  display: none;\n}\n\n.modal--open {\n  display: block;\n\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  height: 100vh;\n}\n\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  background: rgba(0, 0, 0, 0.35);\n}\n\n.modal-container {\n  position: absolute;\n  bottom: 0;\n\n  width: 100%;\n  height: fit-content;\n  max-height: 90%;\n\n  padding: 32px 16px;\n\n  border-radius: 8px 8px 0px 0px;\n  background: var(--grey-100);\n\n  overflow-y: scroll;\n}\n\n.modal-title {\n  margin-bottom: 36px;\n}\n","",{version:3,sources:["webpack://./src/components/Modal/Modal.css"],names:[],mappings:"AAAA;EACE,aAAa;AACf;;AAEA;EACE,cAAc;;EAEd,eAAe;EACf,MAAM;EACN,QAAQ;EACR,SAAS;EACT,OAAO;;EAEP,aAAa;AACf;;AAEA;EACE,eAAe;EACf,MAAM;EACN,QAAQ;EACR,SAAS;EACT,OAAO;;EAEP,+BAA+B;AACjC;;AAEA;EACE,kBAAkB;EAClB,SAAS;;EAET,WAAW;EACX,mBAAmB;EACnB,eAAe;;EAEf,kBAAkB;;EAElB,8BAA8B;EAC9B,2BAA2B;;EAE3B,kBAAkB;AACpB;;AAEA;EACE,mBAAmB;AACrB",sourcesContent:[".modal {\n  display: none;\n}\n\n.modal--open {\n  display: block;\n\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  height: 100vh;\n}\n\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  background: rgba(0, 0, 0, 0.35);\n}\n\n.modal-container {\n  position: absolute;\n  bottom: 0;\n\n  width: 100%;\n  height: fit-content;\n  max-height: 90%;\n\n  padding: 32px 16px;\n\n  border-radius: 8px 8px 0px 0px;\n  background: var(--grey-100);\n\n  overflow-y: scroll;\n}\n\n.modal-title {\n  margin-bottom: 36px;\n}\n"],sourceRoot:""}]);const s=i},309:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,".restaurant-detail {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n.restaurant-detail > .restaurant__info {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n\n  margin-bottom: 32px;\n}\n\n.restaurant-detail > .restaurant__info > .restaurant__description {\n  padding: 0;\n  text-overflow: unset;\n  -webkit-line-clamp: unset;\n}\n\n.restaurant-detail > .restaurant__info > .restaurant__bookmark {\n  position: absolute;\n  top: 32px;\n  right: 32px;\n}\n","",{version:3,sources:["webpack://./src/components/RestaurantDetail/RestaurantDetail.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;;EAET,mBAAmB;AACrB;;AAEA;EACE,UAAU;EACV,oBAAoB;EACpB,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;AACb",sourcesContent:[".restaurant-detail {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n.restaurant-detail > .restaurant__info {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n\n  margin-bottom: 32px;\n}\n\n.restaurant-detail > .restaurant__info > .restaurant__description {\n  padding: 0;\n  text-overflow: unset;\n  -webkit-line-clamp: unset;\n}\n\n.restaurant-detail > .restaurant__info > .restaurant__bookmark {\n  position: absolute;\n  top: 32px;\n  right: 32px;\n}\n"],sourceRoot:""}]);const s=i},414:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,"/* 카테고리/정렬 필터 */\n.restaurant-filter-container {\n  display: flex;\n  justify-content: space-between;\n\n  padding: 0 16px;\n  margin-top: 36px;\n}\n\n.restaurant-filter-container select {\n  height: 44px;\n  min-width: 125px;\n\n  border: 1px solid #d0d5dd;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 16px;\n}\n\n.restaurant-filter {\n  padding: 8px;\n}\n","",{version:3,sources:["webpack://./src/components/RestaurantFilters/RestaurantFilters.css"],names:[],mappings:"AAAA,eAAe;AACf;EACE,aAAa;EACb,8BAA8B;;EAE9B,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,gBAAgB;;EAEhB,yBAAyB;EACzB,kBAAkB;EAClB,uBAAuB;;EAEvB,eAAe;AACjB;;AAEA;EACE,YAAY;AACd",sourcesContent:["/* 카테고리/정렬 필터 */\n.restaurant-filter-container {\n  display: flex;\n  justify-content: space-between;\n\n  padding: 0 16px;\n  margin-top: 36px;\n}\n\n.restaurant-filter-container select {\n  height: 44px;\n  min-width: 125px;\n\n  border: 1px solid #d0d5dd;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 16px;\n}\n\n.restaurant-filter {\n  padding: 8px;\n}\n"],sourceRoot:""}]);const s=i},27:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,".input-container {\n  height: 85%;\n\n  margin-bottom: 10px;\n}\n\n.form-item {\n  display: flex;\n  flex-direction: column;\n\n  margin-bottom: 36px;\n}\n\n.form-item label {\n  color: var(--grey-400);\n  font-size: 14px;\n}\n\n.form-item--required label::after {\n  padding-left: 4px;\n\n  color: var(--primary-color);\n  content: '*';\n}\n\n.form-item .help-text {\n  color: var(--grey-300);\n}\n\n.form-item input,\n.form-item textarea,\n.form-item select {\n  padding: 8px;\n  margin: 6px 0;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  font-size: 16px;\n}\n\n.form-item textarea {\n  resize: none;\n}\n\n.form-item select {\n  height: 44px;\n\n  padding: 8px;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  color: var(--grey-300);\n}\n\ninput[name='name'],\ninput[name='link'] {\n  height: 44px;\n}\n\n.button-container {\n  display: flex;\n}\n\n.button {\n  width: 100%;\n  height: 44px;\n\n  margin-right: 16px;\n\n  border: none;\n  border-radius: 8px;\n\n  font-weight: 600;\n  cursor: pointer;\n}\n\n.button:last-child {\n  margin-right: 0;\n}\n\n.button--secondary {\n  border: 1px solid var(--grey-300);\n  background: transparent;\n\n  color: var(--grey-300);\n}\n\n.button--primary {\n  background: var(--primary-color);\n\n  color: var(--grey-100);\n}\n","",{version:3,sources:["webpack://./src/components/RestaurantForm/RestaurantForm.css"],names:[],mappings:"AAAA;EACE,WAAW;;EAEX,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;;EAEtB,mBAAmB;AACrB;;AAEA;EACE,sBAAsB;EACtB,eAAe;AACjB;;AAEA;EACE,iBAAiB;;EAEjB,2BAA2B;EAC3B,YAAY;AACd;;AAEA;EACE,sBAAsB;AACxB;;AAEA;;;EAGE,YAAY;EACZ,aAAa;;EAEb,iCAAiC;EACjC,kBAAkB;;EAElB,eAAe;AACjB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;;EAEZ,YAAY;;EAEZ,iCAAiC;EACjC,kBAAkB;;EAElB,sBAAsB;AACxB;;AAEA;;EAEE,YAAY;AACd;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,WAAW;EACX,YAAY;;EAEZ,kBAAkB;;EAElB,YAAY;EACZ,kBAAkB;;EAElB,gBAAgB;EAChB,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,iCAAiC;EACjC,uBAAuB;;EAEvB,sBAAsB;AACxB;;AAEA;EACE,gCAAgC;;EAEhC,sBAAsB;AACxB",sourcesContent:[".input-container {\n  height: 85%;\n\n  margin-bottom: 10px;\n}\n\n.form-item {\n  display: flex;\n  flex-direction: column;\n\n  margin-bottom: 36px;\n}\n\n.form-item label {\n  color: var(--grey-400);\n  font-size: 14px;\n}\n\n.form-item--required label::after {\n  padding-left: 4px;\n\n  color: var(--primary-color);\n  content: '*';\n}\n\n.form-item .help-text {\n  color: var(--grey-300);\n}\n\n.form-item input,\n.form-item textarea,\n.form-item select {\n  padding: 8px;\n  margin: 6px 0;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  font-size: 16px;\n}\n\n.form-item textarea {\n  resize: none;\n}\n\n.form-item select {\n  height: 44px;\n\n  padding: 8px;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  color: var(--grey-300);\n}\n\ninput[name='name'],\ninput[name='link'] {\n  height: 44px;\n}\n\n.button-container {\n  display: flex;\n}\n\n.button {\n  width: 100%;\n  height: 44px;\n\n  margin-right: 16px;\n\n  border: none;\n  border-radius: 8px;\n\n  font-weight: 600;\n  cursor: pointer;\n}\n\n.button:last-child {\n  margin-right: 0;\n}\n\n.button--secondary {\n  border: 1px solid var(--grey-300);\n  background: transparent;\n\n  color: var(--grey-300);\n}\n\n.button--primary {\n  background: var(--primary-color);\n\n  color: var(--grey-100);\n}\n"],sourceRoot:""}]);const s=i},823:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,".restaurant__bookmark {\n  background: none;\n  border: none;\n}\n\n.restaurant__bookmark > img {\n  width: 32px;\n}\n","",{version:3,sources:["webpack://./src/components/RestaurantItem/BookmarkButton/BookmarkButton.css"],names:[],mappings:"AAAA;EACE,gBAAgB;EAChB,YAAY;AACd;;AAEA;EACE,WAAW;AACb",sourcesContent:[".restaurant__bookmark {\n  background: none;\n  border: none;\n}\n\n.restaurant__bookmark > img {\n  width: 32px;\n}\n"],sourceRoot:""}]);const s=i},5:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,".category-icon {\n  width: 36px;\n  height: 36px;\n}\n","",{version:3,sources:["webpack://./src/components/RestaurantItem/CategoryIcon/CategoryIcon.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,YAAY;AACd",sourcesContent:[".category-icon {\n  width: 36px;\n  height: 36px;\n}\n"],sourceRoot:""}]);const s=i},207:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,".restaurant {\n  display: flex;\n  align-items: flex-start;\n\n  padding: 16px 8px;\n\n  border-bottom: 1px solid #e9eaed;\n}\n\n.restaurant__category {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 64px;\n  height: 64px;\n  min-width: 64px;\n  min-height: 64px;\n\n  margin-right: 16px;\n\n  border-radius: 50%;\n  background: var(--lighten-color);\n}\n\n.restaurant__info {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n\n  width: 100%;\n}\n\n.restaurant__name {\n  margin: 0;\n}\n\n.restaurant__distance {\n  color: var(--primary-color);\n}\n\n.restaurant__description {\n  display: -webkit-box;\n\n  padding-top: 8px;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n}\n","",{version:3,sources:["webpack://./src/components/RestaurantItem/RestaurantItem.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,uBAAuB;;EAEvB,iBAAiB;;EAEjB,gCAAgC;AAClC;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,eAAe;EACf,gBAAgB;;EAEhB,kBAAkB;;EAElB,kBAAkB;EAClB,gCAAgC;AAClC;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,2BAA2B;;EAE3B,WAAW;AACb;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,oBAAoB;;EAEpB,gBAAgB;;EAEhB,gBAAgB;EAChB,uBAAuB;EACvB,qBAAqB;EACrB,4BAA4B;AAC9B",sourcesContent:[".restaurant {\n  display: flex;\n  align-items: flex-start;\n\n  padding: 16px 8px;\n\n  border-bottom: 1px solid #e9eaed;\n}\n\n.restaurant__category {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 64px;\n  height: 64px;\n  min-width: 64px;\n  min-height: 64px;\n\n  margin-right: 16px;\n\n  border-radius: 50%;\n  background: var(--lighten-color);\n}\n\n.restaurant__info {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n\n  width: 100%;\n}\n\n.restaurant__name {\n  margin: 0;\n}\n\n.restaurant__distance {\n  color: var(--primary-color);\n}\n\n.restaurant__description {\n  display: -webkit-box;\n\n  padding-top: 8px;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n}\n"],sourceRoot:""}]);const s=i},555:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,"/* 음식점 목록 */\n.restaurant-list-container {\n  display: flex;\n  flex-direction: column;\n\n  padding: 0 16px;\n  margin: 16px 0;\n}\n","",{version:3,sources:["webpack://./src/components/RestaurantList/RestaurantList.css"],names:[],mappings:"AAAA,WAAW;AACX;EACE,aAAa;EACb,sBAAsB;;EAEtB,eAAe;EACf,cAAc;AAChB",sourcesContent:["/* 음식점 목록 */\n.restaurant-list-container {\n  display: flex;\n  flex-direction: column;\n\n  padding: 0 16px;\n  margin: 16px 0;\n}\n"],sourceRoot:""}]);const s=i},644:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,"select {\n  padding: 8px;\n  margin: 6px 0;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  font-size: 16px;\n}\n","",{version:3,sources:["webpack://./src/components/Select/Select.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,aAAa;;EAEb,iCAAiC;EACjC,kBAAkB;;EAElB,eAAe;AACjB",sourcesContent:["select {\n  padding: 8px;\n  margin: 6px 0;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  font-size: 16px;\n}\n"],sourceRoot:""}]);const s=i},961:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,"* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nul,\nli {\n  list-style: none;\n}\n\nhtml,\nbody {\n  width: 100%;\n  height: 100%;\n\n  font-family: sans-serif;\n  font-size: 16px;\n\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-use-select: none;\n  user-select: none;\n}\n\n/* Colors *****************************************/\n:root {\n  --primary-color: #ec4a0a;\n  --lighten-color: #f6a88a;\n  --grey-100: #ffffff;\n  --grey-200: #d0d5dd;\n  --grey-300: #667085;\n  --grey-400: #344054;\n  --grey-500: #000000;\n}\n\n/* Typography *************************************/\n.text-title {\n  font-size: 20px;\n  line-height: 24px;\n  font-weight: 600;\n}\n\n.text-subtitle {\n  font-size: 18px;\n  line-height: 28px;\n  font-weight: 600;\n}\n\n.text-body {\n  font-size: 16px;\n  line-height: 24px;\n  font-weight: 400;\n}\n\n.text-caption {\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 400;\n}\n\n.draggable {\n  -webkit-user-select: all;\n  -moz-user-select: all;\n  -ms-use-select: all;\n  user-select: all;\n}\n","",{version:3,sources:["webpack://./src/components/global.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;EACT,sBAAsB;AACxB;;AAEA;;EAEE,gBAAgB;AAClB;;AAEA;;EAEE,WAAW;EACX,YAAY;;EAEZ,uBAAuB;EACvB,eAAe;;EAEf,yBAAyB;EACzB,sBAAsB;EACtB,oBAAoB;EACpB,iBAAiB;AACnB;;AAEA,mDAAmD;AACnD;EACE,wBAAwB;EACxB,wBAAwB;EACxB,mBAAmB;EACnB,mBAAmB;EACnB,mBAAmB;EACnB,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA,mDAAmD;AACnD;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,wBAAwB;EACxB,qBAAqB;EACrB,mBAAmB;EACnB,gBAAgB;AAClB",sourcesContent:["* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nul,\nli {\n  list-style: none;\n}\n\nhtml,\nbody {\n  width: 100%;\n  height: 100%;\n\n  font-family: sans-serif;\n  font-size: 16px;\n\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-use-select: none;\n  user-select: none;\n}\n\n/* Colors *****************************************/\n:root {\n  --primary-color: #ec4a0a;\n  --lighten-color: #f6a88a;\n  --grey-100: #ffffff;\n  --grey-200: #d0d5dd;\n  --grey-300: #667085;\n  --grey-400: #344054;\n  --grey-500: #000000;\n}\n\n/* Typography *************************************/\n.text-title {\n  font-size: 20px;\n  line-height: 24px;\n  font-weight: 600;\n}\n\n.text-subtitle {\n  font-size: 18px;\n  line-height: 28px;\n  font-weight: 600;\n}\n\n.text-body {\n  font-size: 16px;\n  line-height: 24px;\n  font-weight: 400;\n}\n\n.text-caption {\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 400;\n}\n\n.draggable {\n  -webkit-user-select: all;\n  -moz-user-select: all;\n  -ms-use-select: all;\n  user-select: all;\n}\n"],sourceRoot:""}]);const s=i},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",r=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),r&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),r&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,r,a,o){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<t.length;l++){var A=[].concat(t[l]);r&&i[A[0]]||(void 0!==o&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=o),e&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=e):A[2]=e),a&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=a):A[4]="".concat(a)),n.push(A))}},n}},537:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},379:t=>{var n=[];function e(t){for(var e=-1,r=0;r<n.length;r++)if(n[r].identifier===t){e=r;break}return e}function r(t,r){for(var o={},i=[],s=0;s<t.length;s++){var c=t[s],l=r.base?c[0]+r.base:c[0],A=o[l]||0,d="".concat(l," ").concat(A);o[l]=A+1;var p=e(d),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var h=a(u,r);r.byIndex=s,n.splice(s,0,{identifier:d,updater:h,references:1})}i.push(d)}return i}function a(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,a){var o=r(t=t||[],a=a||{});return function(t){t=t||[];for(var i=0;i<o.length;i++){var s=e(o[i]);n[s].references--}for(var c=r(t,a),l=0;l<o.length;l++){var A=e(o[l]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}o=c}}},569:t=>{var n={};t.exports=function(t,e){var r=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{t.exports=function(t){var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var a=void 0!==e.layer;a&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,a&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}}},n={};function e(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return t[r](o,o.exports,e),o.exports}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var r=n.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})(),e.nc=void 0,(()=>{var t=e(379),n=e.n(t),r=e(795),a=e.n(r),o=e(569),i=e.n(o),s=e(565),c=e.n(s),l=e(216),A=e.n(l),d=e(589),p=e.n(d),u=e(961),h={};h.styleTagTransform=p(),h.setAttributes=c(),h.insert=i().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=A(),n()(u.Z,h),u.Z&&u.Z.locals&&u.Z.locals;var m=e(840),f={};f.styleTagTransform=p(),f.setAttributes=c(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=A(),n()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;var E,g=function(t,n,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof n?t!==n||!a:!n.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(t,e):a?a.value=e:n.set(t,e),e},b=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};class w{constructor(t=[]){E.set(this,[]),g(this,E,[...t],"f")}add(t){b(this,E,"f").push({id:Date.now(),isBookmark:!1,...t})}delete(t){g(this,E,b(this,E,"f").filter((n=>n.id!==t)),"f")}update(t){const n=b(this,E,"f").findIndex((n=>n.id===t.id));-1!==n&&(b(this,E,"f")[n]=t)}getFilteredList(t,n){const e=((t,n)=>n?t.filter((t=>t.isBookmark)):t)(b(this,E,"f"),n),r=((t,n)=>"전체"===n?t:t.filter((t=>t.category===n)))(e,t.category);return((t,n)=>t?"name"===n?[...t].sort(((t,n)=>t.name.localeCompare(n.name))):"distance"===n?[...t].sort(((t,n)=>t.distance-n.distance)):[...t]:[])(r,t.sort)}}E=new WeakMap;var v=e(27),C={};C.styleTagTransform=p(),C.setAttributes=c(),C.insert=i().bind(null,"head"),C.domAPI=a(),C.insertStyleElement=A(),n()(v.Z,C),v.Z&&v.Z.locals&&v.Z.locals;var y,B,x,k,T,S,_=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};const Z="restaurantFormSubmit",j="restaurantFormReset";class L extends HTMLFormElement{constructor(){super(),y.add(this),B.set(this,void 0);const t=document.querySelector("#template-restaurant-form").content.cloneNode(!0);this.appendChild(t),function(t,n,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof n?t!==n||!a:!n.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===r?a.call(t,e):a?a.value=e:n.set(t,e)}(this,B,this.querySelector("#link"),"f")}connectedCallback(){this.addEventListener("submit",_(this,y,"m",x).bind(this)),this.addEventListener("reset",_(this,y,"m",k).bind(this)),_(this,B,"f").addEventListener("invalid",(()=>{_(this,B,"f").value="",_(this,B,"f").setCustomValidity("")}))}}B=new WeakMap,y=new WeakSet,x=function(t){if(t.preventDefault(),!_(this,y,"m",T).call(this))return void _(this,B,"f").setCustomValidity("유효하지 않은 링크입니다.");const n=new FormData(t.target),e=_(this,y,"m",S).call(this,n);this.dispatchEvent(new CustomEvent(Z,{bubbles:!0,detail:{formData:e}})),this.reset()},k=function(){this.dispatchEvent(new CustomEvent(j,{bubbles:!0}))},T=function(){return""===_(this,B,"f").value||new RegExp("^https?://").test(_(this,B,"f").value)},S=function(t){return[...t.keys()].reduce(((n,e)=>({...n,[e]:t.get(e)})),{})};var M=e(414),W={};W.styleTagTransform=p(),W.setAttributes=c(),W.insert=i().bind(null,"head"),W.domAPI=a(),W.insertStyleElement=A(),n()(M.Z,W),M.Z&&M.Z.locals&&M.Z.locals;const P=new Map([["categoryFilters",[{value:"전체",option:"전체"},{value:"한식",option:"한식"},{value:"중식",option:"중식"},{value:"일식",option:"일식"},{value:"양식",option:"양식"},{value:"아시안",option:"아시안"},{value:"기타",option:"기타"}]],["sortingFilters",[{value:"name",option:"이름순"},{value:"distance",option:"거리순"}]],["categories",[{value:"",option:"선택해 주세요"},{value:"한식",option:"한식"},{value:"중식",option:"중식"},{value:"일식",option:"일식"},{value:"양식",option:"양식"},{value:"아시안",option:"아시안"},{value:"기타",option:"기타"}]],["distances",[{value:5,option:"5분 내"},{value:10,option:"10분 내"},{value:15,option:"15분 내"},{value:20,option:"20분 내"},{value:30,option:"30분 내"}]]]);var Y=e(644),q={};q.styleTagTransform=p(),q.setAttributes=c(),q.insert=i().bind(null,"head"),q.domAPI=a(),q.insertStyleElement=A(),n()(Y.Z,q),Y.Z&&Y.Z.locals&&Y.Z.locals;var z,R,I,D,N=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};const H="selectOnChange";class F extends HTMLSelectElement{constructor(){super(...arguments),z.add(this)}get type(){return this.getAttribute("type")}connectedCallback(){this.addEventListener("change",N(this,z,"m",R).bind(this))}attributeChangedCallback(){N(this,z,"m",I).call(this)}}z=new WeakSet,R=function(t){const{value:n}=t.target;this.dispatchEvent(new CustomEvent(H,{bubbles:!0,detail:{value:n,id:this.id}}))},I=function(){this.innerHTML="";const t=document.createDocumentFragment();N(this,z,"m",D).call(this).forEach((n=>t.appendChild(n))),this.appendChild(t)},D=function(){return(P.get(this.type)||[]).map((({value:t,option:n})=>{const e=document.createElement("option");return e.value=t,e.innerHTML=n,e}))},F.observedAttributes=["type"];var O,U,X,G,V=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)},$=function(t,n,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof n?t!==n||!a:!n.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(t,e):a?a.value=e:n.set(t,e),e};const J="filterChange";class Q extends HTMLElement{constructor(){super(),O.add(this),U.set(this,void 0),X.set(this,void 0);const t=document.querySelector("#template-restaurant-filter-container").content.cloneNode(!0);this.appendChild(t)}get sort(){return V(this,X,"f").value}get category(){return V(this,U,"f").value}set category(t){V(this,U,"f").value=t}connectedCallback(){$(this,U,this.querySelector("#category-filter"),"f"),$(this,X,this.querySelector("#sorting-filter"),"f"),this.addEventListener(H,V(this,O,"m",G).bind(this))}}U=new WeakMap,X=new WeakMap,O=new WeakSet,G=function(){this.dispatchEvent(new CustomEvent(J,{bubbles:!0,detail:{category:this.category,sort:this.sort}}))};var K=e(182),tt={};tt.styleTagTransform=p(),tt.setAttributes=c(),tt.insert=i().bind(null,"head"),tt.domAPI=a(),tt.insertStyleElement=A(),n()(K.Z,tt),K.Z&&K.Z.locals&&K.Z.locals;var nt,et,rt,at=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};const ot="tabBookmarkItem";class it extends HTMLElement{constructor(){super(),nt.add(this),et.set(this,void 0);const t=document.querySelector("#template-bookmark-tab").content.cloneNode(!0);this.appendChild(t)}get isBookmark(){return"bookmark"===this.querySelector(".active").id}connectedCallback(){(function(t,n,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof n?t!==n||!a:!n.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===r?a.call(t,e):a?a.value=e:n.set(t,e)})(this,et,this.querySelectorAll(".tab-item"),"f"),this.addEventListener("click",at(this,nt,"m",rt).bind(this))}}et=new WeakMap,nt=new WeakSet,rt=function(t){const n=t.target;at(this,et,"f").forEach((t=>{t.classList.remove("active")})),n.classList.add("active"),this.dispatchEvent(new CustomEvent(ot,{bubbles:!0}))};var st=e(207),ct={};ct.styleTagTransform=p(),ct.setAttributes=c(),ct.insert=i().bind(null,"head"),ct.domAPI=a(),ct.insertStyleElement=A(),n()(st.Z,ct),st.Z&&st.Z.locals&&st.Z.locals;var lt=e(5),At={};At.styleTagTransform=p(),At.setAttributes=c(),At.insert=i().bind(null,"head"),At.domAPI=a(),At.insertStyleElement=A(),n()(lt.Z,At),lt.Z&&lt.Z.locals&&lt.Z.locals;const dt=e.p+"category-korean.png",pt=e.p+"category-chinese.png",ut=e.p+"category-japanese.png",ht=e.p+"category-western.png",mt=e.p+"category-asian.png",ft=e.p+"category-etc.png";var Et,gt,bt,wt=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};const vt={한식:dt,중식:pt,일식:ut,양식:ht,아시안:mt,기타:ft};class Ct extends HTMLImageElement{constructor(t){super(),Et.add(this),gt.set(this,void 0),function(t,n,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof n?t!==n||!a:!n.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===r?a.call(t,e):a?a.value=e:n.set(t,e)}(this,gt,t,"f"),this.classList.add(".category-icon"),wt(this,Et,"m",bt).call(this)}}gt=new WeakMap,Et=new WeakSet,bt=function(){this.src=vt[wt(this,gt,"f")],this.alt=wt(this,gt,"f")};var yt=e(823),Bt={};Bt.styleTagTransform=p(),Bt.setAttributes=c(),Bt.insert=i().bind(null,"head"),Bt.domAPI=a(),Bt.insertStyleElement=A(),n()(yt.Z,Bt),yt.Z&&yt.Z.locals&&yt.Z.locals;const xt=e.p+"favorite-icon-filled.png",kt=e.p+"favorite-icon-lined.png";var Tt,St,_t,Zt,jt,Lt=function(t,n,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof n?t!==n||!a:!n.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(t,e):a?a.value=e:n.set(t,e),e},Mt=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};const Wt="bookmarkBtnClicked";class Pt extends HTMLButtonElement{constructor(t){super(),Tt.add(this),St.set(this,void 0),_t.set(this,void 0),Lt(this,St,t,"f"),Lt(this,_t,Mt(this,Tt,"m",jt).call(this),"f"),this.classList.add("restaurant__bookmark"),this.appendChild(Mt(this,_t,"f")),Mt(this,Tt,"m",Zt).call(this)}connectedCallback(){this.addEventListener("click",(()=>{Lt(this,St,!Mt(this,St,"f"),"f"),Mt(this,Tt,"m",Zt).call(this),this.dispatchEvent(new CustomEvent(Wt,{bubbles:!0,detail:{isBookmark:Mt(this,St,"f")}}))}))}}St=new WeakMap,_t=new WeakMap,Tt=new WeakSet,Zt=function(){Mt(this,_t,"f").src=Mt(this,St,"f")?xt:kt},jt=function(){const t=document.createElement("img");return t.src=Mt(this,St,"f")?xt:kt,t};var Yt=e(309),qt={};qt.styleTagTransform=p(),qt.setAttributes=c(),qt.insert=i().bind(null,"head"),qt.domAPI=a(),qt.insertStyleElement=A(),n()(Yt.Z,qt),Yt.Z&&Yt.Z.locals&&Yt.Z.locals;var zt,Rt,It,Dt,Nt,Ht,Ft,Ot,Ut,Xt,Gt,Vt,$t,Jt,Qt=function(t,n,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof n?t!==n||!a:!n.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(t,e):a?a.value=e:n.set(t,e),e},Kt=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};const tn="isBookmarkChanged",nn="deleteRestaurantItem",en="closeRestaurantDetailModal";class rn extends HTMLElement{constructor(t){super(),zt.add(this),Rt.set(this,void 0),It.set(this,void 0),Dt.set(this,void 0),Nt.set(this,void 0),Ht.set(this,void 0),this.classList.add("restaurant-detail");const n=document.querySelector("#template-restaurant-detail").content.cloneNode(!0);this.appendChild(n),Qt(this,Rt,t,"f"),Qt(this,Nt,this.querySelector("#delete"),"f"),Qt(this,Ht,this.querySelector("#close"),"f"),Qt(this,It,new Ct(Kt(this,Rt,"f").category),"f"),this.querySelector(".restaurant__category").appendChild(Kt(this,It,"f")),Qt(this,Dt,new Pt(Kt(this,Rt,"f").isBookmark),"f"),this.querySelector(".restaurant__info").appendChild(Kt(this,Dt,"f"))}connectedCallback(){Kt(this,Dt,"f").addEventListener(Wt,Kt(this,zt,"m",Ft).bind(this)),Kt(this,Nt,"f").addEventListener("click",Kt(this,zt,"m",Ot).bind(this)),Kt(this,Ht,"f").addEventListener("click",Kt(this,zt,"m",Ut).bind(this)),Kt(this,zt,"m",Xt).call(this)}}Rt=new WeakMap,It=new WeakMap,Dt=new WeakMap,Nt=new WeakMap,Ht=new WeakMap,zt=new WeakSet,Ft=function(t){const{isBookmark:n}=t.detail;Kt(this,Rt,"f").isBookmark=n,this.dispatchEvent(new CustomEvent(tn,{bubbles:!0,detail:{restaurant:{...Kt(this,Rt,"f")}}}))},Ot=function(){this.dispatchEvent(new CustomEvent(nn,{bubbles:!0,detail:{id:Kt(this,Rt,"f").id}}))},Ut=function(){this.dispatchEvent(new CustomEvent(en,{bubbles:!0}))},Xt=function(){Kt(this,zt,"m",Gt).call(this),Kt(this,zt,"m",Vt).call(this),Kt(this,zt,"m",$t).call(this),Kt(this,zt,"m",Jt).call(this)},Gt=function(){this.querySelector(".restaurant__name").textContent=Kt(this,Rt,"f").name},Vt=function(){this.querySelector(".restaurant__distance").textContent=`캠퍼스로부터 ${Kt(this,Rt,"f").distance}분 내 `},$t=function(){const{description:t}=Kt(this,Rt,"f");if(t){const t=document.createElement("p");t.classList.add("restaurant__description"),t.classList.add("text-body"),t.textContent=Kt(this,Rt,"f").description,this.querySelector(".restaurant__info").appendChild(t)}},Jt=function(){const{link:t}=Kt(this,Rt,"f");if(t){const n=document.createElement("a");n.classList.add("restaurant__link"),n.textContent=t,n.href=t,this.querySelector(".restaurant__info").appendChild(n)}};var an,on,sn,cn,ln,An,dn,pn,un,hn,mn=function(t,n,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof n?t!==n||!a:!n.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(t,e):a?a.value=e:n.set(t,e),e},fn=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};const En="isBookmarkChanged";class gn extends HTMLLIElement{constructor(t){super(),an.add(this),on.set(this,void 0),sn.set(this,void 0),cn.set(this,void 0),this.classList.add("restaurant");const n=document.querySelector("#template-restaurant-item").content.cloneNode(!0);this.appendChild(n),mn(this,on,t,"f"),mn(this,sn,new Ct(fn(this,on,"f").category),"f"),this.querySelector(".restaurant__category").appendChild(fn(this,sn,"f")),mn(this,cn,new Pt(fn(this,on,"f").isBookmark),"f"),this.appendChild(fn(this,cn,"f"))}connectedCallback(){fn(this,cn,"f").addEventListener(Wt,fn(this,an,"m",ln).bind(this)),this.querySelector(".restaurant__info").addEventListener("click",fn(this,an,"m",An).bind(this)),fn(this,an,"m",dn).call(this)}}on=new WeakMap,sn=new WeakMap,cn=new WeakMap,an=new WeakSet,ln=function(t){const{isBookmark:n}=t.detail;fn(this,on,"f").isBookmark=n,this.dispatchEvent(new CustomEvent(En,{bubbles:!0,detail:{restaurant:{...fn(this,on,"f")}}}))},An=function(){const t=new rn({...fn(this,on,"f")});document.querySelector("app-modal").openModal({body:t})},dn=function(){fn(this,an,"m",pn).call(this),fn(this,an,"m",un).call(this),fn(this,an,"m",hn).call(this)},pn=function(){this.querySelector(".restaurant__name").textContent=fn(this,on,"f").name},un=function(){this.querySelector(".restaurant__distance").textContent=`캠퍼스로부터 ${fn(this,on,"f").distance}분 내 `},hn=function(){this.querySelector(".restaurant__description").textContent=fn(this,on,"f").description};var bn,wn,vn,Cn,yn,Bn,xn,kn,Tn,Sn,_n,Zn,jn,Ln,Mn=function(t,n,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof n?t!==n||!a:!n.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(t,e):a?a.value=e:n.set(t,e),e},Wn=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};wn=new WeakMap,vn=new WeakMap,Cn=new WeakMap,yn=new WeakMap,bn=new WeakSet,Bn=function(){Wn(this,yn,"f").restaurants=(t=>{const n=window.localStorage.getItem("restaurants");if(n)return JSON.parse(n)})()},xn=function(){var t;t=Wn(this,yn,"f").restaurants,window.localStorage.setItem("restaurants",JSON.stringify(t))},kn=function({category:t,sort:n},e){const r=Wn(this,yn,"f").getFilteredList({category:t,sort:n},e);Wn(this,Cn,"f").restaurants=r},Tn=function(){Wn(this,bn,"m",Sn).call(this),Wn(this,bn,"m",_n).call(this),Wn(this,bn,"m",Zn).call(this),Wn(this,bn,"m",jn).call(this),Wn(this,bn,"m",Ln).call(this)},Sn=function(){document.addEventListener(Z,(t=>{Wn(this,yn,"f").add(t.detail.formData),Wn(this,bn,"m",xn).call(this),Wn(this,wn,"f").category=t.detail.formData.category;const{category:n,sort:e}=Wn(this,wn,"f");Wn(this,bn,"m",kn).call(this,{category:n,sort:e},Wn(this,vn,"f").isBookmark)}))},_n=function(){document.addEventListener(J,(t=>{const{category:n,sort:e}=t.detail;Wn(this,bn,"m",kn).call(this,{category:n,sort:e},Wn(this,vn,"f").isBookmark)}))},Zn=function(){document.addEventListener(ot,(()=>{const{category:t,sort:n}=Wn(this,wn,"f");Wn(this,bn,"m",kn).call(this,{category:t,sort:n},Wn(this,vn,"f").isBookmark)}))},jn=function(){document.addEventListener(En,(t=>{const{restaurant:n}=t.detail;Wn(this,yn,"f").update(n),Wn(this,bn,"m",xn).call(this)})),document.addEventListener(tn,(t=>{const{restaurant:n}=t.detail;Wn(this,yn,"f").update(n),Wn(this,bn,"m",xn).call(this);const{category:e,sort:r}=Wn(this,wn,"f");Wn(this,bn,"m",kn).call(this,{category:e,sort:r},Wn(this,vn,"f").isBookmark)}))},Ln=function(){document.addEventListener(nn,(t=>{const{id:n}=t.detail;Wn(this,yn,"f").delete(n),Wn(this,bn,"m",xn).call(this);const{category:e,sort:r}=Wn(this,wn,"f");Wn(this,bn,"m",kn).call(this,{category:e,sort:r},Wn(this,vn,"f").isBookmark)}))};var Pn=e(382),Yn={};Yn.styleTagTransform=p(),Yn.setAttributes=c(),Yn.insert=i().bind(null,"head"),Yn.domAPI=a(),Yn.insertStyleElement=A(),n()(Pn.Z,Yn),Pn.Z&&Pn.Z.locals&&Pn.Z.locals,e.p;var qn,zn,Rn,In=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};class Dn extends HTMLElement{constructor(){super(),qn.add(this);const t=document.querySelector("#template-header").content.cloneNode(!0);this.appendChild(t)}connectedCallback(){this.querySelector(".gnb__button").addEventListener("click",(()=>{const t=document.querySelector("app-modal"),n=In(this,qn,"m",zn).call(this),e=In(this,qn,"m",Rn).call(this);t.openModal({title:n,body:e})}))}}qn=new WeakSet,zn=function(){const t=document.createElement("h2");return t.setAttribute("class","modal-title text-title"),t.textContent="새로운 음식점",t},Rn=function(){const t=new L;return t.setAttribute("is","app-restaurant-form"),t.setAttribute("id","restaurant-form"),t};var Nn=e(400),Hn={};Hn.styleTagTransform=p(),Hn.setAttributes=c(),Hn.insert=i().bind(null,"head"),Hn.domAPI=a(),Hn.insertStyleElement=A(),n()(Nn.Z,Hn),Nn.Z&&Nn.Z.locals&&Nn.Z.locals;var Fn,On,Un,Xn,Gn=function(t,n,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof n?t!==n||!a:!n.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(t,e):a?a.value=e:n.set(t,e),e},Vn=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};class $n extends HTMLElement{constructor(){super(),Fn.add(this),On.set(this,void 0),Un.set(this,void 0);const t=document.querySelector("#template-modal").content.cloneNode(!0);this.appendChild(t),this.classList.add("modal"),Gn(this,On,this.querySelector(".modal-backdrop"),"f"),Gn(this,Un,this.querySelector(".modal-container"),"f")}connectedCallback(){this.addEventListener(Z,Vn(this,Fn,"m",Xn).bind(this)),this.addEventListener(j,Vn(this,Fn,"m",Xn).bind(this)),this.addEventListener(nn,Vn(this,Fn,"m",Xn).bind(this)),this.addEventListener(en,Vn(this,Fn,"m",Xn).bind(this)),Vn(this,On,"f").addEventListener("click",Vn(this,Fn,"m",Xn).bind(this))}openModal({title:t,body:n}){Vn(this,Un,"f").innerHTML="",t&&Vn(this,Un,"f").appendChild(t),n&&Vn(this,Un,"f").appendChild(n),this.classList.add("modal--open")}}On=new WeakMap,Un=new WeakMap,Fn=new WeakSet,Xn=function(){Vn(this,Un,"f").innerHTML="",this.classList.remove("modal--open")};var Jn=e(555),Qn={};Qn.styleTagTransform=p(),Qn.setAttributes=c(),Qn.insert=i().bind(null,"head"),Qn.domAPI=a(),Qn.insertStyleElement=A(),n()(Jn.Z,Qn),Jn.Z&&Jn.Z.locals&&Jn.Z.locals;var Kn,te,ne,ee=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};class re extends HTMLUListElement{constructor(){super(),Kn.add(this),te.set(this,[]),this.classList.add("restaurant-list")}get restaurants(){return[...ee(this,te,"f")]}set restaurants(t){(function(t,n,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof n?t!==n||!a:!n.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===r?a.call(t,e):a?a.value=e:n.set(t,e)})(this,te,t?[...t]:[],"f"),ee(this,Kn,"m",ne).call(this)}}te=new WeakMap,Kn=new WeakSet,ne=function(){this.innerHTML="";const t=document.createDocumentFragment();this.restaurants.forEach((n=>{const e=new gn(n);t.appendChild(e)})),this.appendChild(t)},window.customElements.define("app-gnb",Dn),window.customElements.define("app-modal",$n),window.customElements.define("app-select",F,{extends:"select"}),window.customElements.define("app-restaurant-form",L,{extends:"form"}),window.customElements.define("app-restaurant-list",re,{extends:"ul"}),window.customElements.define("app-restaurant-item",gn,{extends:"li"}),window.customElements.define("app-category-image",Ct,{extends:"img"}),window.customElements.define("app-bookmark-button",Pt,{extends:"button"}),window.customElements.define("app-restaurant-detail",rn),window.customElements.define("app-restaurant-filters",Q),window.customElements.define("app-bookmark-tab",it),(new class{constructor(){bn.add(this),wn.set(this,void 0),vn.set(this,void 0),Cn.set(this,void 0),yn.set(this,void 0),Mn(this,wn,document.querySelector("app-restaurant-filters"),"f"),Mn(this,vn,document.querySelector("app-bookmark-tab"),"f"),Mn(this,Cn,document.querySelector("#restaurant-list"),"f"),Mn(this,yn,new w,"f")}async start(){const{category:t,sort:n}=Wn(this,wn,"f");Wn(this,bn,"m",Bn).call(this),Wn(this,bn,"m",kn).call(this,{category:t,sort:n}),Wn(this,bn,"m",Tn).call(this)}}).start()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixHQUFjLENBQUVDLFFBQVMsUUFDNUUvTyxPQUFPNk8sZUFBZUMsT0FBTyxzQkFBdUIsR0FBZ0IsQ0FBRUMsUUFBUyxXQUMvRS9PLE9BQU82TyxlQUFlQyxPQUFPLHdCQUF5QixJQUN0RDlPLE9BQU82TyxlQUFlQyxPQUFPLHlCQUEwQixHQUN2RDlPLE9BQU82TyxlQUFlQyxPQUFPLG1CQUFvQixLQUNyQyxJVEpHLE1BQ1h2SyxjQUNJbUksR0FBZWpJLElBQUl6SSxNQUNuQjJRLEdBQXVCdkksSUFBSXBJLFVBQU0sR0FDakM0USxHQUFpQnhJLElBQUlwSSxVQUFNLEdBQzNCNlEsR0FBb0J6SSxJQUFJcEksVUFBTSxHQUM5QjhRLEdBQXNCMUksSUFBSXBJLFVBQU0sR0FDaEMsR0FBdUJBLEtBQU0yUSxHQUF3QjdNLFNBQVNDLGNBQWMsMEJBQTJCLEtBQ3ZHLEdBQXVCL0QsS0FBTTRRLEdBQWtCOU0sU0FBU0MsY0FBYyxvQkFBcUIsS0FDM0YsR0FBdUIvRCxLQUFNNlEsR0FBcUIvTSxTQUFTQyxjQUFjLG9CQUFxQixLQUM5RixHQUF1Qi9ELEtBQU04USxHQUF1QixJQUFJeEksRUFBcUIsSUFDakYsQ0FDQTBLLGNBQ0ksTUFBTSxTQUFFM0osRUFBUSxLQUFFRSxHQUFTLEdBQXVCdkosS0FBTTJRLEdBQXdCLEtBQ2hGLEdBQXVCM1EsS0FBTTBRLEdBQWdCLElBQUtLLElBQStCL0osS0FBS2hILE1BQ3RGLEdBQXVCQSxLQUFNMFEsR0FBZ0IsSUFBS08sSUFBMkJqSyxLQUFLaEgsS0FBTSxDQUNwRnFKLFdBQ0FFLFNBRUosR0FBdUJ2SixLQUFNMFEsR0FBZ0IsSUFBS1EsSUFBd0JsSyxLQUFLaEgsS0FDbkYsSVNmQWlULE8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0FwcC5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9Cb29rbWFya1RhYi9Cb29rbWFya1RhYi5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9HTkIvR05CLmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL01vZGFsL01vZGFsLmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnREZXRhaWwvUmVzdGF1cmFudERldGFpbC5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50RmlsdGVycy9SZXN0YXVyYW50RmlsdGVycy5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50Rm9ybS9SZXN0YXVyYW50Rm9ybS5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50SXRlbS9Cb29rbWFya0J1dHRvbi9Cb29rbWFya0J1dHRvbi5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50SXRlbS9DYXRlZ29yeUljb24vQ2F0ZWdvcnlJY29uLmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRJdGVtL1Jlc3RhdXJhbnRJdGVtLmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRMaXN0L1Jlc3RhdXJhbnRMaXN0LmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1NlbGVjdC9TZWxlY3QuY3NzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvZ2xvYmFsLmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvZ2xvYmFsLmNzcz9mMWE0Iiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvQXBwLmNzcz81NTYxIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2RvbWFpbi9SZXN0YXVyYW50TWFuYWdlci50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy91dGlscy9nZXRVbmlxdWVJRC50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9kb21haW4vUmVzdGF1cmFudEZpbHRlcnMudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50Rm9ybS9SZXN0YXVyYW50Rm9ybS5jc3M/ZTI1MSIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRGb3JtL1Jlc3RhdXJhbnRGb3JtLmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudEZpbHRlcnMvUmVzdGF1cmFudEZpbHRlcnMuY3NzP2NkNzMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvc3RhdGljcy9jb25zdGFudHMvc2VsZWN0T3B0aW9ucy5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1NlbGVjdC9TZWxlY3QuY3NzPzhlNzgiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9TZWxlY3QvU2VsZWN0LmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudEZpbHRlcnMvUmVzdGF1cmFudEZpbHRlcnMuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9Cb29rbWFya1RhYi9Cb29rbWFya1RhYi5jc3M/ODA0YSIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0Jvb2ttYXJrVGFiL0Jvb2ttYXJrVGFiLmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudEl0ZW0vUmVzdGF1cmFudEl0ZW0uY3NzPzk0MTciLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50SXRlbS9DYXRlZ29yeUljb24vQ2F0ZWdvcnlJY29uLmNzcz85Y2NmIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL3N0YXRpY3MvaW1ncy9jYXRlZ29yeS1rb3JlYW4ucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL3N0YXRpY3MvaW1ncy9jYXRlZ29yeS1jaGluZXNlLnBuZyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9zdGF0aWNzL2ltZ3MvY2F0ZWdvcnktamFwYW5lc2UucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL3N0YXRpY3MvaW1ncy9jYXRlZ29yeS13ZXN0ZXJuLnBuZyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9zdGF0aWNzL2ltZ3MvY2F0ZWdvcnktYXNpYW4ucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL3N0YXRpY3MvaW1ncy9jYXRlZ29yeS1ldGMucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudEl0ZW0vQ2F0ZWdvcnlJY29uL0NhdGVnb3J5SWNvbi5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRJdGVtL0Jvb2ttYXJrQnV0dG9uL0Jvb2ttYXJrQnV0dG9uLmNzcz8zNWMwIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL3N0YXRpY3MvaW1ncy9mYXZvcml0ZS1pY29uLWZpbGxlZC5wbmciLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvc3RhdGljcy9pbWdzL2Zhdm9yaXRlLWljb24tbGluZWQucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudEl0ZW0vQm9va21hcmtCdXR0b24vQm9va21hcmtCdXR0b24uanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50RGV0YWlsL1Jlc3RhdXJhbnREZXRhaWwuY3NzP2UxODQiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50RGV0YWlsL1Jlc3RhdXJhbnREZXRhaWwuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50SXRlbS9SZXN0YXVyYW50SXRlbS5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0FwcC5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy91dGlscy9sb2NhbFN0b3JhZ2UudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9HTkIvR05CLmNzcz9iMzU0Iiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL3N0YXRpY3MvaW1ncy9hZGQtYnV0dG9uLnBuZyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0dOQi9HTkIuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9Nb2RhbC9Nb2RhbC5jc3M/NTU5YSIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL01vZGFsL01vZGFsLmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudExpc3QvUmVzdGF1cmFudExpc3QuY3NzP2IxNTEiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50TGlzdC9SZXN0YXVyYW50TGlzdC5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi8qIOy5tO2FjOqzoOumrC/soJXroKwg7ZWE7YSwICovXFxuLnJlc3RhdXJhbnQtZmlsdGVyLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcblxcbiAgcGFkZGluZzogMCAxNnB4O1xcbiAgbWFyZ2luLXRvcDogMjRweDtcXG59XFxuXFxuLnJlc3RhdXJhbnQtZmlsdGVyLWNvbnRhaW5lciBzZWxlY3Qge1xcbiAgaGVpZ2h0OiA0NHB4O1xcbiAgbWluLXdpZHRoOiAxMjVweDtcXG5cXG4gIGJvcmRlcjogMXB4IHNvbGlkICNkMGQ1ZGQ7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG5cXG4gIGZvbnQtc2l6ZTogMTZweDtcXG59XFxuXFxuLnJlc3RhdXJhbnQtZmlsdGVyIHtcXG4gIHBhZGRpbmc6IDhweDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvQXBwLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxlQUFlO0FBQ2Y7RUFDRSxhQUFhO0VBQ2IsOEJBQThCOztFQUU5QixlQUFlO0VBQ2YsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsWUFBWTtFQUNaLGdCQUFnQjs7RUFFaEIseUJBQXlCO0VBQ3pCLGtCQUFrQjtFQUNsQix1QkFBdUI7O0VBRXZCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxZQUFZO0FBQ2RcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyog7Lm07YWM6rOg66asL+ygleugrCDtlYTthLAgKi9cXG4ucmVzdGF1cmFudC1maWx0ZXItY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuXFxuICBwYWRkaW5nOiAwIDE2cHg7XFxuICBtYXJnaW4tdG9wOiAyNHB4O1xcbn1cXG5cXG4ucmVzdGF1cmFudC1maWx0ZXItY29udGFpbmVyIHNlbGVjdCB7XFxuICBoZWlnaHQ6IDQ0cHg7XFxuICBtaW4td2lkdGg6IDEyNXB4O1xcblxcbiAgYm9yZGVyOiAxcHggc29saWQgI2QwZDVkZDtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcblxcbiAgZm9udC1zaXplOiAxNnB4O1xcbn1cXG5cXG4ucmVzdGF1cmFudC1maWx0ZXIge1xcbiAgcGFkZGluZzogOHB4O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuYm9va21hcmstdGFiLWNvbnRhaW5lciB7XFxuICB3aWR0aDogMTAwJTtcXG4gIHBhZGRpbmc6IDAgMTZweDtcXG4gIG1hcmdpbi10b3A6IDIycHg7XFxufVxcblxcbi5ib29rbWFyay10YWIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi50YWItaXRlbSB7XFxuICB3aWR0aDogNTAlO1xcbiAgbWluLWhlaWdodDogMTAwJTtcXG4gIHBhZGRpbmc6IDlweCAwO1xcblxcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgY29sb3I6IHZhcigtLWdyZXktMzAwKTtcXG5cXG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCB2YXIoLS1ncmV5LTIwMCk7XFxufVxcblxcbi50YWItaXRlbS5hY3RpdmUge1xcbiAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcblxcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHZhcigtLXByaW1hcnktY29sb3IpO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9Cb29rbWFya1RhYi9Cb29rbWFya1RhYi5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxXQUFXO0VBQ1gsZUFBZTtFQUNmLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxVQUFVO0VBQ1YsZ0JBQWdCO0VBQ2hCLGNBQWM7O0VBRWQsZUFBZTtFQUNmLGtCQUFrQjtFQUNsQixzQkFBc0I7O0VBRXRCLHdDQUF3QztBQUMxQzs7QUFFQTtFQUNFLDJCQUEyQjs7RUFFM0IsNkNBQTZDO0FBQy9DXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5ib29rbWFyay10YWItY29udGFpbmVyIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogMCAxNnB4O1xcbiAgbWFyZ2luLXRvcDogMjJweDtcXG59XFxuXFxuLmJvb2ttYXJrLXRhYiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLnRhYi1pdGVtIHtcXG4gIHdpZHRoOiA1MCU7XFxuICBtaW4taGVpZ2h0OiAxMDAlO1xcbiAgcGFkZGluZzogOXB4IDA7XFxuXFxuICBmb250LXNpemU6IDE2cHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBjb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcblxcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHZhcigtLWdyZXktMjAwKTtcXG59XFxuXFxuLnRhYi1pdGVtLmFjdGl2ZSB7XFxuICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxuXFxuICBib3JkZXItYm90dG9tOiAycHggc29saWQgdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi8qIEdOQiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cXG4uZ25iIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgaGVpZ2h0OiA2NHB4O1xcblxcbiAgcGFkZGluZzogMCAxNnB4O1xcblxcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxufVxcblxcbi5nbmJfX3RpdGxlIHtcXG4gIGNvbG9yOiAjZmNmY2ZkO1xcbn1cXG5cXG4uZ25iX19idXR0b24ge1xcbiAgaGVpZ2h0OiA0MHB4O1xcblxcbiAgYm9yZGVyOiBub25lO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuXFxuICBmb250LXNpemU6IDI0cHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5nbmJfX2J1dHRvbiBpbWcge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogNDBweDtcXG4gIGhlaWdodDogNDBweDtcXG4gIG9iamVjdC1maXQ6IGNvbnRhaW47XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL0dOQi9HTkIuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLG1EQUFtRDtBQUNuRDtFQUNFLGFBQWE7RUFDYiw4QkFBOEI7RUFDOUIsbUJBQW1CO0VBQ25CLFlBQVk7O0VBRVosZUFBZTs7RUFFZixzQ0FBc0M7QUFDeEM7O0FBRUE7RUFDRSxjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsWUFBWTs7RUFFWixZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLHVCQUF1Qjs7RUFFdkIsZUFBZTtFQUNmLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxjQUFjO0VBQ2QsV0FBVztFQUNYLFlBQVk7RUFDWixtQkFBbUI7QUFDckJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyogR05CICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbi5nbmIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBoZWlnaHQ6IDY0cHg7XFxuXFxuICBwYWRkaW5nOiAwIDE2cHg7XFxuXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXG59XFxuXFxuLmduYl9fdGl0bGUge1xcbiAgY29sb3I6ICNmY2ZjZmQ7XFxufVxcblxcbi5nbmJfX2J1dHRvbiB7XFxuICBoZWlnaHQ6IDQwcHg7XFxuXFxuICBib3JkZXI6IG5vbmU7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG5cXG4gIGZvbnQtc2l6ZTogMjRweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmduYl9fYnV0dG9uIGltZyB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiA0MHB4O1xcbiAgaGVpZ2h0OiA0MHB4O1xcbiAgb2JqZWN0LWZpdDogY29udGFpbjtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLm1vZGFsIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5tb2RhbC0tb3BlbiB7XFxuICBkaXNwbGF5OiBibG9jaztcXG5cXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG5cXG4gIGhlaWdodDogMTAwdmg7XFxufVxcblxcbi5tb2RhbC1iYWNrZHJvcCB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB0b3A6IDA7XFxuICByaWdodDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDA7XFxuXFxuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMzUpO1xcbn1cXG5cXG4ubW9kYWwtY29udGFpbmVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvdHRvbTogMDtcXG5cXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiBmaXQtY29udGVudDtcXG4gIG1heC1oZWlnaHQ6IDkwJTtcXG5cXG4gIHBhZGRpbmc6IDMycHggMTZweDtcXG5cXG4gIGJvcmRlci1yYWRpdXM6IDhweCA4cHggMHB4IDBweDtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWdyZXktMTAwKTtcXG5cXG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcXG59XFxuXFxuLm1vZGFsLXRpdGxlIHtcXG4gIG1hcmdpbi1ib3R0b206IDM2cHg7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL01vZGFsL01vZGFsLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLGNBQWM7O0VBRWQsZUFBZTtFQUNmLE1BQU07RUFDTixRQUFRO0VBQ1IsU0FBUztFQUNULE9BQU87O0VBRVAsYUFBYTtBQUNmOztBQUVBO0VBQ0UsZUFBZTtFQUNmLE1BQU07RUFDTixRQUFRO0VBQ1IsU0FBUztFQUNULE9BQU87O0VBRVAsK0JBQStCO0FBQ2pDOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLFNBQVM7O0VBRVQsV0FBVztFQUNYLG1CQUFtQjtFQUNuQixlQUFlOztFQUVmLGtCQUFrQjs7RUFFbEIsOEJBQThCO0VBQzlCLDJCQUEyQjs7RUFFM0Isa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsbUJBQW1CO0FBQ3JCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5tb2RhbCB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4ubW9kYWwtLW9wZW4ge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuXFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB0b3A6IDA7XFxuICByaWdodDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDA7XFxuXFxuICBoZWlnaHQ6IDEwMHZoO1xcbn1cXG5cXG4ubW9kYWwtYmFja2Ryb3Age1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcblxcbiAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjM1KTtcXG59XFxuXFxuLm1vZGFsLWNvbnRhaW5lciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBib3R0b206IDA7XFxuXFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogZml0LWNvbnRlbnQ7XFxuICBtYXgtaGVpZ2h0OiA5MCU7XFxuXFxuICBwYWRkaW5nOiAzMnB4IDE2cHg7XFxuXFxuICBib3JkZXItcmFkaXVzOiA4cHggOHB4IDBweCAwcHg7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1ncmV5LTEwMCk7XFxuXFxuICBvdmVyZmxvdy15OiBzY3JvbGw7XFxufVxcblxcbi5tb2RhbC10aXRsZSB7XFxuICBtYXJnaW4tYm90dG9tOiAzNnB4O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucmVzdGF1cmFudC1kZXRhaWwge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBnYXA6IDE2cHg7XFxufVxcblxcbi5yZXN0YXVyYW50LWRldGFpbCA+IC5yZXN0YXVyYW50X19pbmZvIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgZ2FwOiAxNnB4O1xcblxcbiAgbWFyZ2luLWJvdHRvbTogMzJweDtcXG59XFxuXFxuLnJlc3RhdXJhbnQtZGV0YWlsID4gLnJlc3RhdXJhbnRfX2luZm8gPiAucmVzdGF1cmFudF9fZGVzY3JpcHRpb24ge1xcbiAgcGFkZGluZzogMDtcXG4gIHRleHQtb3ZlcmZsb3c6IHVuc2V0O1xcbiAgLXdlYmtpdC1saW5lLWNsYW1wOiB1bnNldDtcXG59XFxuXFxuLnJlc3RhdXJhbnQtZGV0YWlsID4gLnJlc3RhdXJhbnRfX2luZm8gPiAucmVzdGF1cmFudF9fYm9va21hcmsge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAzMnB4O1xcbiAgcmlnaHQ6IDMycHg7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnREZXRhaWwvUmVzdGF1cmFudERldGFpbC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLFNBQVM7QUFDWDs7QUFFQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsU0FBUzs7RUFFVCxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxVQUFVO0VBQ1Ysb0JBQW9CO0VBQ3BCLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixTQUFTO0VBQ1QsV0FBVztBQUNiXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5yZXN0YXVyYW50LWRldGFpbCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGdhcDogMTZweDtcXG59XFxuXFxuLnJlc3RhdXJhbnQtZGV0YWlsID4gLnJlc3RhdXJhbnRfX2luZm8ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBnYXA6IDE2cHg7XFxuXFxuICBtYXJnaW4tYm90dG9tOiAzMnB4O1xcbn1cXG5cXG4ucmVzdGF1cmFudC1kZXRhaWwgPiAucmVzdGF1cmFudF9faW5mbyA+IC5yZXN0YXVyYW50X19kZXNjcmlwdGlvbiB7XFxuICBwYWRkaW5nOiAwO1xcbiAgdGV4dC1vdmVyZmxvdzogdW5zZXQ7XFxuICAtd2Via2l0LWxpbmUtY2xhbXA6IHVuc2V0O1xcbn1cXG5cXG4ucmVzdGF1cmFudC1kZXRhaWwgPiAucmVzdGF1cmFudF9faW5mbyA+IC5yZXN0YXVyYW50X19ib29rbWFyayB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDMycHg7XFxuICByaWdodDogMzJweDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLyog7Lm07YWM6rOg66asL+ygleugrCDtlYTthLAgKi9cXG4ucmVzdGF1cmFudC1maWx0ZXItY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuXFxuICBwYWRkaW5nOiAwIDE2cHg7XFxuICBtYXJnaW4tdG9wOiAzNnB4O1xcbn1cXG5cXG4ucmVzdGF1cmFudC1maWx0ZXItY29udGFpbmVyIHNlbGVjdCB7XFxuICBoZWlnaHQ6IDQ0cHg7XFxuICBtaW4td2lkdGg6IDEyNXB4O1xcblxcbiAgYm9yZGVyOiAxcHggc29saWQgI2QwZDVkZDtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcblxcbiAgZm9udC1zaXplOiAxNnB4O1xcbn1cXG5cXG4ucmVzdGF1cmFudC1maWx0ZXIge1xcbiAgcGFkZGluZzogOHB4O1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50RmlsdGVycy9SZXN0YXVyYW50RmlsdGVycy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsZUFBZTtBQUNmO0VBQ0UsYUFBYTtFQUNiLDhCQUE4Qjs7RUFFOUIsZUFBZTtFQUNmLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLFlBQVk7RUFDWixnQkFBZ0I7O0VBRWhCLHlCQUF5QjtFQUN6QixrQkFBa0I7RUFDbEIsdUJBQXVCOztFQUV2QixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsWUFBWTtBQUNkXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qIOy5tO2FjOqzoOumrC/soJXroKwg7ZWE7YSwICovXFxuLnJlc3RhdXJhbnQtZmlsdGVyLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcblxcbiAgcGFkZGluZzogMCAxNnB4O1xcbiAgbWFyZ2luLXRvcDogMzZweDtcXG59XFxuXFxuLnJlc3RhdXJhbnQtZmlsdGVyLWNvbnRhaW5lciBzZWxlY3Qge1xcbiAgaGVpZ2h0OiA0NHB4O1xcbiAgbWluLXdpZHRoOiAxMjVweDtcXG5cXG4gIGJvcmRlcjogMXB4IHNvbGlkICNkMGQ1ZGQ7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG5cXG4gIGZvbnQtc2l6ZTogMTZweDtcXG59XFxuXFxuLnJlc3RhdXJhbnQtZmlsdGVyIHtcXG4gIHBhZGRpbmc6IDhweDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmlucHV0LWNvbnRhaW5lciB7XFxuICBoZWlnaHQ6IDg1JTtcXG5cXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XFxufVxcblxcbi5mb3JtLWl0ZW0ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuXFxuICBtYXJnaW4tYm90dG9tOiAzNnB4O1xcbn1cXG5cXG4uZm9ybS1pdGVtIGxhYmVsIHtcXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTQwMCk7XFxuICBmb250LXNpemU6IDE0cHg7XFxufVxcblxcbi5mb3JtLWl0ZW0tLXJlcXVpcmVkIGxhYmVsOjphZnRlciB7XFxuICBwYWRkaW5nLWxlZnQ6IDRweDtcXG5cXG4gIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXG4gIGNvbnRlbnQ6ICcqJztcXG59XFxuXFxuLmZvcm0taXRlbSAuaGVscC10ZXh0IHtcXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTMwMCk7XFxufVxcblxcbi5mb3JtLWl0ZW0gaW5wdXQsXFxuLmZvcm0taXRlbSB0ZXh0YXJlYSxcXG4uZm9ybS1pdGVtIHNlbGVjdCB7XFxuICBwYWRkaW5nOiA4cHg7XFxuICBtYXJnaW46IDZweCAwO1xcblxcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZ3JleS0yMDApO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcblxcbiAgZm9udC1zaXplOiAxNnB4O1xcbn1cXG5cXG4uZm9ybS1pdGVtIHRleHRhcmVhIHtcXG4gIHJlc2l6ZTogbm9uZTtcXG59XFxuXFxuLmZvcm0taXRlbSBzZWxlY3Qge1xcbiAgaGVpZ2h0OiA0NHB4O1xcblxcbiAgcGFkZGluZzogOHB4O1xcblxcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZ3JleS0yMDApO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcblxcbiAgY29sb3I6IHZhcigtLWdyZXktMzAwKTtcXG59XFxuXFxuaW5wdXRbbmFtZT0nbmFtZSddLFxcbmlucHV0W25hbWU9J2xpbmsnXSB7XFxuICBoZWlnaHQ6IDQ0cHg7XFxufVxcblxcbi5idXR0b24tY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcblxcbi5idXR0b24ge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDQ0cHg7XFxuXFxuICBtYXJnaW4tcmlnaHQ6IDE2cHg7XFxuXFxuICBib3JkZXI6IG5vbmU7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuXFxuICBmb250LXdlaWdodDogNjAwO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uYnV0dG9uOmxhc3QtY2hpbGQge1xcbiAgbWFyZ2luLXJpZ2h0OiAwO1xcbn1cXG5cXG4uYnV0dG9uLS1zZWNvbmRhcnkge1xcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZ3JleS0zMDApO1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuXFxuICBjb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcbn1cXG5cXG4uYnV0dG9uLS1wcmltYXJ5IHtcXG4gIGJhY2tncm91bmQ6IHZhcigtLXByaW1hcnktY29sb3IpO1xcblxcbiAgY29sb3I6IHZhcigtLWdyZXktMTAwKTtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudEZvcm0vUmVzdGF1cmFudEZvcm0uY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsV0FBVzs7RUFFWCxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCOztFQUV0QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxzQkFBc0I7RUFDdEIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGlCQUFpQjs7RUFFakIsMkJBQTJCO0VBQzNCLFlBQVk7QUFDZDs7QUFFQTtFQUNFLHNCQUFzQjtBQUN4Qjs7QUFFQTs7O0VBR0UsWUFBWTtFQUNaLGFBQWE7O0VBRWIsaUNBQWlDO0VBQ2pDLGtCQUFrQjs7RUFFbEIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLFlBQVk7O0VBRVosWUFBWTs7RUFFWixpQ0FBaUM7RUFDakMsa0JBQWtCOztFQUVsQixzQkFBc0I7QUFDeEI7O0FBRUE7O0VBRUUsWUFBWTtBQUNkOztBQUVBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsV0FBVztFQUNYLFlBQVk7O0VBRVosa0JBQWtCOztFQUVsQixZQUFZO0VBQ1osa0JBQWtCOztFQUVsQixnQkFBZ0I7RUFDaEIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxpQ0FBaUM7RUFDakMsdUJBQXVCOztFQUV2QixzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxnQ0FBZ0M7O0VBRWhDLHNCQUFzQjtBQUN4QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuaW5wdXQtY29udGFpbmVyIHtcXG4gIGhlaWdodDogODUlO1xcblxcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG59XFxuXFxuLmZvcm0taXRlbSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG5cXG4gIG1hcmdpbi1ib3R0b206IDM2cHg7XFxufVxcblxcbi5mb3JtLWl0ZW0gbGFiZWwge1xcbiAgY29sb3I6IHZhcigtLWdyZXktNDAwKTtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG59XFxuXFxuLmZvcm0taXRlbS0tcmVxdWlyZWQgbGFiZWw6OmFmdGVyIHtcXG4gIHBhZGRpbmctbGVmdDogNHB4O1xcblxcbiAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcbiAgY29udGVudDogJyonO1xcbn1cXG5cXG4uZm9ybS1pdGVtIC5oZWxwLXRleHQge1xcbiAgY29sb3I6IHZhcigtLWdyZXktMzAwKTtcXG59XFxuXFxuLmZvcm0taXRlbSBpbnB1dCxcXG4uZm9ybS1pdGVtIHRleHRhcmVhLFxcbi5mb3JtLWl0ZW0gc2VsZWN0IHtcXG4gIHBhZGRpbmc6IDhweDtcXG4gIG1hcmdpbjogNnB4IDA7XFxuXFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTIwMCk7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuXFxuICBmb250LXNpemU6IDE2cHg7XFxufVxcblxcbi5mb3JtLWl0ZW0gdGV4dGFyZWEge1xcbiAgcmVzaXplOiBub25lO1xcbn1cXG5cXG4uZm9ybS1pdGVtIHNlbGVjdCB7XFxuICBoZWlnaHQ6IDQ0cHg7XFxuXFxuICBwYWRkaW5nOiA4cHg7XFxuXFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTIwMCk7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuXFxuICBjb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcbn1cXG5cXG5pbnB1dFtuYW1lPSduYW1lJ10sXFxuaW5wdXRbbmFtZT0nbGluayddIHtcXG4gIGhlaWdodDogNDRweDtcXG59XFxuXFxuLmJ1dHRvbi1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLmJ1dHRvbiB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogNDRweDtcXG5cXG4gIG1hcmdpbi1yaWdodDogMTZweDtcXG5cXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG5cXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5idXR0b246bGFzdC1jaGlsZCB7XFxuICBtYXJnaW4tcmlnaHQ6IDA7XFxufVxcblxcbi5idXR0b24tLXNlY29uZGFyeSB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTMwMCk7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG5cXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTMwMCk7XFxufVxcblxcbi5idXR0b24tLXByaW1hcnkge1xcbiAgYmFja2dyb3VuZDogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxuXFxuICBjb2xvcjogdmFyKC0tZ3JleS0xMDApO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucmVzdGF1cmFudF9fYm9va21hcmsge1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIGJvcmRlcjogbm9uZTtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX2Jvb2ttYXJrID4gaW1nIHtcXG4gIHdpZHRoOiAzMnB4O1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50SXRlbS9Cb29rbWFya0J1dHRvbi9Cb29rbWFya0J1dHRvbi5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxnQkFBZ0I7RUFDaEIsWUFBWTtBQUNkOztBQUVBO0VBQ0UsV0FBVztBQUNiXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5yZXN0YXVyYW50X19ib29rbWFyayB7XFxuICBiYWNrZ3JvdW5kOiBub25lO1xcbiAgYm9yZGVyOiBub25lO1xcbn1cXG5cXG4ucmVzdGF1cmFudF9fYm9va21hcmsgPiBpbWcge1xcbiAgd2lkdGg6IDMycHg7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5jYXRlZ29yeS1pY29uIHtcXG4gIHdpZHRoOiAzNnB4O1xcbiAgaGVpZ2h0OiAzNnB4O1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50SXRlbS9DYXRlZ29yeUljb24vQ2F0ZWdvcnlJY29uLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFdBQVc7RUFDWCxZQUFZO0FBQ2RcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmNhdGVnb3J5LWljb24ge1xcbiAgd2lkdGg6IDM2cHg7XFxuICBoZWlnaHQ6IDM2cHg7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5yZXN0YXVyYW50IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG5cXG4gIHBhZGRpbmc6IDE2cHggOHB4O1xcblxcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlOWVhZWQ7XFxufVxcblxcbi5yZXN0YXVyYW50X19jYXRlZ29yeSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgd2lkdGg6IDY0cHg7XFxuICBoZWlnaHQ6IDY0cHg7XFxuICBtaW4td2lkdGg6IDY0cHg7XFxuICBtaW4taGVpZ2h0OiA2NHB4O1xcblxcbiAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xcblxcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgYmFja2dyb3VuZDogdmFyKC0tbGlnaHRlbi1jb2xvcik7XFxufVxcblxcbi5yZXN0YXVyYW50X19pbmZvIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcblxcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcbi5yZXN0YXVyYW50X19uYW1lIHtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX2Rpc3RhbmNlIHtcXG4gIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX2Rlc2NyaXB0aW9uIHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcblxcbiAgcGFkZGluZy10b3A6IDhweDtcXG5cXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG4gIC13ZWJraXQtbGluZS1jbGFtcDogMjtcXG4gIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRJdGVtL1Jlc3RhdXJhbnRJdGVtLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGFBQWE7RUFDYix1QkFBdUI7O0VBRXZCLGlCQUFpQjs7RUFFakIsZ0NBQWdDO0FBQ2xDOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsV0FBVztFQUNYLFlBQVk7RUFDWixlQUFlO0VBQ2YsZ0JBQWdCOztFQUVoQixrQkFBa0I7O0VBRWxCLGtCQUFrQjtFQUNsQixnQ0FBZ0M7QUFDbEM7O0FBRUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLDJCQUEyQjs7RUFFM0IsV0FBVztBQUNiOztBQUVBO0VBQ0UsU0FBUztBQUNYOztBQUVBO0VBQ0UsMkJBQTJCO0FBQzdCOztBQUVBO0VBQ0Usb0JBQW9COztFQUVwQixnQkFBZ0I7O0VBRWhCLGdCQUFnQjtFQUNoQix1QkFBdUI7RUFDdkIscUJBQXFCO0VBQ3JCLDRCQUE0QjtBQUM5QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucmVzdGF1cmFudCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxuXFxuICBwYWRkaW5nOiAxNnB4IDhweDtcXG5cXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZTllYWVkO1xcbn1cXG5cXG4ucmVzdGF1cmFudF9fY2F0ZWdvcnkge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHdpZHRoOiA2NHB4O1xcbiAgaGVpZ2h0OiA2NHB4O1xcbiAgbWluLXdpZHRoOiA2NHB4O1xcbiAgbWluLWhlaWdodDogNjRweDtcXG5cXG4gIG1hcmdpbi1yaWdodDogMTZweDtcXG5cXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWxpZ2h0ZW4tY29sb3IpO1xcbn1cXG5cXG4ucmVzdGF1cmFudF9faW5mbyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG5cXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG4ucmVzdGF1cmFudF9fbmFtZSB7XFxuICBtYXJnaW46IDA7XFxufVxcblxcbi5yZXN0YXVyYW50X19kaXN0YW5jZSB7XFxuICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxufVxcblxcbi5yZXN0YXVyYW50X19kZXNjcmlwdGlvbiB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG5cXG4gIHBhZGRpbmctdG9wOiA4cHg7XFxuXFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICAtd2Via2l0LWxpbmUtY2xhbXA6IDI7XFxuICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIvKiDsnYzsi53soJAg66qp66GdICovXFxuLnJlc3RhdXJhbnQtbGlzdC1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuXFxuICBwYWRkaW5nOiAwIDE2cHg7XFxuICBtYXJnaW46IDE2cHggMDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudExpc3QvUmVzdGF1cmFudExpc3QuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLFdBQVc7QUFDWDtFQUNFLGFBQWE7RUFDYixzQkFBc0I7O0VBRXRCLGVBQWU7RUFDZixjQUFjO0FBQ2hCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qIOydjOyLneygkCDrqqnroZ0gKi9cXG4ucmVzdGF1cmFudC1saXN0LWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG5cXG4gIHBhZGRpbmc6IDAgMTZweDtcXG4gIG1hcmdpbjogMTZweCAwO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJzZWxlY3Qge1xcbiAgcGFkZGluZzogOHB4O1xcbiAgbWFyZ2luOiA2cHggMDtcXG5cXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWdyZXktMjAwKTtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG5cXG4gIGZvbnQtc2l6ZTogMTZweDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvU2VsZWN0L1NlbGVjdC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxZQUFZO0VBQ1osYUFBYTs7RUFFYixpQ0FBaUM7RUFDakMsa0JBQWtCOztFQUVsQixlQUFlO0FBQ2pCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcInNlbGVjdCB7XFxuICBwYWRkaW5nOiA4cHg7XFxuICBtYXJnaW46IDZweCAwO1xcblxcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZ3JleS0yMDApO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcblxcbiAgZm9udC1zaXplOiAxNnB4O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIqIHtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG51bCxcXG5saSB7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5cXG5odG1sLFxcbmJvZHkge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuXFxuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG5cXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW1zLXVzZS1zZWxlY3Q6IG5vbmU7XFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXG59XFxuXFxuLyogQ29sb3JzICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbjpyb290IHtcXG4gIC0tcHJpbWFyeS1jb2xvcjogI2VjNGEwYTtcXG4gIC0tbGlnaHRlbi1jb2xvcjogI2Y2YTg4YTtcXG4gIC0tZ3JleS0xMDA6ICNmZmZmZmY7XFxuICAtLWdyZXktMjAwOiAjZDBkNWRkO1xcbiAgLS1ncmV5LTMwMDogIzY2NzA4NTtcXG4gIC0tZ3JleS00MDA6ICMzNDQwNTQ7XFxuICAtLWdyZXktNTAwOiAjMDAwMDAwO1xcbn1cXG5cXG4vKiBUeXBvZ3JhcGh5ICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxuLnRleHQtdGl0bGUge1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxuICBmb250LXdlaWdodDogNjAwO1xcbn1cXG5cXG4udGV4dC1zdWJ0aXRsZSB7XFxuICBmb250LXNpemU6IDE4cHg7XFxuICBsaW5lLWhlaWdodDogMjhweDtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxufVxcblxcbi50ZXh0LWJvZHkge1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxuICBmb250LXdlaWdodDogNDAwO1xcbn1cXG5cXG4udGV4dC1jYXB0aW9uIHtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG59XFxuXFxuLmRyYWdnYWJsZSB7XFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBhbGw7XFxuICAtbW96LXVzZXItc2VsZWN0OiBhbGw7XFxuICAtbXMtdXNlLXNlbGVjdDogYWxsO1xcbiAgdXNlci1zZWxlY3Q6IGFsbDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvZ2xvYmFsLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFVBQVU7RUFDVixTQUFTO0VBQ1Qsc0JBQXNCO0FBQ3hCOztBQUVBOztFQUVFLGdCQUFnQjtBQUNsQjs7QUFFQTs7RUFFRSxXQUFXO0VBQ1gsWUFBWTs7RUFFWix1QkFBdUI7RUFDdkIsZUFBZTs7RUFFZix5QkFBeUI7RUFDekIsc0JBQXNCO0VBQ3RCLG9CQUFvQjtFQUNwQixpQkFBaUI7QUFDbkI7O0FBRUEsbURBQW1EO0FBQ25EO0VBQ0Usd0JBQXdCO0VBQ3hCLHdCQUF3QjtFQUN4QixtQkFBbUI7RUFDbkIsbUJBQW1CO0VBQ25CLG1CQUFtQjtFQUNuQixtQkFBbUI7RUFDbkIsbUJBQW1CO0FBQ3JCOztBQUVBLG1EQUFtRDtBQUNuRDtFQUNFLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0Usd0JBQXdCO0VBQ3hCLHFCQUFxQjtFQUNyQixtQkFBbUI7RUFDbkIsZ0JBQWdCO0FBQ2xCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIioge1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbnVsLFxcbmxpIHtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcblxcbmh0bWwsXFxuYm9keSB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG5cXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAxNnB4O1xcblxcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbXMtdXNlLXNlbGVjdDogbm9uZTtcXG4gIHVzZXItc2VsZWN0OiBub25lO1xcbn1cXG5cXG4vKiBDb2xvcnMgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxuOnJvb3Qge1xcbiAgLS1wcmltYXJ5LWNvbG9yOiAjZWM0YTBhO1xcbiAgLS1saWdodGVuLWNvbG9yOiAjZjZhODhhO1xcbiAgLS1ncmV5LTEwMDogI2ZmZmZmZjtcXG4gIC0tZ3JleS0yMDA6ICNkMGQ1ZGQ7XFxuICAtLWdyZXktMzAwOiAjNjY3MDg1O1xcbiAgLS1ncmV5LTQwMDogIzM0NDA1NDtcXG4gIC0tZ3JleS01MDA6ICMwMDAwMDA7XFxufVxcblxcbi8qIFR5cG9ncmFwaHkgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cXG4udGV4dC10aXRsZSB7XFxuICBmb250LXNpemU6IDIwcHg7XFxuICBsaW5lLWhlaWdodDogMjRweDtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxufVxcblxcbi50ZXh0LXN1YnRpdGxlIHtcXG4gIGZvbnQtc2l6ZTogMThweDtcXG4gIGxpbmUtaGVpZ2h0OiAyOHB4O1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG59XFxuXFxuLnRleHQtYm9keSB7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBsaW5lLWhlaWdodDogMjRweDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxufVxcblxcbi50ZXh0LWNhcHRpb24ge1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XFxuICBmb250LXdlaWdodDogNDAwO1xcbn1cXG5cXG4uZHJhZ2dhYmxlIHtcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IGFsbDtcXG4gIC1tb3otdXNlci1zZWxlY3Q6IGFsbDtcXG4gIC1tcy11c2Utc2VsZWN0OiBhbGw7XFxuICB1c2VyLXNlbGVjdDogYWxsO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2dsb2JhbC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2dsb2JhbC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQXBwLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQXBwLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfUmVzdGF1cmFudE1hbmFnZXJfcmVzdGF1cmFudHM7XG5pbXBvcnQgZ2V0VW5pcXVlSUQgZnJvbSAnLi4vdXRpbHMvZ2V0VW5pcXVlSUQnO1xuaW1wb3J0IHsgZmlsdGVyQnlCb29rbWFyaywgZmlsdGVyQnlDYXRlZ29yeSwgc29ydEJ5T3B0aW9uIH0gZnJvbSAnLi9SZXN0YXVyYW50RmlsdGVycyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXN0YXVyYW50TWFuYWdlciB7XG4gICAgY29uc3RydWN0b3IocmVzdGF1cmFudHMgPSBbXSkge1xuICAgICAgICBfUmVzdGF1cmFudE1hbmFnZXJfcmVzdGF1cmFudHMuc2V0KHRoaXMsIFtdKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudE1hbmFnZXJfcmVzdGF1cmFudHMsIFsuLi5yZXN0YXVyYW50c10sIFwiZlwiKTtcbiAgICB9XG4gICAgYWRkKHJlc3RhdXJhbnQpIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudE1hbmFnZXJfcmVzdGF1cmFudHMsIFwiZlwiKS5wdXNoKHsgaWQ6IGdldFVuaXF1ZUlEKCksIGlzQm9va21hcms6IGZhbHNlLCAuLi5yZXN0YXVyYW50IH0pO1xuICAgIH1cbiAgICBkZWxldGUoaWQpIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudE1hbmFnZXJfcmVzdGF1cmFudHMsIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRNYW5hZ2VyX3Jlc3RhdXJhbnRzLCBcImZcIikuZmlsdGVyKChyZXN0YXVyYW50KSA9PiByZXN0YXVyYW50LmlkICE9PSBpZCksIFwiZlwiKTtcbiAgICB9XG4gICAgdXBkYXRlKHVwZGF0ZWRSZXN0YXVyYW50KSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudE1hbmFnZXJfcmVzdGF1cmFudHMsIFwiZlwiKS5maW5kSW5kZXgoKHJlc3RhdXJhbnQpID0+IHJlc3RhdXJhbnQuaWQgPT09IHVwZGF0ZWRSZXN0YXVyYW50LmlkKTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudE1hbmFnZXJfcmVzdGF1cmFudHMsIFwiZlwiKVtpbmRleF0gPSB1cGRhdGVkUmVzdGF1cmFudDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRGaWx0ZXJlZExpc3Qob3B0aW9ucywgaXNCb29rbWFyaykge1xuICAgICAgICBjb25zdCByZXN0YXVyYW50cyA9IGZpbHRlckJ5Qm9va21hcmsoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudE1hbmFnZXJfcmVzdGF1cmFudHMsIFwiZlwiKSwgaXNCb29rbWFyayk7XG4gICAgICAgIGNvbnN0IGZpbHRlcmVkUmVzdGF1cmFudHMgPSBmaWx0ZXJCeUNhdGVnb3J5KHJlc3RhdXJhbnRzLCBvcHRpb25zLmNhdGVnb3J5KTtcbiAgICAgICAgcmV0dXJuIHNvcnRCeU9wdGlvbihmaWx0ZXJlZFJlc3RhdXJhbnRzLCBvcHRpb25zLnNvcnQpO1xuICAgIH1cbn1cbl9SZXN0YXVyYW50TWFuYWdlcl9yZXN0YXVyYW50cyA9IG5ldyBXZWFrTWFwKCk7XG4iLCJjb25zdCBnZXRVbmlxdWVJRCA9ICgpID0+IERhdGUubm93KCk7XG5leHBvcnQgZGVmYXVsdCBnZXRVbmlxdWVJRDtcbiIsImV4cG9ydCBjb25zdCBmaWx0ZXJCeUJvb2ttYXJrID0gKHJlc3RhdXJhbnRzLCBpc0Jvb2ttYXJrKSA9PiB7XG4gICAgaWYgKGlzQm9va21hcmspIHtcbiAgICAgICAgcmV0dXJuIHJlc3RhdXJhbnRzLmZpbHRlcigocmVzdGF1cmFudCkgPT4gcmVzdGF1cmFudC5pc0Jvb2ttYXJrKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3RhdXJhbnRzO1xufTtcbmV4cG9ydCBjb25zdCBmaWx0ZXJCeUNhdGVnb3J5ID0gKHJlc3RhdXJhbnRzLCBjYXRlZ29yeSkgPT4ge1xuICAgIGlmIChjYXRlZ29yeSA9PT0gJ+yghOyytCcpIHtcbiAgICAgICAgcmV0dXJuIHJlc3RhdXJhbnRzO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdGF1cmFudHMuZmlsdGVyKChyZXN0YXVyYW50KSA9PiByZXN0YXVyYW50LmNhdGVnb3J5ID09PSBjYXRlZ29yeSk7XG59O1xuZXhwb3J0IGNvbnN0IHNvcnRCeU9wdGlvbiA9IChyZXN0YXVyYW50cywgc29ydCkgPT4ge1xuICAgIGlmICghcmVzdGF1cmFudHMpXG4gICAgICAgIHJldHVybiBbXTtcbiAgICBpZiAoc29ydCA9PT0gJ25hbWUnKSB7XG4gICAgICAgIHJldHVybiBbLi4ucmVzdGF1cmFudHNdLnNvcnQoKGEsIGIpID0+IGEubmFtZS5sb2NhbGVDb21wYXJlKGIubmFtZSkpO1xuICAgIH1cbiAgICBpZiAoc29ydCA9PT0gJ2Rpc3RhbmNlJykge1xuICAgICAgICByZXR1cm4gWy4uLnJlc3RhdXJhbnRzXS5zb3J0KChhLCBiKSA9PiBhLmRpc3RhbmNlIC0gYi5kaXN0YW5jZSk7XG4gICAgfVxuICAgIHJldHVybiBbLi4ucmVzdGF1cmFudHNdO1xufTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SZXN0YXVyYW50Rm9ybS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Jlc3RhdXJhbnRGb3JtLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfUmVzdGF1cmFudEZvcm1faW5zdGFuY2VzLCBfUmVzdGF1cmFudEZvcm1fbGlua0lucHV0LCBfUmVzdGF1cmFudEZvcm1faGFuZGxlU3VibWl0LCBfUmVzdGF1cmFudEZvcm1faGFuZGxlUmVzZXQsIF9SZXN0YXVyYW50Rm9ybV9jaGVja0xpbmtJbnB1dFZhaWxkaXR5LCBfUmVzdGF1cmFudEZvcm1fZ2V0Rm9ybURhdGFPYmo7XG5pbXBvcnQgJy4vUmVzdGF1cmFudEZvcm0uY3NzJztcbmV4cG9ydCBjb25zdCBSRVNUQVVSQU5UX0ZPUk1fRVZFTlRTID0ge1xuICAgIHN1Ym1pdDogJ3Jlc3RhdXJhbnRGb3JtU3VibWl0JyxcbiAgICByZXNldDogJ3Jlc3RhdXJhbnRGb3JtUmVzZXQnLFxufTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc3RhdXJhbnRGb3JtIGV4dGVuZHMgSFRNTEZvcm1FbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRGb3JtX2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIF9SZXN0YXVyYW50Rm9ybV9saW5rSW5wdXQuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RlbXBsYXRlLXJlc3RhdXJhbnQtZm9ybScpO1xuICAgICAgICBjb25zdCBjb250ZW50ID0gdGVtcGxhdGUuY29udGVudC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoY29udGVudCk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3RhdXJhbnRGb3JtX2xpbmtJbnB1dCwgdGhpcy5xdWVyeVNlbGVjdG9yKCcjbGluaycpLCBcImZcIik7XG4gICAgfVxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRGb3JtX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50Rm9ybV9oYW5kbGVTdWJtaXQpLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2V0JywgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEZvcm1faW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRGb3JtX2hhbmRsZVJlc2V0KS5iaW5kKHRoaXMpKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEZvcm1fbGlua0lucHV0LCBcImZcIikuYWRkRXZlbnRMaXN0ZW5lcignaW52YWxpZCcsICgpID0+IHtcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRGb3JtX2xpbmtJbnB1dCwgXCJmXCIpLnZhbHVlID0gJyc7XG4gICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50Rm9ybV9saW5rSW5wdXQsIFwiZlwiKS5zZXRDdXN0b21WYWxpZGl0eSgnJyk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbl9SZXN0YXVyYW50Rm9ybV9saW5rSW5wdXQgPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudEZvcm1faW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX1Jlc3RhdXJhbnRGb3JtX2hhbmRsZVN1Ym1pdCA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50Rm9ybV9oYW5kbGVTdWJtaXQoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoIV9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRGb3JtX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50Rm9ybV9jaGVja0xpbmtJbnB1dFZhaWxkaXR5KS5jYWxsKHRoaXMpKSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRGb3JtX2xpbmtJbnB1dCwgXCJmXCIpLnNldEN1c3RvbVZhbGlkaXR5KCfsnKDtmqjtlZjsp4Ag7JWK7J2AIOunge2BrOyeheuLiOuLpC4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gbmV3IEZvcm1EYXRhKGUudGFyZ2V0KTtcbiAgICBjb25zdCBmb3JtRGF0YSA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRGb3JtX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50Rm9ybV9nZXRGb3JtRGF0YU9iaikuY2FsbCh0aGlzLCBkYXRhKTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFJFU1RBVVJBTlRfRk9STV9FVkVOVFMuc3VibWl0LCB7XG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGRldGFpbDogeyBmb3JtRGF0YSB9LFxuICAgIH0pKTtcbiAgICB0aGlzLnJlc2V0KCk7XG59LCBfUmVzdGF1cmFudEZvcm1faGFuZGxlUmVzZXQgPSBmdW5jdGlvbiBfUmVzdGF1cmFudEZvcm1faGFuZGxlUmVzZXQoKSB7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChSRVNUQVVSQU5UX0ZPUk1fRVZFTlRTLnJlc2V0LCB7XG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgfSkpO1xufSwgX1Jlc3RhdXJhbnRGb3JtX2NoZWNrTGlua0lucHV0VmFpbGRpdHkgPSBmdW5jdGlvbiBfUmVzdGF1cmFudEZvcm1fY2hlY2tMaW5rSW5wdXRWYWlsZGl0eSgpIHtcbiAgICBpZiAoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEZvcm1fbGlua0lucHV0LCBcImZcIikudmFsdWUgPT09ICcnKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoJ15odHRwcz86Ly8nKTtcbiAgICByZXR1cm4gcmVnZXgudGVzdChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50Rm9ybV9saW5rSW5wdXQsIFwiZlwiKS52YWx1ZSk7XG59LCBfUmVzdGF1cmFudEZvcm1fZ2V0Rm9ybURhdGFPYmogPSBmdW5jdGlvbiBfUmVzdGF1cmFudEZvcm1fZ2V0Rm9ybURhdGFPYmooZGF0YSkge1xuICAgIHJldHVybiBbLi4uZGF0YS5rZXlzKCldLnJlZHVjZSgoZm9ybURhdGEsIGtleSkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGRhdGEuZ2V0KGtleSk7XG4gICAgICAgIHJldHVybiB7IC4uLmZvcm1EYXRhLCBba2V5XTogdmFsdWUgfTtcbiAgICB9LCB7fSk7XG59O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Jlc3RhdXJhbnRGaWx0ZXJzLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUmVzdGF1cmFudEZpbHRlcnMuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiY29uc3QgQ0FURUdPUllfRklMVEVSUyA9IFtcbiAgICB7IHZhbHVlOiAn7KCE7LK0Jywgb3B0aW9uOiAn7KCE7LK0JyB9LFxuICAgIHsgdmFsdWU6ICftlZzsi50nLCBvcHRpb246ICftlZzsi50nIH0sXG4gICAgeyB2YWx1ZTogJ+ykkeyLnScsIG9wdGlvbjogJ+ykkeyLnScgfSxcbiAgICB7IHZhbHVlOiAn7J287IudJywgb3B0aW9uOiAn7J287IudJyB9LFxuICAgIHsgdmFsdWU6ICfslpHsi50nLCBvcHRpb246ICfslpHsi50nIH0sXG4gICAgeyB2YWx1ZTogJ+yVhOyLnOyViCcsIG9wdGlvbjogJ+yVhOyLnOyViCcgfSxcbiAgICB7IHZhbHVlOiAn6riw7YOAJywgb3B0aW9uOiAn6riw7YOAJyB9LFxuXTtcbmNvbnN0IFNPUlRJTkdfRklMVEVSUyA9IFtcbiAgICB7IHZhbHVlOiAnbmFtZScsIG9wdGlvbjogJ+ydtOumhOyInCcgfSxcbiAgICB7IHZhbHVlOiAnZGlzdGFuY2UnLCBvcHRpb246ICfqsbDrpqzsiJwnIH0sXG5dO1xuY29uc3QgQ0FURUdPUklFUyA9IFtcbiAgICB7IHZhbHVlOiAnJywgb3B0aW9uOiAn7ISg7YOd7ZW0IOyjvOyEuOyalCcgfSxcbiAgICB7IHZhbHVlOiAn7ZWc7IudJywgb3B0aW9uOiAn7ZWc7IudJyB9LFxuICAgIHsgdmFsdWU6ICfspJHsi50nLCBvcHRpb246ICfspJHsi50nIH0sXG4gICAgeyB2YWx1ZTogJ+ydvOyLnScsIG9wdGlvbjogJ+ydvOyLnScgfSxcbiAgICB7IHZhbHVlOiAn7JaR7IudJywgb3B0aW9uOiAn7JaR7IudJyB9LFxuICAgIHsgdmFsdWU6ICfslYTsi5zslYgnLCBvcHRpb246ICfslYTsi5zslYgnIH0sXG4gICAgeyB2YWx1ZTogJ+q4sO2DgCcsIG9wdGlvbjogJ+q4sO2DgCcgfSxcbl07XG5jb25zdCBESVNUQU5DRVMgPSBbXG4gICAgeyB2YWx1ZTogNSwgb3B0aW9uOiAnNeu2hCDrgrQnIH0sXG4gICAgeyB2YWx1ZTogMTAsIG9wdGlvbjogJzEw67aEIOuCtCcgfSxcbiAgICB7IHZhbHVlOiAxNSwgb3B0aW9uOiAnMTXrtoQg64K0JyB9LFxuICAgIHsgdmFsdWU6IDIwLCBvcHRpb246ICcyMOu2hCDrgrQnIH0sXG4gICAgeyB2YWx1ZTogMzAsIG9wdGlvbjogJzMw67aEIOuCtCcgfSxcbl07XG5jb25zdCBTRUxFQ1RfT1BUSU9OUyA9IG5ldyBNYXAoW1xuICAgIFsnY2F0ZWdvcnlGaWx0ZXJzJywgQ0FURUdPUllfRklMVEVSU10sXG4gICAgWydzb3J0aW5nRmlsdGVycycsIFNPUlRJTkdfRklMVEVSU10sXG4gICAgWydjYXRlZ29yaWVzJywgQ0FURUdPUklFU10sXG4gICAgWydkaXN0YW5jZXMnLCBESVNUQU5DRVNdLFxuXSk7XG5leHBvcnQgZGVmYXVsdCBTRUxFQ1RfT1BUSU9OUztcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TZWxlY3QuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TZWxlY3QuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX1NlbGVjdF9pbnN0YW5jZXMsIF9TZWxlY3RfaGFuZGxlT25DaGFuZ2UsIF9TZWxlY3RfY3JlYXRlT3B0aW9ucywgX1NlbGVjdF9nZW5lcmF0ZU9wdGlvbnM7XG5pbXBvcnQgU0VMRUNUX09QVElPTlMgZnJvbSAnLi4vLi4vc3RhdGljcy9jb25zdGFudHMvc2VsZWN0T3B0aW9ucyc7XG5pbXBvcnQgJy4vU2VsZWN0LmNzcyc7XG5leHBvcnQgY29uc3QgU0VMRUNUX0VWRU5UUyA9IHtcbiAgICBvbmNoYW5nZTogJ3NlbGVjdE9uQ2hhbmdlJyxcbn07XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWxlY3QgZXh0ZW5kcyBIVE1MU2VsZWN0RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIF9TZWxlY3RfaW5zdGFuY2VzLmFkZCh0aGlzKTtcbiAgICB9XG4gICAgZ2V0IHR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZSgndHlwZScpO1xuICAgIH1cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9TZWxlY3RfaW5zdGFuY2VzLCBcIm1cIiwgX1NlbGVjdF9oYW5kbGVPbkNoYW5nZSkuYmluZCh0aGlzKSk7XG4gICAgfVxuICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjaygpIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfU2VsZWN0X2luc3RhbmNlcywgXCJtXCIsIF9TZWxlY3RfY3JlYXRlT3B0aW9ucykuY2FsbCh0aGlzKTtcbiAgICB9XG59XG5fU2VsZWN0X2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9TZWxlY3RfaGFuZGxlT25DaGFuZ2UgPSBmdW5jdGlvbiBfU2VsZWN0X2hhbmRsZU9uQ2hhbmdlKGUpIHtcbiAgICBjb25zdCB7IHZhbHVlIH0gPSBlLnRhcmdldDtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFNFTEVDVF9FVkVOVFMub25jaGFuZ2UsIHtcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIGlkOiB0aGlzLmlkLFxuICAgICAgICB9LFxuICAgIH0pKTtcbn0sIF9TZWxlY3RfY3JlYXRlT3B0aW9ucyA9IGZ1bmN0aW9uIF9TZWxlY3RfY3JlYXRlT3B0aW9ucygpIHtcbiAgICB0aGlzLmlubmVySFRNTCA9ICcnO1xuICAgIGNvbnN0IGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1NlbGVjdF9pbnN0YW5jZXMsIFwibVwiLCBfU2VsZWN0X2dlbmVyYXRlT3B0aW9ucykuY2FsbCh0aGlzKS5mb3JFYWNoKChvcHRpb24pID0+IGZyYWdtZW50LmFwcGVuZENoaWxkKG9wdGlvbikpO1xuICAgIHRoaXMuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xufSwgX1NlbGVjdF9nZW5lcmF0ZU9wdGlvbnMgPSBmdW5jdGlvbiBfU2VsZWN0X2dlbmVyYXRlT3B0aW9ucygpIHtcbiAgICBjb25zdCBvcHRpb25zID0gU0VMRUNUX09QVElPTlMuZ2V0KHRoaXMudHlwZSkgfHwgW107XG4gICAgcmV0dXJuIG9wdGlvbnMubWFwKCh7IHZhbHVlLCBvcHRpb24gfSkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICAgIGVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSBvcHRpb247XG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH0pO1xufTtcblNlbGVjdC5vYnNlcnZlZEF0dHJpYnV0ZXMgPSBbJ3R5cGUnXTtcbiIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfUmVzdGF1cmFudEZpbHRlcnNfaW5zdGFuY2VzLCBfUmVzdGF1cmFudEZpbHRlcnNfY2F0ZWdvcnlGaWx0ZXIsIF9SZXN0YXVyYW50RmlsdGVyc19zb3J0aW5nRmlsdGVyLCBfUmVzdGF1cmFudEZpbHRlcnNfaGFuZGxlU2VsZWN0T25DaGFuZ2U7XG5pbXBvcnQgJy4vUmVzdGF1cmFudEZpbHRlcnMuY3NzJztcbmltcG9ydCB7IFNFTEVDVF9FVkVOVFMgfSBmcm9tICcuLi9TZWxlY3QvU2VsZWN0JztcbmV4cG9ydCBjb25zdCBSRVNUQVVSQU5UX0ZJTFRFUlNfRVZFTlRTID0ge1xuICAgIGZpbHRlckNoYW5nZTogJ2ZpbHRlckNoYW5nZScsXG59O1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzdGF1cmFudEZpbHRlcnMgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIF9SZXN0YXVyYW50RmlsdGVyc19pbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICBfUmVzdGF1cmFudEZpbHRlcnNfY2F0ZWdvcnlGaWx0ZXIuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9SZXN0YXVyYW50RmlsdGVyc19zb3J0aW5nRmlsdGVyLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0ZW1wbGF0ZS1yZXN0YXVyYW50LWZpbHRlci1jb250YWluZXInKTtcbiAgICAgICAgY29uc3QgY29udGVudCA9IHRlbXBsYXRlLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICB0aGlzLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuICAgIH1cbiAgICBnZXQgc29ydCgpIHtcbiAgICAgICAgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRGaWx0ZXJzX3NvcnRpbmdGaWx0ZXIsIFwiZlwiKS52YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGNhdGVnb3J5KCkge1xuICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEZpbHRlcnNfY2F0ZWdvcnlGaWx0ZXIsIFwiZlwiKS52YWx1ZTtcbiAgICB9XG4gICAgc2V0IGNhdGVnb3J5KGNhdGVnb3J5KSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRGaWx0ZXJzX2NhdGVnb3J5RmlsdGVyLCBcImZcIikudmFsdWUgPSBjYXRlZ29yeTtcbiAgICB9XG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3RhdXJhbnRGaWx0ZXJzX2NhdGVnb3J5RmlsdGVyLCB0aGlzLnF1ZXJ5U2VsZWN0b3IoJyNjYXRlZ29yeS1maWx0ZXInKSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50RmlsdGVyc19zb3J0aW5nRmlsdGVyLCB0aGlzLnF1ZXJ5U2VsZWN0b3IoJyNzb3J0aW5nLWZpbHRlcicpLCBcImZcIik7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihTRUxFQ1RfRVZFTlRTLm9uY2hhbmdlLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50RmlsdGVyc19pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudEZpbHRlcnNfaGFuZGxlU2VsZWN0T25DaGFuZ2UpLmJpbmQodGhpcykpO1xuICAgIH1cbn1cbl9SZXN0YXVyYW50RmlsdGVyc19jYXRlZ29yeUZpbHRlciA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50RmlsdGVyc19zb3J0aW5nRmlsdGVyID0gbmV3IFdlYWtNYXAoKSwgX1Jlc3RhdXJhbnRGaWx0ZXJzX2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9SZXN0YXVyYW50RmlsdGVyc19oYW5kbGVTZWxlY3RPbkNoYW5nZSA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50RmlsdGVyc19oYW5kbGVTZWxlY3RPbkNoYW5nZSgpIHtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFJFU1RBVVJBTlRfRklMVEVSU19FVkVOVFMuZmlsdGVyQ2hhbmdlLCB7XG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgY2F0ZWdvcnk6IHRoaXMuY2F0ZWdvcnksXG4gICAgICAgICAgICBzb3J0OiB0aGlzLnNvcnQsXG4gICAgICAgIH0sXG4gICAgfSkpO1xufTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Cb29rbWFya1RhYi5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0Jvb2ttYXJrVGFiLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfQm9va21hcmtUYWJfaW5zdGFuY2VzLCBfQm9va21hcmtUYWJfdGFiSXRlbXMsIF9Cb29rbWFya1RhYl9oYW5kbGVDbGlja1RhYkl0ZW07XG5pbXBvcnQgJy4vQm9va21hcmtUYWIuY3NzJztcbmV4cG9ydCBjb25zdCBCT09LTUFSS19UQUJfRVZFTlRTID0ge1xuICAgIGNoYW5nZVRhYjogJ3RhYkJvb2ttYXJrSXRlbScsXG59O1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9va21hcmtUYWIgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIF9Cb29rbWFya1RhYl9pbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICBfQm9va21hcmtUYWJfdGFiSXRlbXMuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RlbXBsYXRlLWJvb2ttYXJrLXRhYicpO1xuICAgICAgICBjb25zdCBjb250ZW50ID0gdGVtcGxhdGUuY29udGVudC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoY29udGVudCk7XG4gICAgfVxuICAgIGdldCBpc0Jvb2ttYXJrKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yKCcuYWN0aXZlJykuaWQgPT09ICdib29rbWFyayc7XG4gICAgfVxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9Cb29rbWFya1RhYl90YWJJdGVtcywgdGhpcy5xdWVyeVNlbGVjdG9yQWxsKCcudGFiLWl0ZW0nKSwgXCJmXCIpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQm9va21hcmtUYWJfaW5zdGFuY2VzLCBcIm1cIiwgX0Jvb2ttYXJrVGFiX2hhbmRsZUNsaWNrVGFiSXRlbSkuYmluZCh0aGlzKSk7XG4gICAgfVxufVxuX0Jvb2ttYXJrVGFiX3RhYkl0ZW1zID0gbmV3IFdlYWtNYXAoKSwgX0Jvb2ttYXJrVGFiX2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9Cb29rbWFya1RhYl9oYW5kbGVDbGlja1RhYkl0ZW0gPSBmdW5jdGlvbiBfQm9va21hcmtUYWJfaGFuZGxlQ2xpY2tUYWJJdGVtKGUpIHtcbiAgICBjb25zdCB0YXJnZXRJdGVtID0gZS50YXJnZXQ7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQm9va21hcmtUYWJfdGFiSXRlbXMsIFwiZlwiKS5mb3JFYWNoKCh0YWJJdGVtKSA9PiB7XG4gICAgICAgIHRhYkl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgfSk7XG4gICAgdGFyZ2V0SXRlbS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KEJPT0tNQVJLX1RBQl9FVkVOVFMuY2hhbmdlVGFiLCB7XG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgfSkpO1xufTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SZXN0YXVyYW50SXRlbS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Jlc3RhdXJhbnRJdGVtLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9DYXRlZ29yeUljb24uY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9DYXRlZ29yeUljb24uY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImNhdGVnb3J5LWtvcmVhbi5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiY2F0ZWdvcnktY2hpbmVzZS5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiY2F0ZWdvcnktamFwYW5lc2UucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImNhdGVnb3J5LXdlc3Rlcm4ucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImNhdGVnb3J5LWFzaWFuLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjYXRlZ29yeS1ldGMucG5nXCI7IiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9DYXRlZ29yeUljb25faW5zdGFuY2VzLCBfQ2F0ZWdvcnlJY29uX2NhdGVnb3J5LCBfQ2F0ZWdvcnlJY29uX3JlbmRlcjtcbmltcG9ydCAnLi9DYXRlZ29yeUljb24uY3NzJztcbmltcG9ydCBrb3JlYW5JY29uIGZyb20gJy4uLy4uLy4uL3N0YXRpY3MvaW1ncy9jYXRlZ29yeS1rb3JlYW4ucG5nJztcbmltcG9ydCBjaGluZXNlSWNvbiBmcm9tICcuLi8uLi8uLi9zdGF0aWNzL2ltZ3MvY2F0ZWdvcnktY2hpbmVzZS5wbmcnO1xuaW1wb3J0IGphcGFuZXNlSWNvbiBmcm9tICcuLi8uLi8uLi9zdGF0aWNzL2ltZ3MvY2F0ZWdvcnktamFwYW5lc2UucG5nJztcbmltcG9ydCB3ZXN0ZXJuSWNvbiBmcm9tICcuLi8uLi8uLi9zdGF0aWNzL2ltZ3MvY2F0ZWdvcnktd2VzdGVybi5wbmcnO1xuaW1wb3J0IGFzaWFuSWNvbiBmcm9tICcuLi8uLi8uLi9zdGF0aWNzL2ltZ3MvY2F0ZWdvcnktYXNpYW4ucG5nJztcbmltcG9ydCBldGNJY29uIGZyb20gJy4uLy4uLy4uL3N0YXRpY3MvaW1ncy9jYXRlZ29yeS1ldGMucG5nJztcbmNvbnN0IENBVEVHT1JZX0lDT05TID0ge1xuICAgIO2VnOyLnToga29yZWFuSWNvbixcbiAgICDspJHsi506IGNoaW5lc2VJY29uLFxuICAgIOydvOyLnTogamFwYW5lc2VJY29uLFxuICAgIOyWkeyLnTogd2VzdGVybkljb24sXG4gICAg7JWE7Iuc7JWIOiBhc2lhbkljb24sXG4gICAg6riw7YOAOiBldGNJY29uLFxufTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhdGVnb3J5SWNvbiBleHRlbmRzIEhUTUxJbWFnZUVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKGNhdGVnb3J5KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIF9DYXRlZ29yeUljb25faW5zdGFuY2VzLmFkZCh0aGlzKTtcbiAgICAgICAgX0NhdGVnb3J5SWNvbl9jYXRlZ29yeS5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQ2F0ZWdvcnlJY29uX2NhdGVnb3J5LCBjYXRlZ29yeSwgXCJmXCIpO1xuICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJy5jYXRlZ29yeS1pY29uJyk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0NhdGVnb3J5SWNvbl9pbnN0YW5jZXMsIFwibVwiLCBfQ2F0ZWdvcnlJY29uX3JlbmRlcikuY2FsbCh0aGlzKTtcbiAgICB9XG59XG5fQ2F0ZWdvcnlJY29uX2NhdGVnb3J5ID0gbmV3IFdlYWtNYXAoKSwgX0NhdGVnb3J5SWNvbl9pbnN0YW5jZXMgPSBuZXcgV2Vha1NldCgpLCBfQ2F0ZWdvcnlJY29uX3JlbmRlciA9IGZ1bmN0aW9uIF9DYXRlZ29yeUljb25fcmVuZGVyKCkge1xuICAgIHRoaXMuc3JjID0gQ0FURUdPUllfSUNPTlNbX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQ2F0ZWdvcnlJY29uX2NhdGVnb3J5LCBcImZcIildO1xuICAgIHRoaXMuYWx0ID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQ2F0ZWdvcnlJY29uX2NhdGVnb3J5LCBcImZcIik7XG59O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0Jvb2ttYXJrQnV0dG9uLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQm9va21hcmtCdXR0b24uY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZhdm9yaXRlLWljb24tZmlsbGVkLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmYXZvcml0ZS1pY29uLWxpbmVkLnBuZ1wiOyIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfQm9va21hcmtCdXR0b25faW5zdGFuY2VzLCBfQm9va21hcmtCdXR0b25faXNCb29rbWFyaywgX0Jvb2ttYXJrQnV0dG9uX2ltYWdlRWxlbWVudCwgX0Jvb2ttYXJrQnV0dG9uX3JlbmRlciwgX0Jvb2ttYXJrQnV0dG9uX2NyZWF0ZUltZ0VsZW1lbnQ7XG5pbXBvcnQgJy4vQm9va21hcmtCdXR0b24uY3NzJztcbmltcG9ydCBib29rbWFya0ljb25GaWxsZWQgZnJvbSAnLi4vLi4vLi4vc3RhdGljcy9pbWdzL2Zhdm9yaXRlLWljb24tZmlsbGVkLnBuZyc7XG5pbXBvcnQgYm9va21hcmtJY29uTGluZWQgZnJvbSAnLi4vLi4vLi4vc3RhdGljcy9pbWdzL2Zhdm9yaXRlLWljb24tbGluZWQucG5nJztcbmV4cG9ydCBjb25zdCBCT09LTUFSS19CVVRUT05fRVZFTlRTID0ge1xuICAgIGNsaWNrOiAnYm9va21hcmtCdG5DbGlja2VkJyxcbn07XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb29rbWFya0J1dHRvbiBleHRlbmRzIEhUTUxCdXR0b25FbGVtZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihpc0Jvb2ttYXJrKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIF9Cb29rbWFya0J1dHRvbl9pbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICBfQm9va21hcmtCdXR0b25faXNCb29rbWFyay5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX0Jvb2ttYXJrQnV0dG9uX2ltYWdlRWxlbWVudC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQm9va21hcmtCdXR0b25faXNCb29rbWFyaywgaXNCb29rbWFyaywgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9Cb29rbWFya0J1dHRvbl9pbWFnZUVsZW1lbnQsIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Jvb2ttYXJrQnV0dG9uX2luc3RhbmNlcywgXCJtXCIsIF9Cb29rbWFya0J1dHRvbl9jcmVhdGVJbWdFbGVtZW50KS5jYWxsKHRoaXMpLCBcImZcIik7XG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgncmVzdGF1cmFudF9fYm9va21hcmsnKTtcbiAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Cb29rbWFya0J1dHRvbl9pbWFnZUVsZW1lbnQsIFwiZlwiKSk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Jvb2ttYXJrQnV0dG9uX2luc3RhbmNlcywgXCJtXCIsIF9Cb29rbWFya0J1dHRvbl9yZW5kZXIpLmNhbGwodGhpcyk7XG4gICAgfVxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQm9va21hcmtCdXR0b25faXNCb29rbWFyaywgIV9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Jvb2ttYXJrQnV0dG9uX2lzQm9va21hcmssIFwiZlwiKSwgXCJmXCIpO1xuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQm9va21hcmtCdXR0b25faW5zdGFuY2VzLCBcIm1cIiwgX0Jvb2ttYXJrQnV0dG9uX3JlbmRlcikuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoQk9PS01BUktfQlVUVE9OX0VWRU5UUy5jbGljaywge1xuICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgZGV0YWlsOiB7IGlzQm9va21hcms6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Jvb2ttYXJrQnV0dG9uX2lzQm9va21hcmssIFwiZlwiKSB9LFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5fQm9va21hcmtCdXR0b25faXNCb29rbWFyayA9IG5ldyBXZWFrTWFwKCksIF9Cb29rbWFya0J1dHRvbl9pbWFnZUVsZW1lbnQgPSBuZXcgV2Vha01hcCgpLCBfQm9va21hcmtCdXR0b25faW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX0Jvb2ttYXJrQnV0dG9uX3JlbmRlciA9IGZ1bmN0aW9uIF9Cb29rbWFya0J1dHRvbl9yZW5kZXIoKSB7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQm9va21hcmtCdXR0b25faW1hZ2VFbGVtZW50LCBcImZcIikuc3JjID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQm9va21hcmtCdXR0b25faXNCb29rbWFyaywgXCJmXCIpID8gYm9va21hcmtJY29uRmlsbGVkIDogYm9va21hcmtJY29uTGluZWQ7XG59LCBfQm9va21hcmtCdXR0b25fY3JlYXRlSW1nRWxlbWVudCA9IGZ1bmN0aW9uIF9Cb29rbWFya0J1dHRvbl9jcmVhdGVJbWdFbGVtZW50KCkge1xuICAgIGNvbnN0IGltZ0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICBpbWdFbGVtZW50LnNyYyA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Jvb2ttYXJrQnV0dG9uX2lzQm9va21hcmssIFwiZlwiKSA/IGJvb2ttYXJrSWNvbkZpbGxlZCA6IGJvb2ttYXJrSWNvbkxpbmVkO1xuICAgIHJldHVybiBpbWdFbGVtZW50O1xufTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SZXN0YXVyYW50RGV0YWlsLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUmVzdGF1cmFudERldGFpbC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX1Jlc3RhdXJhbnREZXRhaWxfaW5zdGFuY2VzLCBfUmVzdGF1cmFudERldGFpbF9yZXN0YXVyYW50LCBfUmVzdGF1cmFudERldGFpbF9jYXRlZ29yeUljb24sIF9SZXN0YXVyYW50RGV0YWlsX2Jvb2ttYXJrQnRuLCBfUmVzdGF1cmFudERldGFpbF9kZWxldGVCdG4sIF9SZXN0YXVyYW50RGV0YWlsX2Nsb3NlQnRuLCBfUmVzdGF1cmFudERldGFpbF9vblRvZ2dsZUJvb2ttYXJrLCBfUmVzdGF1cmFudERldGFpbF9vbkNsaWNrRGVsZXRlQnV0dG9uLCBfUmVzdGF1cmFudERldGFpbF9vbkNsaWNrQ2xvc2VCdXR0b24sIF9SZXN0YXVyYW50RGV0YWlsX3JlbmRlciwgX1Jlc3RhdXJhbnREZXRhaWxfc2V0TmFtZSwgX1Jlc3RhdXJhbnREZXRhaWxfc2V0RGlzdGFuY2UsIF9SZXN0YXVyYW50RGV0YWlsX3NldERlc2NyaXB0aW9uLCBfUmVzdGF1cmFudERldGFpbF9zZXRMaW5rO1xuaW1wb3J0ICcuL1Jlc3RhdXJhbnREZXRhaWwuY3NzJztcbmltcG9ydCBCb29rbWFya0J1dHRvbiwgeyBCT09LTUFSS19CVVRUT05fRVZFTlRTIH0gZnJvbSAnLi4vUmVzdGF1cmFudEl0ZW0vQm9va21hcmtCdXR0b24vQm9va21hcmtCdXR0b24nO1xuaW1wb3J0IENhdGVnb3J5SWNvbiBmcm9tICcuLi9SZXN0YXVyYW50SXRlbS9DYXRlZ29yeUljb24vQ2F0ZWdvcnlJY29uJztcbmV4cG9ydCBjb25zdCBSRVNUQVVSQU5UX0RFVEFJTF9FVkVOVFMgPSB7XG4gICAgaXNCb29rbWFya0NoYW5nZWQ6ICdpc0Jvb2ttYXJrQ2hhbmdlZCcsXG4gICAgZGVsZXRlSXRlbTogJ2RlbGV0ZVJlc3RhdXJhbnRJdGVtJyxcbiAgICBjbG9zZU1vZGFsOiAnY2xvc2VSZXN0YXVyYW50RGV0YWlsTW9kYWwnLFxufTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc3RhdXJhbnREZXRhaWwgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IocmVzdGF1cmFudCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBfUmVzdGF1cmFudERldGFpbF9pbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICBfUmVzdGF1cmFudERldGFpbF9yZXN0YXVyYW50LnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfUmVzdGF1cmFudERldGFpbF9jYXRlZ29yeUljb24uc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9SZXN0YXVyYW50RGV0YWlsX2Jvb2ttYXJrQnRuLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfUmVzdGF1cmFudERldGFpbF9kZWxldGVCdG4uc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9SZXN0YXVyYW50RGV0YWlsX2Nsb3NlQnRuLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ3Jlc3RhdXJhbnQtZGV0YWlsJyk7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RlbXBsYXRlLXJlc3RhdXJhbnQtZGV0YWlsJyk7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSB0ZW1wbGF0ZS5jb250ZW50LmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChjb250ZW50KTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudERldGFpbF9yZXN0YXVyYW50LCByZXN0YXVyYW50LCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3RhdXJhbnREZXRhaWxfZGVsZXRlQnRuLCB0aGlzLnF1ZXJ5U2VsZWN0b3IoJyNkZWxldGUnKSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50RGV0YWlsX2Nsb3NlQnRuLCB0aGlzLnF1ZXJ5U2VsZWN0b3IoJyNjbG9zZScpLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3RhdXJhbnREZXRhaWxfY2F0ZWdvcnlJY29uLCBuZXcgQ2F0ZWdvcnlJY29uKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREZXRhaWxfcmVzdGF1cmFudCwgXCJmXCIpLmNhdGVnb3J5KSwgXCJmXCIpO1xuICAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5yZXN0YXVyYW50X19jYXRlZ29yeScpLmFwcGVuZENoaWxkKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREZXRhaWxfY2F0ZWdvcnlJY29uLCBcImZcIikpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50RGV0YWlsX2Jvb2ttYXJrQnRuLCBuZXcgQm9va21hcmtCdXR0b24oX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudERldGFpbF9yZXN0YXVyYW50LCBcImZcIikuaXNCb29rbWFyayksIFwiZlwiKTtcbiAgICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKCcucmVzdGF1cmFudF9faW5mbycpLmFwcGVuZENoaWxkKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREZXRhaWxfYm9va21hcmtCdG4sIFwiZlwiKSk7XG4gICAgfVxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50RGV0YWlsX2Jvb2ttYXJrQnRuLCBcImZcIikuYWRkRXZlbnRMaXN0ZW5lcihCT09LTUFSS19CVVRUT05fRVZFTlRTLmNsaWNrLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50RGV0YWlsX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50RGV0YWlsX29uVG9nZ2xlQm9va21hcmspLmJpbmQodGhpcykpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50RGV0YWlsX2RlbGV0ZUJ0biwgXCJmXCIpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudERldGFpbF9pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudERldGFpbF9vbkNsaWNrRGVsZXRlQnV0dG9uKS5iaW5kKHRoaXMpKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudERldGFpbF9jbG9zZUJ0biwgXCJmXCIpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudERldGFpbF9pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudERldGFpbF9vbkNsaWNrQ2xvc2VCdXR0b24pLmJpbmQodGhpcykpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50RGV0YWlsX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50RGV0YWlsX3JlbmRlcikuY2FsbCh0aGlzKTtcbiAgICB9XG59XG5fUmVzdGF1cmFudERldGFpbF9yZXN0YXVyYW50ID0gbmV3IFdlYWtNYXAoKSwgX1Jlc3RhdXJhbnREZXRhaWxfY2F0ZWdvcnlJY29uID0gbmV3IFdlYWtNYXAoKSwgX1Jlc3RhdXJhbnREZXRhaWxfYm9va21hcmtCdG4gPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudERldGFpbF9kZWxldGVCdG4gPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudERldGFpbF9jbG9zZUJ0biA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50RGV0YWlsX2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9SZXN0YXVyYW50RGV0YWlsX29uVG9nZ2xlQm9va21hcmsgPSBmdW5jdGlvbiBfUmVzdGF1cmFudERldGFpbF9vblRvZ2dsZUJvb2ttYXJrKGUpIHtcbiAgICBjb25zdCB7IGlzQm9va21hcmsgfSA9IGUuZGV0YWlsO1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREZXRhaWxfcmVzdGF1cmFudCwgXCJmXCIpLmlzQm9va21hcmsgPSBpc0Jvb2ttYXJrO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoUkVTVEFVUkFOVF9ERVRBSUxfRVZFTlRTLmlzQm9va21hcmtDaGFuZ2VkLCB7XG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGRldGFpbDogeyByZXN0YXVyYW50OiB7IC4uLl9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREZXRhaWxfcmVzdGF1cmFudCwgXCJmXCIpIH0gfSxcbiAgICB9KSk7XG59LCBfUmVzdGF1cmFudERldGFpbF9vbkNsaWNrRGVsZXRlQnV0dG9uID0gZnVuY3Rpb24gX1Jlc3RhdXJhbnREZXRhaWxfb25DbGlja0RlbGV0ZUJ1dHRvbigpIHtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFJFU1RBVVJBTlRfREVUQUlMX0VWRU5UUy5kZWxldGVJdGVtLCB7XG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgaWQ6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREZXRhaWxfcmVzdGF1cmFudCwgXCJmXCIpLmlkLFxuICAgICAgICB9LFxuICAgIH0pKTtcbn0sIF9SZXN0YXVyYW50RGV0YWlsX29uQ2xpY2tDbG9zZUJ1dHRvbiA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50RGV0YWlsX29uQ2xpY2tDbG9zZUJ1dHRvbigpIHtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFJFU1RBVVJBTlRfREVUQUlMX0VWRU5UUy5jbG9zZU1vZGFsLCB7XG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgfSkpO1xufSwgX1Jlc3RhdXJhbnREZXRhaWxfcmVuZGVyID0gZnVuY3Rpb24gX1Jlc3RhdXJhbnREZXRhaWxfcmVuZGVyKCkge1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREZXRhaWxfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnREZXRhaWxfc2V0TmFtZSkuY2FsbCh0aGlzKTtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50RGV0YWlsX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50RGV0YWlsX3NldERpc3RhbmNlKS5jYWxsKHRoaXMpO1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREZXRhaWxfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnREZXRhaWxfc2V0RGVzY3JpcHRpb24pLmNhbGwodGhpcyk7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudERldGFpbF9pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudERldGFpbF9zZXRMaW5rKS5jYWxsKHRoaXMpO1xufSwgX1Jlc3RhdXJhbnREZXRhaWxfc2V0TmFtZSA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50RGV0YWlsX3NldE5hbWUoKSB7XG4gICAgdGhpcy5xdWVyeVNlbGVjdG9yKCcucmVzdGF1cmFudF9fbmFtZScpLnRleHRDb250ZW50ID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudERldGFpbF9yZXN0YXVyYW50LCBcImZcIikubmFtZTtcbn0sIF9SZXN0YXVyYW50RGV0YWlsX3NldERpc3RhbmNlID0gZnVuY3Rpb24gX1Jlc3RhdXJhbnREZXRhaWxfc2V0RGlzdGFuY2UoKSB7XG4gICAgdGhpcy5xdWVyeVNlbGVjdG9yKCcucmVzdGF1cmFudF9fZGlzdGFuY2UnKS50ZXh0Q29udGVudCA9IGDsuqDtjbzsiqTroZzrtoDthLAgJHtfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50RGV0YWlsX3Jlc3RhdXJhbnQsIFwiZlwiKS5kaXN0YW5jZX3rtoQg64K0IGA7XG59LCBfUmVzdGF1cmFudERldGFpbF9zZXREZXNjcmlwdGlvbiA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50RGV0YWlsX3NldERlc2NyaXB0aW9uKCkge1xuICAgIGNvbnN0IHsgZGVzY3JpcHRpb24gfSA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREZXRhaWxfcmVzdGF1cmFudCwgXCJmXCIpO1xuICAgIGlmIChkZXNjcmlwdGlvbikge1xuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgIGRlc2NyaXB0aW9uRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdyZXN0YXVyYW50X19kZXNjcmlwdGlvbicpO1xuICAgICAgICBkZXNjcmlwdGlvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZCgndGV4dC1ib2R5Jyk7XG4gICAgICAgIGRlc2NyaXB0aW9uRWxlbWVudC50ZXh0Q29udGVudCA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREZXRhaWxfcmVzdGF1cmFudCwgXCJmXCIpLmRlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5yZXN0YXVyYW50X19pbmZvJykuYXBwZW5kQ2hpbGQoZGVzY3JpcHRpb25FbGVtZW50KTtcbiAgICB9XG59LCBfUmVzdGF1cmFudERldGFpbF9zZXRMaW5rID0gZnVuY3Rpb24gX1Jlc3RhdXJhbnREZXRhaWxfc2V0TGluaygpIHtcbiAgICBjb25zdCB7IGxpbmsgfSA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREZXRhaWxfcmVzdGF1cmFudCwgXCJmXCIpO1xuICAgIGlmIChsaW5rKSB7XG4gICAgICAgIGNvbnN0IGxpbmtFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICBsaW5rRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdyZXN0YXVyYW50X19saW5rJyk7XG4gICAgICAgIGxpbmtFbGVtZW50LnRleHRDb250ZW50ID0gbGluaztcbiAgICAgICAgbGlua0VsZW1lbnQuaHJlZiA9IGxpbms7XG4gICAgICAgIHRoaXMucXVlcnlTZWxlY3RvcignLnJlc3RhdXJhbnRfX2luZm8nKS5hcHBlbmRDaGlsZChsaW5rRWxlbWVudCk7XG4gICAgfVxufTtcbiIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfUmVzdGF1cmFudEl0ZW1faW5zdGFuY2VzLCBfUmVzdGF1cmFudEl0ZW1fcmVzdGF1cmFudCwgX1Jlc3RhdXJhbnRJdGVtX2NhdGVnb3J5SWNvbiwgX1Jlc3RhdXJhbnRJdGVtX2Jvb2ttYXJrQnRuLCBfUmVzdGF1cmFudEl0ZW1faGFuZGxlVG9nZ2xlQm9va21hcmtCdG4sIF9SZXN0YXVyYW50SXRlbV9oYW5kbGVCb2R5Q2xpY2ssIF9SZXN0YXVyYW50SXRlbV9yZW5kZXIsIF9SZXN0YXVyYW50SXRlbV9zZXROYW1lLCBfUmVzdGF1cmFudEl0ZW1fc2V0RGlzdGFuY2UsIF9SZXN0YXVyYW50SXRlbV9zZXREZXNjcmlwdGlvbjtcbmltcG9ydCAnLi9SZXN0YXVyYW50SXRlbS5jc3MnO1xuaW1wb3J0IENhdGVnb3J5SWNvbiBmcm9tICcuL0NhdGVnb3J5SWNvbi9DYXRlZ29yeUljb24nO1xuaW1wb3J0IEJvb2ttYXJrQnV0dG9uLCB7IEJPT0tNQVJLX0JVVFRPTl9FVkVOVFMgfSBmcm9tICcuL0Jvb2ttYXJrQnV0dG9uL0Jvb2ttYXJrQnV0dG9uJztcbmltcG9ydCBSZXN0YXVyYW50RGV0YWlsIGZyb20gJy4uL1Jlc3RhdXJhbnREZXRhaWwvUmVzdGF1cmFudERldGFpbCc7XG5leHBvcnQgY29uc3QgUkVTVEFVUkFOVF9JVEVNX0VWRU5UUyA9IHtcbiAgICBpc0Jvb2ttYXJrQ2hhbmdlZDogJ2lzQm9va21hcmtDaGFuZ2VkJyxcbn07XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXN0YXVyYW50SXRlbSBleHRlbmRzIEhUTUxMSUVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHJlc3RhdXJhbnQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRJdGVtX2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIF9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50LnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfUmVzdGF1cmFudEl0ZW1fY2F0ZWdvcnlJY29uLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfUmVzdGF1cmFudEl0ZW1fYm9va21hcmtCdG4uc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgncmVzdGF1cmFudCcpO1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0ZW1wbGF0ZS1yZXN0YXVyYW50LWl0ZW0nKTtcbiAgICAgICAgY29uc3QgY29udGVudCA9IHRlbXBsYXRlLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICB0aGlzLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50LCByZXN0YXVyYW50LCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX2NhdGVnb3J5SWNvbiwgbmV3IENhdGVnb3J5SWNvbihfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50LCBcImZcIikuY2F0ZWdvcnkpLCBcImZcIik7XG4gICAgICAgIHRoaXMucXVlcnlTZWxlY3RvcignLnJlc3RhdXJhbnRfX2NhdGVnb3J5JykuYXBwZW5kQ2hpbGQoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fY2F0ZWdvcnlJY29uLCBcImZcIikpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9ib29rbWFya0J0biwgbmV3IEJvb2ttYXJrQnV0dG9uKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX3Jlc3RhdXJhbnQsIFwiZlwiKS5pc0Jvb2ttYXJrKSwgXCJmXCIpO1xuICAgICAgICB0aGlzLmFwcGVuZENoaWxkKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX2Jvb2ttYXJrQnRuLCBcImZcIikpO1xuICAgIH1cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fYm9va21hcmtCdG4sIFwiZlwiKS5hZGRFdmVudExpc3RlbmVyKEJPT0tNQVJLX0JVVFRPTl9FVkVOVFMuY2xpY2ssIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50SXRlbV9oYW5kbGVUb2dnbGVCb29rbWFya0J0bikuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMucXVlcnlTZWxlY3RvcignLnJlc3RhdXJhbnRfX2luZm8nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50SXRlbV9oYW5kbGVCb2R5Q2xpY2spLmJpbmQodGhpcykpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudEl0ZW1fcmVuZGVyKS5jYWxsKHRoaXMpO1xuICAgIH1cbn1cbl9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50ID0gbmV3IFdlYWtNYXAoKSwgX1Jlc3RhdXJhbnRJdGVtX2NhdGVnb3J5SWNvbiA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50SXRlbV9ib29rbWFya0J0biA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50SXRlbV9pbnN0YW5jZXMgPSBuZXcgV2Vha1NldCgpLCBfUmVzdGF1cmFudEl0ZW1faGFuZGxlVG9nZ2xlQm9va21hcmtCdG4gPSBmdW5jdGlvbiBfUmVzdGF1cmFudEl0ZW1faGFuZGxlVG9nZ2xlQm9va21hcmtCdG4oZSkge1xuICAgIGNvbnN0IHsgaXNCb29rbWFyayB9ID0gZS5kZXRhaWw7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fcmVzdGF1cmFudCwgXCJmXCIpLmlzQm9va21hcmsgPSBpc0Jvb2ttYXJrO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoUkVTVEFVUkFOVF9JVEVNX0VWRU5UUy5pc0Jvb2ttYXJrQ2hhbmdlZCwge1xuICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICBkZXRhaWw6IHsgcmVzdGF1cmFudDogeyAuLi5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50LCBcImZcIikgfSB9LFxuICAgIH0pKTtcbn0sIF9SZXN0YXVyYW50SXRlbV9oYW5kbGVCb2R5Q2xpY2sgPSBmdW5jdGlvbiBfUmVzdGF1cmFudEl0ZW1faGFuZGxlQm9keUNsaWNrKCkge1xuICAgIGNvbnN0IHJlc3RhdXJhbnREZXRhaWwgPSBuZXcgUmVzdGF1cmFudERldGFpbCh7IC4uLl9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX3Jlc3RhdXJhbnQsIFwiZlwiKSB9KTtcbiAgICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2FwcC1tb2RhbCcpO1xuICAgIG1vZGFsLm9wZW5Nb2RhbCh7IGJvZHk6IHJlc3RhdXJhbnREZXRhaWwgfSk7XG59LCBfUmVzdGF1cmFudEl0ZW1fcmVuZGVyID0gZnVuY3Rpb24gX1Jlc3RhdXJhbnRJdGVtX3JlbmRlcigpIHtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudEl0ZW1fc2V0TmFtZSkuY2FsbCh0aGlzKTtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudEl0ZW1fc2V0RGlzdGFuY2UpLmNhbGwodGhpcyk7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1faW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRJdGVtX3NldERlc2NyaXB0aW9uKS5jYWxsKHRoaXMpO1xufSwgX1Jlc3RhdXJhbnRJdGVtX3NldE5hbWUgPSBmdW5jdGlvbiBfUmVzdGF1cmFudEl0ZW1fc2V0TmFtZSgpIHtcbiAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5yZXN0YXVyYW50X19uYW1lJykudGV4dENvbnRlbnQgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50LCBcImZcIikubmFtZTtcbn0sIF9SZXN0YXVyYW50SXRlbV9zZXREaXN0YW5jZSA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50SXRlbV9zZXREaXN0YW5jZSgpIHtcbiAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5yZXN0YXVyYW50X19kaXN0YW5jZScpLnRleHRDb250ZW50ID0gYOy6oO2NvOyKpOuhnOu2gO2EsCAke19fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX3Jlc3RhdXJhbnQsIFwiZlwiKS5kaXN0YW5jZX3rtoQg64K0IGA7XG59LCBfUmVzdGF1cmFudEl0ZW1fc2V0RGVzY3JpcHRpb24gPSBmdW5jdGlvbiBfUmVzdGF1cmFudEl0ZW1fc2V0RGVzY3JpcHRpb24oKSB7XG4gICAgdGhpcy5xdWVyeVNlbGVjdG9yKCcucmVzdGF1cmFudF9fZGVzY3JpcHRpb24nKS50ZXh0Q29udGVudCA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX3Jlc3RhdXJhbnQsIFwiZlwiKS5kZXNjcmlwdGlvbjtcbn07XG4iLCJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX0FwcF9pbnN0YW5jZXMsIF9BcHBfcmVzdGF1cmFudEZpbHRlcnMsIF9BcHBfYm9va21hcmtUYWIsIF9BcHBfcmVzdGF1cmFudExpc3QsIF9BcHBfcmVzdGF1cmFudE1hbmdlciwgX0FwcF9sb2FkRGF0YUZyb21Mb2NhbFN0b3JhZ2UsIF9BcHBfdXBkYXRlRGF0YVRvTG9jYWxTdG9yYWdlLCBfQXBwX3VwZGF0ZVJlc3RhdXJhbnRMaXN0LCBfQXBwX2FkZEV2ZW50TGlzdGVuZXJzLCBfQXBwX2FkZFJlc3RhdXJhbnRTdWJtaXRFdmVudExpc3RlbmVyLCBfQXBwX2FkZEZpbHRlck9uY2hhbmdlRXZlbnRMaXN0ZW5lciwgX0FwcF9hZGRCb29rbWFya1RhYk9uQ2hhbmdlRXZlbnRMaXN0ZW5lciwgX0FwcF9hZGRCb29rbWFya09uY2hhbmdlRXZlbnRMaXN0ZW5lciwgX0FwcF9hZGREZWxldGVSZXN0YXVyYW50SXRlbUV2ZW50TGlzdGVuZXI7XG5pbXBvcnQgJy4vQXBwLmNzcyc7XG5pbXBvcnQgUmVzdGF1cmFudE1hbmFnZXIgZnJvbSAnLi4vZG9tYWluL1Jlc3RhdXJhbnRNYW5hZ2VyJztcbmltcG9ydCB7IFJFU1RBVVJBTlRfRk9STV9FVkVOVFMgfSBmcm9tICcuL1Jlc3RhdXJhbnRGb3JtL1Jlc3RhdXJhbnRGb3JtJztcbmltcG9ydCB7IFJFU1RBVVJBTlRfRklMVEVSU19FVkVOVFMgfSBmcm9tICcuL1Jlc3RhdXJhbnRGaWx0ZXJzL1Jlc3RhdXJhbnRGaWx0ZXJzJztcbmltcG9ydCB7IEJPT0tNQVJLX1RBQl9FVkVOVFMgfSBmcm9tICcuL0Jvb2ttYXJrVGFiL0Jvb2ttYXJrVGFiJztcbmltcG9ydCB7IFJFU1RBVVJBTlRfSVRFTV9FVkVOVFMgfSBmcm9tICcuL1Jlc3RhdXJhbnRJdGVtL1Jlc3RhdXJhbnRJdGVtJztcbmltcG9ydCB7IFJFU1RBVVJBTlRfREVUQUlMX0VWRU5UUyB9IGZyb20gJy4vUmVzdGF1cmFudERldGFpbC9SZXN0YXVyYW50RGV0YWlsJztcbmltcG9ydCB7IGxvYWRGcm9tTG9jYWxTdG9yYWdlLCB1cGRhdGVUb0xvY2FsU3RvcmFnZSB9IGZyb20gJy4uL3V0aWxzL2xvY2FsU3RvcmFnZSc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcHAge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBfQXBwX2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIF9BcHBfcmVzdGF1cmFudEZpbHRlcnMuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9BcHBfYm9va21hcmtUYWIuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9BcHBfcmVzdGF1cmFudExpc3Quc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9BcHBfcmVzdGF1cmFudE1hbmdlci5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQXBwX3Jlc3RhdXJhbnRGaWx0ZXJzLCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdhcHAtcmVzdGF1cmFudC1maWx0ZXJzJyksIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQXBwX2Jvb2ttYXJrVGFiLCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdhcHAtYm9va21hcmstdGFiJyksIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQXBwX3Jlc3RhdXJhbnRMaXN0LCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcmVzdGF1cmFudC1saXN0JyksIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQXBwX3Jlc3RhdXJhbnRNYW5nZXIsIG5ldyBSZXN0YXVyYW50TWFuYWdlcigpLCBcImZcIik7XG4gICAgfVxuICAgIGFzeW5jIHN0YXJ0KCkge1xuICAgICAgICBjb25zdCB7IGNhdGVnb3J5LCBzb3J0IH0gPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfcmVzdGF1cmFudEZpbHRlcnMsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX2luc3RhbmNlcywgXCJtXCIsIF9BcHBfbG9hZERhdGFGcm9tTG9jYWxTdG9yYWdlKS5jYWxsKHRoaXMpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfaW5zdGFuY2VzLCBcIm1cIiwgX0FwcF91cGRhdGVSZXN0YXVyYW50TGlzdCkuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICBjYXRlZ29yeSxcbiAgICAgICAgICAgIHNvcnQsXG4gICAgICAgIH0pO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfaW5zdGFuY2VzLCBcIm1cIiwgX0FwcF9hZGRFdmVudExpc3RlbmVycykuY2FsbCh0aGlzKTtcbiAgICB9XG59XG5fQXBwX3Jlc3RhdXJhbnRGaWx0ZXJzID0gbmV3IFdlYWtNYXAoKSwgX0FwcF9ib29rbWFya1RhYiA9IG5ldyBXZWFrTWFwKCksIF9BcHBfcmVzdGF1cmFudExpc3QgPSBuZXcgV2Vha01hcCgpLCBfQXBwX3Jlc3RhdXJhbnRNYW5nZXIgPSBuZXcgV2Vha01hcCgpLCBfQXBwX2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9BcHBfbG9hZERhdGFGcm9tTG9jYWxTdG9yYWdlID0gZnVuY3Rpb24gX0FwcF9sb2FkRGF0YUZyb21Mb2NhbFN0b3JhZ2UoKSB7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX3Jlc3RhdXJhbnRNYW5nZXIsIFwiZlwiKS5yZXN0YXVyYW50cyA9IGxvYWRGcm9tTG9jYWxTdG9yYWdlKCdyZXN0YXVyYW50cycpO1xufSwgX0FwcF91cGRhdGVEYXRhVG9Mb2NhbFN0b3JhZ2UgPSBmdW5jdGlvbiBfQXBwX3VwZGF0ZURhdGFUb0xvY2FsU3RvcmFnZSgpIHtcbiAgICB1cGRhdGVUb0xvY2FsU3RvcmFnZSgncmVzdGF1cmFudHMnLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfcmVzdGF1cmFudE1hbmdlciwgXCJmXCIpLnJlc3RhdXJhbnRzKTtcbn0sIF9BcHBfdXBkYXRlUmVzdGF1cmFudExpc3QgPSBmdW5jdGlvbiBfQXBwX3VwZGF0ZVJlc3RhdXJhbnRMaXN0KHsgY2F0ZWdvcnksIHNvcnQgfSwgaXNCb29rbWFyaykge1xuICAgIGNvbnN0IHJlc3VsdCA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FwcF9yZXN0YXVyYW50TWFuZ2VyLCBcImZcIikuZ2V0RmlsdGVyZWRMaXN0KHsgY2F0ZWdvcnksIHNvcnQgfSwgaXNCb29rbWFyayk7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX3Jlc3RhdXJhbnRMaXN0LCBcImZcIikucmVzdGF1cmFudHMgPSByZXN1bHQ7XG59LCBfQXBwX2FkZEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gX0FwcF9hZGRFdmVudExpc3RlbmVycygpIHtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfaW5zdGFuY2VzLCBcIm1cIiwgX0FwcF9hZGRSZXN0YXVyYW50U3VibWl0RXZlbnRMaXN0ZW5lcikuY2FsbCh0aGlzKTtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfaW5zdGFuY2VzLCBcIm1cIiwgX0FwcF9hZGRGaWx0ZXJPbmNoYW5nZUV2ZW50TGlzdGVuZXIpLmNhbGwodGhpcyk7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX2luc3RhbmNlcywgXCJtXCIsIF9BcHBfYWRkQm9va21hcmtUYWJPbkNoYW5nZUV2ZW50TGlzdGVuZXIpLmNhbGwodGhpcyk7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX2luc3RhbmNlcywgXCJtXCIsIF9BcHBfYWRkQm9va21hcmtPbmNoYW5nZUV2ZW50TGlzdGVuZXIpLmNhbGwodGhpcyk7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX2luc3RhbmNlcywgXCJtXCIsIF9BcHBfYWRkRGVsZXRlUmVzdGF1cmFudEl0ZW1FdmVudExpc3RlbmVyKS5jYWxsKHRoaXMpO1xufSwgX0FwcF9hZGRSZXN0YXVyYW50U3VibWl0RXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIF9BcHBfYWRkUmVzdGF1cmFudFN1Ym1pdEV2ZW50TGlzdGVuZXIoKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihSRVNUQVVSQU5UX0ZPUk1fRVZFTlRTLnN1Ym1pdCwgKGUpID0+IHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX3Jlc3RhdXJhbnRNYW5nZXIsIFwiZlwiKS5hZGQoZS5kZXRhaWwuZm9ybURhdGEpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfaW5zdGFuY2VzLCBcIm1cIiwgX0FwcF91cGRhdGVEYXRhVG9Mb2NhbFN0b3JhZ2UpLmNhbGwodGhpcyk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FwcF9yZXN0YXVyYW50RmlsdGVycywgXCJmXCIpLmNhdGVnb3J5ID0gZS5kZXRhaWwuZm9ybURhdGEuY2F0ZWdvcnk7XG4gICAgICAgIGNvbnN0IHsgY2F0ZWdvcnksIHNvcnQgfSA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FwcF9yZXN0YXVyYW50RmlsdGVycywgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfaW5zdGFuY2VzLCBcIm1cIiwgX0FwcF91cGRhdGVSZXN0YXVyYW50TGlzdCkuY2FsbCh0aGlzLCB7IGNhdGVnb3J5LCBzb3J0IH0sIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FwcF9ib29rbWFya1RhYiwgXCJmXCIpLmlzQm9va21hcmspO1xuICAgIH0pO1xufSwgX0FwcF9hZGRGaWx0ZXJPbmNoYW5nZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiBfQXBwX2FkZEZpbHRlck9uY2hhbmdlRXZlbnRMaXN0ZW5lcigpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFJFU1RBVVJBTlRfRklMVEVSU19FVkVOVFMuZmlsdGVyQ2hhbmdlLCAoZSkgPT4ge1xuICAgICAgICBjb25zdCB7IGNhdGVnb3J5LCBzb3J0IH0gPSBlLmRldGFpbDtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX2luc3RhbmNlcywgXCJtXCIsIF9BcHBfdXBkYXRlUmVzdGF1cmFudExpc3QpLmNhbGwodGhpcywgeyBjYXRlZ29yeSwgc29ydCB9LCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfYm9va21hcmtUYWIsIFwiZlwiKS5pc0Jvb2ttYXJrKTtcbiAgICB9KTtcbn0sIF9BcHBfYWRkQm9va21hcmtUYWJPbkNoYW5nZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiBfQXBwX2FkZEJvb2ttYXJrVGFiT25DaGFuZ2VFdmVudExpc3RlbmVyKCkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoQk9PS01BUktfVEFCX0VWRU5UUy5jaGFuZ2VUYWIsICgpID0+IHtcbiAgICAgICAgY29uc3QgeyBjYXRlZ29yeSwgc29ydCB9ID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX3Jlc3RhdXJhbnRGaWx0ZXJzLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FwcF9pbnN0YW5jZXMsIFwibVwiLCBfQXBwX3VwZGF0ZVJlc3RhdXJhbnRMaXN0KS5jYWxsKHRoaXMsIHsgY2F0ZWdvcnksIHNvcnQgfSwgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX2Jvb2ttYXJrVGFiLCBcImZcIikuaXNCb29rbWFyayk7XG4gICAgfSk7XG59LCBfQXBwX2FkZEJvb2ttYXJrT25jaGFuZ2VFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gX0FwcF9hZGRCb29rbWFya09uY2hhbmdlRXZlbnRMaXN0ZW5lcigpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFJFU1RBVVJBTlRfSVRFTV9FVkVOVFMuaXNCb29rbWFya0NoYW5nZWQsIChlKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgcmVzdGF1cmFudCB9ID0gZS5kZXRhaWw7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FwcF9yZXN0YXVyYW50TWFuZ2VyLCBcImZcIikudXBkYXRlKHJlc3RhdXJhbnQpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfaW5zdGFuY2VzLCBcIm1cIiwgX0FwcF91cGRhdGVEYXRhVG9Mb2NhbFN0b3JhZ2UpLmNhbGwodGhpcyk7XG4gICAgfSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihSRVNUQVVSQU5UX0RFVEFJTF9FVkVOVFMuaXNCb29rbWFya0NoYW5nZWQsIChlKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgcmVzdGF1cmFudCB9ID0gZS5kZXRhaWw7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FwcF9yZXN0YXVyYW50TWFuZ2VyLCBcImZcIikudXBkYXRlKHJlc3RhdXJhbnQpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfaW5zdGFuY2VzLCBcIm1cIiwgX0FwcF91cGRhdGVEYXRhVG9Mb2NhbFN0b3JhZ2UpLmNhbGwodGhpcyk7XG4gICAgICAgIGNvbnN0IHsgY2F0ZWdvcnksIHNvcnQgfSA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FwcF9yZXN0YXVyYW50RmlsdGVycywgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfaW5zdGFuY2VzLCBcIm1cIiwgX0FwcF91cGRhdGVSZXN0YXVyYW50TGlzdCkuY2FsbCh0aGlzLCB7IGNhdGVnb3J5LCBzb3J0IH0sIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FwcF9ib29rbWFya1RhYiwgXCJmXCIpLmlzQm9va21hcmspO1xuICAgIH0pO1xufSwgX0FwcF9hZGREZWxldGVSZXN0YXVyYW50SXRlbUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiBfQXBwX2FkZERlbGV0ZVJlc3RhdXJhbnRJdGVtRXZlbnRMaXN0ZW5lcigpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFJFU1RBVVJBTlRfREVUQUlMX0VWRU5UUy5kZWxldGVJdGVtLCAoZSkgPT4ge1xuICAgICAgICBjb25zdCB7IGlkIH0gPSBlLmRldGFpbDtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX3Jlc3RhdXJhbnRNYW5nZXIsIFwiZlwiKS5kZWxldGUoaWQpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfaW5zdGFuY2VzLCBcIm1cIiwgX0FwcF91cGRhdGVEYXRhVG9Mb2NhbFN0b3JhZ2UpLmNhbGwodGhpcyk7XG4gICAgICAgIGNvbnN0IHsgY2F0ZWdvcnksIHNvcnQgfSA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FwcF9yZXN0YXVyYW50RmlsdGVycywgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfaW5zdGFuY2VzLCBcIm1cIiwgX0FwcF91cGRhdGVSZXN0YXVyYW50TGlzdCkuY2FsbCh0aGlzLCB7IGNhdGVnb3J5LCBzb3J0IH0sIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FwcF9ib29rbWFya1RhYiwgXCJmXCIpLmlzQm9va21hcmspO1xuICAgIH0pO1xufTtcbiIsImV4cG9ydCBjb25zdCBsb2FkRnJvbUxvY2FsU3RvcmFnZSA9IChrZXkpID0+IHtcbiAgICBjb25zdCBpdGVtID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgaWYgKGl0ZW0pXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGl0ZW0pO1xufTtcbmV4cG9ydCBjb25zdCB1cGRhdGVUb0xvY2FsU3RvcmFnZSA9IChrZXksIHZhbHVlKSA9PiB7XG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbn07XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vR05CLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vR05CLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhZGQtYnV0dG9uLnBuZ1wiOyIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9HTkJfaW5zdGFuY2VzLCBfR05CX2NyZWF0ZVJlc3RhdXJhbnRGb3JtVGl0bGUsIF9HTkJfY3JlYXRlUmVzdGF1cmFudEZvcm07XG5pbXBvcnQgJy4vR05CLmNzcyc7XG5pbXBvcnQgJy4uLy4uL3N0YXRpY3MvaW1ncy9hZGQtYnV0dG9uLnBuZyc7XG5pbXBvcnQgUmVzdGF1cmFudEZvcm0gZnJvbSAnLi4vUmVzdGF1cmFudEZvcm0vUmVzdGF1cmFudEZvcm0nO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR05CIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBfR05CX2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RlbXBsYXRlLWhlYWRlcicpO1xuICAgICAgICBjb25zdCBjb250ZW50ID0gdGVtcGxhdGUuY29udGVudC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoY29udGVudCk7XG4gICAgfVxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICBjb25zdCBidXR0b24gPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5nbmJfX2J1dHRvbicpO1xuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2FwcC1tb2RhbCcpO1xuICAgICAgICAgICAgY29uc3QgdGl0bGUgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9HTkJfaW5zdGFuY2VzLCBcIm1cIiwgX0dOQl9jcmVhdGVSZXN0YXVyYW50Rm9ybVRpdGxlKS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0dOQl9pbnN0YW5jZXMsIFwibVwiLCBfR05CX2NyZWF0ZVJlc3RhdXJhbnRGb3JtKS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgbW9kYWwub3Blbk1vZGFsKHsgdGl0bGUsIGJvZHkgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbl9HTkJfaW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX0dOQl9jcmVhdGVSZXN0YXVyYW50Rm9ybVRpdGxlID0gZnVuY3Rpb24gX0dOQl9jcmVhdGVSZXN0YXVyYW50Rm9ybVRpdGxlKCkge1xuICAgIGNvbnN0IHJlc3RhdXJhbnRGb3JtVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xuICAgIHJlc3RhdXJhbnRGb3JtVGl0bGUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdtb2RhbC10aXRsZSB0ZXh0LXRpdGxlJyk7XG4gICAgcmVzdGF1cmFudEZvcm1UaXRsZS50ZXh0Q29udGVudCA9ICfsg4jroZzsmrQg7J2M7Iud7KCQJztcbiAgICByZXR1cm4gcmVzdGF1cmFudEZvcm1UaXRsZTtcbn0sIF9HTkJfY3JlYXRlUmVzdGF1cmFudEZvcm0gPSBmdW5jdGlvbiBfR05CX2NyZWF0ZVJlc3RhdXJhbnRGb3JtKCkge1xuICAgIGNvbnN0IHJlc3RhdXJhbnRGb3JtID0gbmV3IFJlc3RhdXJhbnRGb3JtKCk7XG4gICAgcmVzdGF1cmFudEZvcm0uc2V0QXR0cmlidXRlKCdpcycsICdhcHAtcmVzdGF1cmFudC1mb3JtJyk7XG4gICAgcmVzdGF1cmFudEZvcm0uc2V0QXR0cmlidXRlKCdpZCcsICdyZXN0YXVyYW50LWZvcm0nKTtcbiAgICByZXR1cm4gcmVzdGF1cmFudEZvcm07XG59O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL01vZGFsLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTW9kYWwuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9Nb2RhbF9pbnN0YW5jZXMsIF9Nb2RhbF9iYWNrZHJvcCwgX01vZGFsX2NvbnRhaW5lciwgX01vZGFsX2Nsb3NlTW9kYWw7XG5pbXBvcnQgJy4vTW9kYWwuY3NzJztcbmltcG9ydCB7IFJFU1RBVVJBTlRfREVUQUlMX0VWRU5UUyB9IGZyb20gJy4uL1Jlc3RhdXJhbnREZXRhaWwvUmVzdGF1cmFudERldGFpbCc7XG5pbXBvcnQgeyBSRVNUQVVSQU5UX0ZPUk1fRVZFTlRTIH0gZnJvbSAnLi4vUmVzdGF1cmFudEZvcm0vUmVzdGF1cmFudEZvcm0nO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9kYWwgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIF9Nb2RhbF9pbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICBfTW9kYWxfYmFja2Ryb3Auc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9Nb2RhbF9jb250YWluZXIuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RlbXBsYXRlLW1vZGFsJyk7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSB0ZW1wbGF0ZS5jb250ZW50LmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChjb250ZW50KTtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdtb2RhbCcpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9Nb2RhbF9iYWNrZHJvcCwgdGhpcy5xdWVyeVNlbGVjdG9yKCcubW9kYWwtYmFja2Ryb3AnKSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9Nb2RhbF9jb250YWluZXIsIHRoaXMucXVlcnlTZWxlY3RvcignLm1vZGFsLWNvbnRhaW5lcicpLCBcImZcIik7XG4gICAgfVxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoUkVTVEFVUkFOVF9GT1JNX0VWRU5UUy5zdWJtaXQsIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01vZGFsX2luc3RhbmNlcywgXCJtXCIsIF9Nb2RhbF9jbG9zZU1vZGFsKS5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFJFU1RBVVJBTlRfRk9STV9FVkVOVFMucmVzZXQsIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01vZGFsX2luc3RhbmNlcywgXCJtXCIsIF9Nb2RhbF9jbG9zZU1vZGFsKS5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFJFU1RBVVJBTlRfREVUQUlMX0VWRU5UUy5kZWxldGVJdGVtLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Nb2RhbF9pbnN0YW5jZXMsIFwibVwiLCBfTW9kYWxfY2xvc2VNb2RhbCkuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihSRVNUQVVSQU5UX0RFVEFJTF9FVkVOVFMuY2xvc2VNb2RhbCwgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTW9kYWxfaW5zdGFuY2VzLCBcIm1cIiwgX01vZGFsX2Nsb3NlTW9kYWwpLmJpbmQodGhpcykpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Nb2RhbF9iYWNrZHJvcCwgXCJmXCIpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTW9kYWxfaW5zdGFuY2VzLCBcIm1cIiwgX01vZGFsX2Nsb3NlTW9kYWwpLmJpbmQodGhpcykpO1xuICAgIH1cbiAgICBvcGVuTW9kYWwoeyB0aXRsZSwgYm9keSB9KSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01vZGFsX2NvbnRhaW5lciwgXCJmXCIpLmlubmVySFRNTCA9ICcnO1xuICAgICAgICBpZiAodGl0bGUpXG4gICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Nb2RhbF9jb250YWluZXIsIFwiZlwiKS5hcHBlbmRDaGlsZCh0aXRsZSk7XG4gICAgICAgIGlmIChib2R5KVxuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTW9kYWxfY29udGFpbmVyLCBcImZcIikuYXBwZW5kQ2hpbGQoYm9keSk7XG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnbW9kYWwtLW9wZW4nKTtcbiAgICB9XG59XG5fTW9kYWxfYmFja2Ryb3AgPSBuZXcgV2Vha01hcCgpLCBfTW9kYWxfY29udGFpbmVyID0gbmV3IFdlYWtNYXAoKSwgX01vZGFsX2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9Nb2RhbF9jbG9zZU1vZGFsID0gZnVuY3Rpb24gX01vZGFsX2Nsb3NlTW9kYWwoKSB7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTW9kYWxfY29udGFpbmVyLCBcImZcIikuaW5uZXJIVE1MID0gJyc7XG4gICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKCdtb2RhbC0tb3BlbicpO1xufTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SZXN0YXVyYW50TGlzdC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Jlc3RhdXJhbnRMaXN0LmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfUmVzdGF1cmFudExpc3RfaW5zdGFuY2VzLCBfUmVzdGF1cmFudExpc3RfcmVzdGF1cmFudHMsIF9SZXN0YXVyYW50TGlzdF91cGRhdGVMaXN0O1xuaW1wb3J0ICcuL1Jlc3RhdXJhbnRMaXN0LmNzcyc7XG5pbXBvcnQgUmVzdGF1cmFudEl0ZW0gZnJvbSAnLi4vUmVzdGF1cmFudEl0ZW0vUmVzdGF1cmFudEl0ZW0nO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzdGF1cmFudExpc3QgZXh0ZW5kcyBIVE1MVUxpc3RFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRMaXN0X2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIF9SZXN0YXVyYW50TGlzdF9yZXN0YXVyYW50cy5zZXQodGhpcywgW10pO1xuICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ3Jlc3RhdXJhbnQtbGlzdCcpO1xuICAgIH1cbiAgICBnZXQgcmVzdGF1cmFudHMoKSB7XG4gICAgICAgIHJldHVybiBbLi4uX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudExpc3RfcmVzdGF1cmFudHMsIFwiZlwiKV07XG4gICAgfVxuICAgIHNldCByZXN0YXVyYW50cyhyZXN0YXVyYW50cykge1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50TGlzdF9yZXN0YXVyYW50cywgcmVzdGF1cmFudHMgPyBbLi4ucmVzdGF1cmFudHNdIDogW10sIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudExpc3RfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRMaXN0X3VwZGF0ZUxpc3QpLmNhbGwodGhpcyk7XG4gICAgfVxufVxuX1Jlc3RhdXJhbnRMaXN0X3Jlc3RhdXJhbnRzID0gbmV3IFdlYWtNYXAoKSwgX1Jlc3RhdXJhbnRMaXN0X2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9SZXN0YXVyYW50TGlzdF91cGRhdGVMaXN0ID0gZnVuY3Rpb24gX1Jlc3RhdXJhbnRMaXN0X3VwZGF0ZUxpc3QoKSB7XG4gICAgdGhpcy5pbm5lckhUTUwgPSAnJztcbiAgICBjb25zdCBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICB0aGlzLnJlc3RhdXJhbnRzLmZvckVhY2goKHJlc3RhdXJhbnQpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdGF1cmFudEl0ZW0gPSBuZXcgUmVzdGF1cmFudEl0ZW0ocmVzdGF1cmFudCk7XG4gICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKHJlc3RhdXJhbnRJdGVtKTtcbiAgICB9KTtcbiAgICB0aGlzLmFwcGVuZENoaWxkKGZyYWdtZW50KTtcbn07XG4iLCJpbXBvcnQgJy4vY29tcG9uZW50cy9nbG9iYWwuY3NzJztcbmltcG9ydCBBcHAgZnJvbSAnLi9jb21wb25lbnRzL0FwcCc7XG5pbXBvcnQgR05CIGZyb20gJy4vY29tcG9uZW50cy9HTkIvR05CJztcbmltcG9ydCBNb2RhbCBmcm9tICcuL2NvbXBvbmVudHMvTW9kYWwvTW9kYWwnO1xuaW1wb3J0IFNlbGVjdCBmcm9tICcuL2NvbXBvbmVudHMvU2VsZWN0L1NlbGVjdCc7XG5pbXBvcnQgUmVzdGF1cmFudEZvcm0gZnJvbSAnLi9jb21wb25lbnRzL1Jlc3RhdXJhbnRGb3JtL1Jlc3RhdXJhbnRGb3JtJztcbmltcG9ydCBSZXN0YXVyYW50TGlzdCBmcm9tICcuL2NvbXBvbmVudHMvUmVzdGF1cmFudExpc3QvUmVzdGF1cmFudExpc3QnO1xuaW1wb3J0IFJlc3RhdXJhbnRJdGVtIGZyb20gJy4vY29tcG9uZW50cy9SZXN0YXVyYW50SXRlbS9SZXN0YXVyYW50SXRlbSc7XG5pbXBvcnQgUmVzdGF1cmFudEZpbHRlcnMgZnJvbSAnLi9jb21wb25lbnRzL1Jlc3RhdXJhbnRGaWx0ZXJzL1Jlc3RhdXJhbnRGaWx0ZXJzJztcbmltcG9ydCBCb29rbWFya1RhYiBmcm9tICcuL2NvbXBvbmVudHMvQm9va21hcmtUYWIvQm9va21hcmtUYWInO1xuaW1wb3J0IENhdGVnb3J5SWNvbiBmcm9tICcuL2NvbXBvbmVudHMvUmVzdGF1cmFudEl0ZW0vQ2F0ZWdvcnlJY29uL0NhdGVnb3J5SWNvbic7XG5pbXBvcnQgQm9va21hcmtCdXR0b24gZnJvbSAnLi9jb21wb25lbnRzL1Jlc3RhdXJhbnRJdGVtL0Jvb2ttYXJrQnV0dG9uL0Jvb2ttYXJrQnV0dG9uJztcbmltcG9ydCBSZXN0YXVyYW50RGV0YWlsIGZyb20gJy4vY29tcG9uZW50cy9SZXN0YXVyYW50RGV0YWlsL1Jlc3RhdXJhbnREZXRhaWwnO1xud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnYXBwLWduYicsIEdOQik7XG53aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdhcHAtbW9kYWwnLCBNb2RhbCk7XG53aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdhcHAtc2VsZWN0JywgU2VsZWN0LCB7IGV4dGVuZHM6ICdzZWxlY3QnIH0pO1xud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnYXBwLXJlc3RhdXJhbnQtZm9ybScsIFJlc3RhdXJhbnRGb3JtLCB7IGV4dGVuZHM6ICdmb3JtJyB9KTtcbndpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ2FwcC1yZXN0YXVyYW50LWxpc3QnLCBSZXN0YXVyYW50TGlzdCwgeyBleHRlbmRzOiAndWwnIH0pO1xud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnYXBwLXJlc3RhdXJhbnQtaXRlbScsIFJlc3RhdXJhbnRJdGVtLCB7IGV4dGVuZHM6ICdsaScgfSk7XG53aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdhcHAtY2F0ZWdvcnktaW1hZ2UnLCBDYXRlZ29yeUljb24sIHsgZXh0ZW5kczogJ2ltZycgfSk7XG53aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdhcHAtYm9va21hcmstYnV0dG9uJywgQm9va21hcmtCdXR0b24sIHsgZXh0ZW5kczogJ2J1dHRvbicgfSk7XG53aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdhcHAtcmVzdGF1cmFudC1kZXRhaWwnLCBSZXN0YXVyYW50RGV0YWlsKTtcbndpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ2FwcC1yZXN0YXVyYW50LWZpbHRlcnMnLCBSZXN0YXVyYW50RmlsdGVycyk7XG53aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdhcHAtYm9va21hcmstdGFiJywgQm9va21hcmtUYWIpO1xuY29uc3QgYXBwID0gbmV3IEFwcCgpO1xuYXBwLnN0YXJ0KCk7XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicmVwbGFjZSIsInAiLCJuYyIsIl9SZXN0YXVyYW50TWFuYWdlcl9yZXN0YXVyYW50cyIsIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCJyZWNlaXZlciIsInN0YXRlIiwidmFsdWUiLCJraW5kIiwiZiIsIlR5cGVFcnJvciIsImhhcyIsInNldCIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJSZXN0YXVyYW50TWFuYWdlciIsImNvbnN0cnVjdG9yIiwicmVzdGF1cmFudHMiLCJhZGQiLCJyZXN0YXVyYW50IiwiRGF0ZSIsIm5vdyIsImlzQm9va21hcmsiLCJkZWxldGUiLCJmaWx0ZXIiLCJ1cGRhdGVkUmVzdGF1cmFudCIsImZpbmRJbmRleCIsImdldEZpbHRlcmVkTGlzdCIsImZpbHRlckJ5Qm9va21hcmsiLCJmaWx0ZXJlZFJlc3RhdXJhbnRzIiwiY2F0ZWdvcnkiLCJmaWx0ZXJCeUNhdGVnb3J5Iiwic29ydCIsImIiLCJuYW1lIiwibG9jYWxlQ29tcGFyZSIsImRpc3RhbmNlIiwic29ydEJ5T3B0aW9uIiwiV2Vha01hcCIsIl9SZXN0YXVyYW50Rm9ybV9pbnN0YW5jZXMiLCJfUmVzdGF1cmFudEZvcm1fbGlua0lucHV0IiwiX1Jlc3RhdXJhbnRGb3JtX2hhbmRsZVN1Ym1pdCIsIl9SZXN0YXVyYW50Rm9ybV9oYW5kbGVSZXNldCIsIl9SZXN0YXVyYW50Rm9ybV9jaGVja0xpbmtJbnB1dFZhaWxkaXR5IiwiX1Jlc3RhdXJhbnRGb3JtX2dldEZvcm1EYXRhT2JqIiwiUkVTVEFVUkFOVF9GT1JNX0VWRU5UUyIsIkhUTUxGb3JtRWxlbWVudCIsInN1cGVyIiwiY2xvbmVOb2RlIiwiY29ubmVjdGVkQ2FsbGJhY2siLCJhZGRFdmVudExpc3RlbmVyIiwiYmluZCIsInNldEN1c3RvbVZhbGlkaXR5IiwiV2Vha1NldCIsInByZXZlbnREZWZhdWx0IiwiRm9ybURhdGEiLCJmb3JtRGF0YSIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImJ1YmJsZXMiLCJkZXRhaWwiLCJyZXNldCIsIlJlZ0V4cCIsInRlc3QiLCJrZXlzIiwicmVkdWNlIiwiTWFwIiwib3B0aW9uIiwiX1NlbGVjdF9pbnN0YW5jZXMiLCJfU2VsZWN0X2hhbmRsZU9uQ2hhbmdlIiwiX1NlbGVjdF9jcmVhdGVPcHRpb25zIiwiX1NlbGVjdF9nZW5lcmF0ZU9wdGlvbnMiLCJTRUxFQ1RfRVZFTlRTIiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJhcmd1bWVudHMiLCJ0eXBlIiwiZ2V0QXR0cmlidXRlIiwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrIiwiaW5uZXJIVE1MIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiZm9yRWFjaCIsIm9ic2VydmVkQXR0cmlidXRlcyIsIl9SZXN0YXVyYW50RmlsdGVyc19pbnN0YW5jZXMiLCJfUmVzdGF1cmFudEZpbHRlcnNfY2F0ZWdvcnlGaWx0ZXIiLCJfUmVzdGF1cmFudEZpbHRlcnNfc29ydGluZ0ZpbHRlciIsIl9SZXN0YXVyYW50RmlsdGVyc19oYW5kbGVTZWxlY3RPbkNoYW5nZSIsIlJFU1RBVVJBTlRfRklMVEVSU19FVkVOVFMiLCJIVE1MRWxlbWVudCIsIl9Cb29rbWFya1RhYl9pbnN0YW5jZXMiLCJfQm9va21hcmtUYWJfdGFiSXRlbXMiLCJfQm9va21hcmtUYWJfaGFuZGxlQ2xpY2tUYWJJdGVtIiwiQk9PS01BUktfVEFCX0VWRU5UUyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0YXJnZXRJdGVtIiwidGFiSXRlbSIsImNsYXNzTGlzdCIsIl9DYXRlZ29yeUljb25faW5zdGFuY2VzIiwiX0NhdGVnb3J5SWNvbl9jYXRlZ29yeSIsIl9DYXRlZ29yeUljb25fcmVuZGVyIiwiQ0FURUdPUllfSUNPTlMiLCJIVE1MSW1hZ2VFbGVtZW50IiwiYWx0IiwiX0Jvb2ttYXJrQnV0dG9uX2luc3RhbmNlcyIsIl9Cb29rbWFya0J1dHRvbl9pc0Jvb2ttYXJrIiwiX0Jvb2ttYXJrQnV0dG9uX2ltYWdlRWxlbWVudCIsIl9Cb29rbWFya0J1dHRvbl9yZW5kZXIiLCJfQm9va21hcmtCdXR0b25fY3JlYXRlSW1nRWxlbWVudCIsIkJPT0tNQVJLX0JVVFRPTl9FVkVOVFMiLCJIVE1MQnV0dG9uRWxlbWVudCIsImltZ0VsZW1lbnQiLCJfUmVzdGF1cmFudERldGFpbF9pbnN0YW5jZXMiLCJfUmVzdGF1cmFudERldGFpbF9yZXN0YXVyYW50IiwiX1Jlc3RhdXJhbnREZXRhaWxfY2F0ZWdvcnlJY29uIiwiX1Jlc3RhdXJhbnREZXRhaWxfYm9va21hcmtCdG4iLCJfUmVzdGF1cmFudERldGFpbF9kZWxldGVCdG4iLCJfUmVzdGF1cmFudERldGFpbF9jbG9zZUJ0biIsIl9SZXN0YXVyYW50RGV0YWlsX29uVG9nZ2xlQm9va21hcmsiLCJfUmVzdGF1cmFudERldGFpbF9vbkNsaWNrRGVsZXRlQnV0dG9uIiwiX1Jlc3RhdXJhbnREZXRhaWxfb25DbGlja0Nsb3NlQnV0dG9uIiwiX1Jlc3RhdXJhbnREZXRhaWxfcmVuZGVyIiwiX1Jlc3RhdXJhbnREZXRhaWxfc2V0TmFtZSIsIl9SZXN0YXVyYW50RGV0YWlsX3NldERpc3RhbmNlIiwiX1Jlc3RhdXJhbnREZXRhaWxfc2V0RGVzY3JpcHRpb24iLCJfUmVzdGF1cmFudERldGFpbF9zZXRMaW5rIiwiUkVTVEFVUkFOVF9ERVRBSUxfRVZFTlRTIiwidGV4dENvbnRlbnQiLCJkZXNjcmlwdGlvbiIsImRlc2NyaXB0aW9uRWxlbWVudCIsImxpbmsiLCJsaW5rRWxlbWVudCIsImhyZWYiLCJfUmVzdGF1cmFudEl0ZW1faW5zdGFuY2VzIiwiX1Jlc3RhdXJhbnRJdGVtX3Jlc3RhdXJhbnQiLCJfUmVzdGF1cmFudEl0ZW1fY2F0ZWdvcnlJY29uIiwiX1Jlc3RhdXJhbnRJdGVtX2Jvb2ttYXJrQnRuIiwiX1Jlc3RhdXJhbnRJdGVtX2hhbmRsZVRvZ2dsZUJvb2ttYXJrQnRuIiwiX1Jlc3RhdXJhbnRJdGVtX2hhbmRsZUJvZHlDbGljayIsIl9SZXN0YXVyYW50SXRlbV9yZW5kZXIiLCJfUmVzdGF1cmFudEl0ZW1fc2V0TmFtZSIsIl9SZXN0YXVyYW50SXRlbV9zZXREaXN0YW5jZSIsIl9SZXN0YXVyYW50SXRlbV9zZXREZXNjcmlwdGlvbiIsIlJFU1RBVVJBTlRfSVRFTV9FVkVOVFMiLCJIVE1MTElFbGVtZW50IiwicmVzdGF1cmFudERldGFpbCIsIm9wZW5Nb2RhbCIsImJvZHkiLCJfQXBwX2luc3RhbmNlcyIsIl9BcHBfcmVzdGF1cmFudEZpbHRlcnMiLCJfQXBwX2Jvb2ttYXJrVGFiIiwiX0FwcF9yZXN0YXVyYW50TGlzdCIsIl9BcHBfcmVzdGF1cmFudE1hbmdlciIsIl9BcHBfbG9hZERhdGFGcm9tTG9jYWxTdG9yYWdlIiwiX0FwcF91cGRhdGVEYXRhVG9Mb2NhbFN0b3JhZ2UiLCJfQXBwX3VwZGF0ZVJlc3RhdXJhbnRMaXN0IiwiX0FwcF9hZGRFdmVudExpc3RlbmVycyIsIl9BcHBfYWRkUmVzdGF1cmFudFN1Ym1pdEV2ZW50TGlzdGVuZXIiLCJfQXBwX2FkZEZpbHRlck9uY2hhbmdlRXZlbnRMaXN0ZW5lciIsIl9BcHBfYWRkQm9va21hcmtUYWJPbkNoYW5nZUV2ZW50TGlzdGVuZXIiLCJfQXBwX2FkZEJvb2ttYXJrT25jaGFuZ2VFdmVudExpc3RlbmVyIiwiX0FwcF9hZGREZWxldGVSZXN0YXVyYW50SXRlbUV2ZW50TGlzdGVuZXIiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwicGFyc2UiLCJsb2FkRnJvbUxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJfR05CX2luc3RhbmNlcyIsIl9HTkJfY3JlYXRlUmVzdGF1cmFudEZvcm1UaXRsZSIsIl9HTkJfY3JlYXRlUmVzdGF1cmFudEZvcm0iLCJtb2RhbCIsInRpdGxlIiwicmVzdGF1cmFudEZvcm1UaXRsZSIsInJlc3RhdXJhbnRGb3JtIiwiX01vZGFsX2luc3RhbmNlcyIsIl9Nb2RhbF9iYWNrZHJvcCIsIl9Nb2RhbF9jb250YWluZXIiLCJfTW9kYWxfY2xvc2VNb2RhbCIsIl9SZXN0YXVyYW50TGlzdF9pbnN0YW5jZXMiLCJfUmVzdGF1cmFudExpc3RfcmVzdGF1cmFudHMiLCJfUmVzdGF1cmFudExpc3RfdXBkYXRlTGlzdCIsIkhUTUxVTGlzdEVsZW1lbnQiLCJyZXN0YXVyYW50SXRlbSIsImN1c3RvbUVsZW1lbnRzIiwiZGVmaW5lIiwiZXh0ZW5kcyIsImFzeW5jIiwic3RhcnQiXSwic291cmNlUm9vdCI6IiJ9