(()=>{"use strict";var t={840:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,"/* 카테고리/정렬 필터 */\n.restaurant-filter-container {\n  display: flex;\n  justify-content: space-between;\n\n  padding: 0 16px;\n  margin-top: 24px;\n}\n\n.restaurant-filter-container select {\n  height: 44px;\n  min-width: 125px;\n\n  border: 1px solid #d0d5dd;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 16px;\n}\n\n.restaurant-filter {\n  padding: 8px;\n}\n","",{version:3,sources:["webpack://./src/components/App.css"],names:[],mappings:"AAAA,eAAe;AACf;EACE,aAAa;EACb,8BAA8B;;EAE9B,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,gBAAgB;;EAEhB,yBAAyB;EACzB,kBAAkB;EAClB,uBAAuB;;EAEvB,eAAe;AACjB;;AAEA;EACE,YAAY;AACd",sourcesContent:["/* 카테고리/정렬 필터 */\n.restaurant-filter-container {\n  display: flex;\n  justify-content: space-between;\n\n  padding: 0 16px;\n  margin-top: 24px;\n}\n\n.restaurant-filter-container select {\n  height: 44px;\n  min-width: 125px;\n\n  border: 1px solid #d0d5dd;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 16px;\n}\n\n.restaurant-filter {\n  padding: 8px;\n}\n"],sourceRoot:""}]);const s=i},182:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,".bookmark-tab-container {\n  width: 100%;\n  padding: 0 16px;\n  margin-top: 22px;\n}\n\n.bookmark-tab {\n  display: flex;\n  align-items: center;\n}\n\n.tab-item {\n  width: 50%;\n  min-height: 100%;\n  padding: 9px 0;\n\n  font-size: 16px;\n  text-align: center;\n  color: var(--grey-300);\n\n  border-bottom: 2px solid var(--grey-200);\n}\n\n.tab-item.active {\n  color: var(--primary-color);\n\n  border-bottom: 2px solid var(--primary-color);\n}\n","",{version:3,sources:["webpack://./src/components/BookmarkTab/BookmarkTab.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,UAAU;EACV,gBAAgB;EAChB,cAAc;;EAEd,eAAe;EACf,kBAAkB;EAClB,sBAAsB;;EAEtB,wCAAwC;AAC1C;;AAEA;EACE,2BAA2B;;EAE3B,6CAA6C;AAC/C",sourcesContent:[".bookmark-tab-container {\n  width: 100%;\n  padding: 0 16px;\n  margin-top: 22px;\n}\n\n.bookmark-tab {\n  display: flex;\n  align-items: center;\n}\n\n.tab-item {\n  width: 50%;\n  min-height: 100%;\n  padding: 9px 0;\n\n  font-size: 16px;\n  text-align: center;\n  color: var(--grey-300);\n\n  border-bottom: 2px solid var(--grey-200);\n}\n\n.tab-item.active {\n  color: var(--primary-color);\n\n  border-bottom: 2px solid var(--primary-color);\n}\n"],sourceRoot:""}]);const s=i},382:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,"/* GNB ********************************************/\n.gnb {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 64px;\n\n  padding: 0 16px;\n\n  background-color: var(--primary-color);\n}\n\n.gnb__title {\n  color: #fcfcfd;\n}\n\n.gnb__button {\n  height: 40px;\n\n  border: none;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 24px;\n  cursor: pointer;\n}\n\n.gnb__button img {\n  display: block;\n  width: 40px;\n  height: 40px;\n  object-fit: contain;\n}\n","",{version:3,sources:["webpack://./src/components/GNB/GNB.css"],names:[],mappings:"AAAA,mDAAmD;AACnD;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,YAAY;;EAEZ,eAAe;;EAEf,sCAAsC;AACxC;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,YAAY;;EAEZ,YAAY;EACZ,kBAAkB;EAClB,uBAAuB;;EAEvB,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,cAAc;EACd,WAAW;EACX,YAAY;EACZ,mBAAmB;AACrB",sourcesContent:["/* GNB ********************************************/\n.gnb {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 64px;\n\n  padding: 0 16px;\n\n  background-color: var(--primary-color);\n}\n\n.gnb__title {\n  color: #fcfcfd;\n}\n\n.gnb__button {\n  height: 40px;\n\n  border: none;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 24px;\n  cursor: pointer;\n}\n\n.gnb__button img {\n  display: block;\n  width: 40px;\n  height: 40px;\n  object-fit: contain;\n}\n"],sourceRoot:""}]);const s=i},400:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,".modal {\n  display: none;\n}\n\n.modal--open {\n  display: block;\n\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  height: 100vh;\n}\n\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  background: rgba(0, 0, 0, 0.35);\n}\n\n.modal-container {\n  position: absolute;\n  bottom: 0;\n\n  width: 100%;\n  height: fit-content;\n  max-height: 90%;\n\n  padding: 32px 16px;\n\n  border-radius: 8px 8px 0px 0px;\n  background: var(--grey-100);\n\n  overflow-y: scroll;\n}\n\n.modal-title {\n  margin-bottom: 36px;\n}\n","",{version:3,sources:["webpack://./src/components/Modal/Modal.css"],names:[],mappings:"AAAA;EACE,aAAa;AACf;;AAEA;EACE,cAAc;;EAEd,eAAe;EACf,MAAM;EACN,QAAQ;EACR,SAAS;EACT,OAAO;;EAEP,aAAa;AACf;;AAEA;EACE,eAAe;EACf,MAAM;EACN,QAAQ;EACR,SAAS;EACT,OAAO;;EAEP,+BAA+B;AACjC;;AAEA;EACE,kBAAkB;EAClB,SAAS;;EAET,WAAW;EACX,mBAAmB;EACnB,eAAe;;EAEf,kBAAkB;;EAElB,8BAA8B;EAC9B,2BAA2B;;EAE3B,kBAAkB;AACpB;;AAEA;EACE,mBAAmB;AACrB",sourcesContent:[".modal {\n  display: none;\n}\n\n.modal--open {\n  display: block;\n\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  height: 100vh;\n}\n\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  background: rgba(0, 0, 0, 0.35);\n}\n\n.modal-container {\n  position: absolute;\n  bottom: 0;\n\n  width: 100%;\n  height: fit-content;\n  max-height: 90%;\n\n  padding: 32px 16px;\n\n  border-radius: 8px 8px 0px 0px;\n  background: var(--grey-100);\n\n  overflow-y: scroll;\n}\n\n.modal-title {\n  margin-bottom: 36px;\n}\n"],sourceRoot:""}]);const s=i},309:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,".restaurant-detail {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n.restaurant-detail > .restaurant__info {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n\n  margin-bottom: 32px;\n}\n\n.restaurant-detail > .restaurant__info > .restaurant__description {\n  padding: 0;\n  text-overflow: unset;\n  -webkit-line-clamp: unset;\n}\n\n.restaurant-detail > .restaurant__info > .restaurant__bookmark {\n  position: absolute;\n  top: 32px;\n  right: 32px;\n}\n","",{version:3,sources:["webpack://./src/components/RestaurantDetail/RestaurantDetail.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;;EAET,mBAAmB;AACrB;;AAEA;EACE,UAAU;EACV,oBAAoB;EACpB,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;AACb",sourcesContent:[".restaurant-detail {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n.restaurant-detail > .restaurant__info {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n\n  margin-bottom: 32px;\n}\n\n.restaurant-detail > .restaurant__info > .restaurant__description {\n  padding: 0;\n  text-overflow: unset;\n  -webkit-line-clamp: unset;\n}\n\n.restaurant-detail > .restaurant__info > .restaurant__bookmark {\n  position: absolute;\n  top: 32px;\n  right: 32px;\n}\n"],sourceRoot:""}]);const s=i},414:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,"/* 카테고리/정렬 필터 */\n.restaurant-filter-container {\n  display: flex;\n  justify-content: space-between;\n\n  padding: 0 16px;\n  margin-top: 36px;\n}\n\n.restaurant-filter-container select {\n  height: 44px;\n  min-width: 125px;\n\n  border: 1px solid #d0d5dd;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 16px;\n}\n\n.restaurant-filter {\n  padding: 8px;\n}\n","",{version:3,sources:["webpack://./src/components/RestaurantFilters/RestaurantFilters.css"],names:[],mappings:"AAAA,eAAe;AACf;EACE,aAAa;EACb,8BAA8B;;EAE9B,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,gBAAgB;;EAEhB,yBAAyB;EACzB,kBAAkB;EAClB,uBAAuB;;EAEvB,eAAe;AACjB;;AAEA;EACE,YAAY;AACd",sourcesContent:["/* 카테고리/정렬 필터 */\n.restaurant-filter-container {\n  display: flex;\n  justify-content: space-between;\n\n  padding: 0 16px;\n  margin-top: 36px;\n}\n\n.restaurant-filter-container select {\n  height: 44px;\n  min-width: 125px;\n\n  border: 1px solid #d0d5dd;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 16px;\n}\n\n.restaurant-filter {\n  padding: 8px;\n}\n"],sourceRoot:""}]);const s=i},27:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,".input-container {\n  height: 85%;\n\n  margin-bottom: 10px;\n}\n\n.form-item {\n  display: flex;\n  flex-direction: column;\n\n  margin-bottom: 36px;\n}\n\n.form-item label {\n  color: var(--grey-400);\n  font-size: 14px;\n}\n\n.form-item--required label::after {\n  padding-left: 4px;\n\n  color: var(--primary-color);\n  content: '*';\n}\n\n.form-item .help-text {\n  color: var(--grey-300);\n}\n\n.form-item input,\n.form-item textarea,\n.form-item select {\n  padding: 8px;\n  margin: 6px 0;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  font-size: 16px;\n}\n\n.form-item textarea {\n  resize: none;\n}\n\n.form-item select {\n  height: 44px;\n\n  padding: 8px;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  color: var(--grey-300);\n}\n\ninput[name='name'],\ninput[name='link'] {\n  height: 44px;\n}\n\n.button-container {\n  display: flex;\n}\n\n.button {\n  width: 100%;\n  height: 44px;\n\n  margin-right: 16px;\n\n  border: none;\n  border-radius: 8px;\n\n  font-weight: 600;\n  cursor: pointer;\n}\n\n.button:last-child {\n  margin-right: 0;\n}\n\n.button--secondary {\n  border: 1px solid var(--grey-300);\n  background: transparent;\n\n  color: var(--grey-300);\n}\n\n.button--primary {\n  background: var(--primary-color);\n\n  color: var(--grey-100);\n}\n","",{version:3,sources:["webpack://./src/components/RestaurantForm/RestaurantForm.css"],names:[],mappings:"AAAA;EACE,WAAW;;EAEX,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;;EAEtB,mBAAmB;AACrB;;AAEA;EACE,sBAAsB;EACtB,eAAe;AACjB;;AAEA;EACE,iBAAiB;;EAEjB,2BAA2B;EAC3B,YAAY;AACd;;AAEA;EACE,sBAAsB;AACxB;;AAEA;;;EAGE,YAAY;EACZ,aAAa;;EAEb,iCAAiC;EACjC,kBAAkB;;EAElB,eAAe;AACjB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;;EAEZ,YAAY;;EAEZ,iCAAiC;EACjC,kBAAkB;;EAElB,sBAAsB;AACxB;;AAEA;;EAEE,YAAY;AACd;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,WAAW;EACX,YAAY;;EAEZ,kBAAkB;;EAElB,YAAY;EACZ,kBAAkB;;EAElB,gBAAgB;EAChB,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,iCAAiC;EACjC,uBAAuB;;EAEvB,sBAAsB;AACxB;;AAEA;EACE,gCAAgC;;EAEhC,sBAAsB;AACxB",sourcesContent:[".input-container {\n  height: 85%;\n\n  margin-bottom: 10px;\n}\n\n.form-item {\n  display: flex;\n  flex-direction: column;\n\n  margin-bottom: 36px;\n}\n\n.form-item label {\n  color: var(--grey-400);\n  font-size: 14px;\n}\n\n.form-item--required label::after {\n  padding-left: 4px;\n\n  color: var(--primary-color);\n  content: '*';\n}\n\n.form-item .help-text {\n  color: var(--grey-300);\n}\n\n.form-item input,\n.form-item textarea,\n.form-item select {\n  padding: 8px;\n  margin: 6px 0;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  font-size: 16px;\n}\n\n.form-item textarea {\n  resize: none;\n}\n\n.form-item select {\n  height: 44px;\n\n  padding: 8px;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  color: var(--grey-300);\n}\n\ninput[name='name'],\ninput[name='link'] {\n  height: 44px;\n}\n\n.button-container {\n  display: flex;\n}\n\n.button {\n  width: 100%;\n  height: 44px;\n\n  margin-right: 16px;\n\n  border: none;\n  border-radius: 8px;\n\n  font-weight: 600;\n  cursor: pointer;\n}\n\n.button:last-child {\n  margin-right: 0;\n}\n\n.button--secondary {\n  border: 1px solid var(--grey-300);\n  background: transparent;\n\n  color: var(--grey-300);\n}\n\n.button--primary {\n  background: var(--primary-color);\n\n  color: var(--grey-100);\n}\n"],sourceRoot:""}]);const s=i},823:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,".restaurant__bookmark {\n  background: none;\n  border: none;\n}\n\n.restaurant__bookmark > img {\n  width: 32px;\n}\n","",{version:3,sources:["webpack://./src/components/RestaurantItem/BookmarkButton/BookmarkButton.css"],names:[],mappings:"AAAA;EACE,gBAAgB;EAChB,YAAY;AACd;;AAEA;EACE,WAAW;AACb",sourcesContent:[".restaurant__bookmark {\n  background: none;\n  border: none;\n}\n\n.restaurant__bookmark > img {\n  width: 32px;\n}\n"],sourceRoot:""}]);const s=i},5:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,".category-icon {\n  width: 36px;\n  height: 36px;\n}\n","",{version:3,sources:["webpack://./src/components/RestaurantItem/CategoryIcon/CategoryIcon.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,YAAY;AACd",sourcesContent:[".category-icon {\n  width: 36px;\n  height: 36px;\n}\n"],sourceRoot:""}]);const s=i},207:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,".restaurant {\n  display: flex;\n  align-items: flex-start;\n\n  padding: 16px 8px;\n\n  border-bottom: 1px solid #e9eaed;\n}\n\n.restaurant__category {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 64px;\n  height: 64px;\n  min-width: 64px;\n  min-height: 64px;\n\n  margin-right: 16px;\n\n  border-radius: 50%;\n  background: var(--lighten-color);\n}\n\n.restaurant__info {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n\n  width: 100%;\n}\n\n.restaurant__name {\n  margin: 0;\n}\n\n.restaurant__distance {\n  color: var(--primary-color);\n}\n\n.restaurant__description {\n  display: -webkit-box;\n\n  padding-top: 8px;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n}\n","",{version:3,sources:["webpack://./src/components/RestaurantItem/RestaurantItem.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,uBAAuB;;EAEvB,iBAAiB;;EAEjB,gCAAgC;AAClC;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,eAAe;EACf,gBAAgB;;EAEhB,kBAAkB;;EAElB,kBAAkB;EAClB,gCAAgC;AAClC;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,2BAA2B;;EAE3B,WAAW;AACb;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,oBAAoB;;EAEpB,gBAAgB;;EAEhB,gBAAgB;EAChB,uBAAuB;EACvB,qBAAqB;EACrB,4BAA4B;AAC9B",sourcesContent:[".restaurant {\n  display: flex;\n  align-items: flex-start;\n\n  padding: 16px 8px;\n\n  border-bottom: 1px solid #e9eaed;\n}\n\n.restaurant__category {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 64px;\n  height: 64px;\n  min-width: 64px;\n  min-height: 64px;\n\n  margin-right: 16px;\n\n  border-radius: 50%;\n  background: var(--lighten-color);\n}\n\n.restaurant__info {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n\n  width: 100%;\n}\n\n.restaurant__name {\n  margin: 0;\n}\n\n.restaurant__distance {\n  color: var(--primary-color);\n}\n\n.restaurant__description {\n  display: -webkit-box;\n\n  padding-top: 8px;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n}\n"],sourceRoot:""}]);const s=i},555:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,"/* 음식점 목록 */\n.restaurant-list-container {\n  display: flex;\n  flex-direction: column;\n\n  padding: 0 16px;\n  margin: 16px 0;\n}\n","",{version:3,sources:["webpack://./src/components/RestaurantList/RestaurantList.css"],names:[],mappings:"AAAA,WAAW;AACX;EACE,aAAa;EACb,sBAAsB;;EAEtB,eAAe;EACf,cAAc;AAChB",sourcesContent:["/* 음식점 목록 */\n.restaurant-list-container {\n  display: flex;\n  flex-direction: column;\n\n  padding: 0 16px;\n  margin: 16px 0;\n}\n"],sourceRoot:""}]);const s=i},644:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,"select {\n  padding: 8px;\n  margin: 6px 0;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  font-size: 16px;\n}\n","",{version:3,sources:["webpack://./src/components/Select/Select.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,aAAa;;EAEb,iCAAiC;EACjC,kBAAkB;;EAElB,eAAe;AACjB",sourcesContent:["select {\n  padding: 8px;\n  margin: 6px 0;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  font-size: 16px;\n}\n"],sourceRoot:""}]);const s=i},961:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([t.id,"* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nul,\nli {\n  list-style: none;\n}\n\nhtml,\nbody {\n  width: 100%;\n  height: 100%;\n\n  font-family: sans-serif;\n  font-size: 16px;\n\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-use-select: none;\n  user-select: none;\n}\n\n/* Colors *****************************************/\n:root {\n  --primary-color: #ec4a0a;\n  --lighten-color: #f6a88a;\n  --grey-100: #ffffff;\n  --grey-200: #d0d5dd;\n  --grey-300: #667085;\n  --grey-400: #344054;\n  --grey-500: #000000;\n}\n\n/* Typography *************************************/\n.text-title {\n  font-size: 20px;\n  line-height: 24px;\n  font-weight: 600;\n}\n\n.text-subtitle {\n  font-size: 18px;\n  line-height: 28px;\n  font-weight: 600;\n}\n\n.text-body {\n  font-size: 16px;\n  line-height: 24px;\n  font-weight: 400;\n}\n\n.text-caption {\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 400;\n}\n\n.draggable {\n  -webkit-user-select: all;\n  -moz-user-select: all;\n  -ms-use-select: all;\n  user-select: all;\n}\n","",{version:3,sources:["webpack://./src/components/global.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;EACT,sBAAsB;AACxB;;AAEA;;EAEE,gBAAgB;AAClB;;AAEA;;EAEE,WAAW;EACX,YAAY;;EAEZ,uBAAuB;EACvB,eAAe;;EAEf,yBAAyB;EACzB,sBAAsB;EACtB,oBAAoB;EACpB,iBAAiB;AACnB;;AAEA,mDAAmD;AACnD;EACE,wBAAwB;EACxB,wBAAwB;EACxB,mBAAmB;EACnB,mBAAmB;EACnB,mBAAmB;EACnB,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA,mDAAmD;AACnD;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,wBAAwB;EACxB,qBAAqB;EACrB,mBAAmB;EACnB,gBAAgB;AAClB",sourcesContent:["* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nul,\nli {\n  list-style: none;\n}\n\nhtml,\nbody {\n  width: 100%;\n  height: 100%;\n\n  font-family: sans-serif;\n  font-size: 16px;\n\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-use-select: none;\n  user-select: none;\n}\n\n/* Colors *****************************************/\n:root {\n  --primary-color: #ec4a0a;\n  --lighten-color: #f6a88a;\n  --grey-100: #ffffff;\n  --grey-200: #d0d5dd;\n  --grey-300: #667085;\n  --grey-400: #344054;\n  --grey-500: #000000;\n}\n\n/* Typography *************************************/\n.text-title {\n  font-size: 20px;\n  line-height: 24px;\n  font-weight: 600;\n}\n\n.text-subtitle {\n  font-size: 18px;\n  line-height: 28px;\n  font-weight: 600;\n}\n\n.text-body {\n  font-size: 16px;\n  line-height: 24px;\n  font-weight: 400;\n}\n\n.text-caption {\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 400;\n}\n\n.draggable {\n  -webkit-user-select: all;\n  -moz-user-select: all;\n  -ms-use-select: all;\n  user-select: all;\n}\n"],sourceRoot:""}]);const s=i},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",r=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),r&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),r&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,r,a,o){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<t.length;l++){var A=[].concat(t[l]);r&&i[A[0]]||(void 0!==o&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=o),e&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=e):A[2]=e),a&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=a):A[4]="".concat(a)),n.push(A))}},n}},537:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},379:t=>{var n=[];function e(t){for(var e=-1,r=0;r<n.length;r++)if(n[r].identifier===t){e=r;break}return e}function r(t,r){for(var o={},i=[],s=0;s<t.length;s++){var c=t[s],l=r.base?c[0]+r.base:c[0],A=o[l]||0,d="".concat(l," ").concat(A);o[l]=A+1;var p=e(d),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var h=a(u,r);r.byIndex=s,n.splice(s,0,{identifier:d,updater:h,references:1})}i.push(d)}return i}function a(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,a){var o=r(t=t||[],a=a||{});return function(t){t=t||[];for(var i=0;i<o.length;i++){var s=e(o[i]);n[s].references--}for(var c=r(t,a),l=0;l<o.length;l++){var A=e(o[l]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}o=c}}},569:t=>{var n={};t.exports=function(t,e){var r=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{t.exports=function(t){var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var a=void 0!==e.layer;a&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,a&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}}},n={};function e(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return t[r](o,o.exports,e),o.exports}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var r=n.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})(),e.nc=void 0,(()=>{var t=e(379),n=e.n(t),r=e(795),a=e.n(r),o=e(569),i=e.n(o),s=e(565),c=e.n(s),l=e(216),A=e.n(l),d=e(589),p=e.n(d),u=e(961),h={};h.styleTagTransform=p(),h.setAttributes=c(),h.insert=i().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=A(),n()(u.Z,h),u.Z&&u.Z.locals&&u.Z.locals;var m=e(840),f={};f.styleTagTransform=p(),f.setAttributes=c(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=A(),n()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;var E=e(414),g={};g.styleTagTransform=p(),g.setAttributes=c(),g.insert=i().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=A(),n()(E.Z,g),E.Z&&E.Z.locals&&E.Z.locals;const b=new Map([["categoryFilters",[{value:"전체",option:"전체"},{value:"한식",option:"한식"},{value:"중식",option:"중식"},{value:"일식",option:"일식"},{value:"양식",option:"양식"},{value:"아시안",option:"아시안"},{value:"기타",option:"기타"}]],["sortingFilters",[{value:"name",option:"이름순"},{value:"distance",option:"거리순"}]],["categories",[{value:"",option:"선택해 주세요"},{value:"한식",option:"한식"},{value:"중식",option:"중식"},{value:"일식",option:"일식"},{value:"양식",option:"양식"},{value:"아시안",option:"아시안"},{value:"기타",option:"기타"}]],["distances",[{value:5,option:"5분 내"},{value:10,option:"10분 내"},{value:15,option:"15분 내"},{value:20,option:"20분 내"},{value:30,option:"30분 내"}]]]);var w=e(644),v={};v.styleTagTransform=p(),v.setAttributes=c(),v.insert=i().bind(null,"head"),v.domAPI=a(),v.insertStyleElement=A(),n()(w.Z,v),w.Z&&w.Z.locals&&w.Z.locals;var C,y,B,x,k=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};const T="selectOnChange";class S extends HTMLSelectElement{constructor(){super(...arguments),C.add(this)}get type(){return this.getAttribute("type")}connectedCallback(){this.addEventListener("change",k(this,C,"m",y).bind(this))}attributeChangedCallback(){k(this,C,"m",B).call(this)}}C=new WeakSet,y=function(t){const{value:n}=t.target;this.dispatchEvent(new CustomEvent(T,{bubbles:!0,detail:{value:n,id:this.id}}))},B=function(){this.innerHTML="";const t=document.createDocumentFragment();k(this,C,"m",x).call(this).forEach((n=>t.appendChild(n))),this.appendChild(t)},x=function(){return(b.get(this.type)||[]).map((({value:t,option:n})=>{const e=document.createElement("option");return e.value=t,e.innerHTML=n,e}))},S.observedAttributes=["type"];var _,Z,j,L,M=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)},W=function(t,n,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof n?t!==n||!a:!n.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(t,e):a?a.value=e:n.set(t,e),e};const P="filterChange";class Y extends HTMLElement{constructor(){super(),_.add(this),Z.set(this,void 0),j.set(this,void 0);const t=document.querySelector("#template-restaurant-filter-container").content.cloneNode(!0);this.appendChild(t)}get sort(){return M(this,j,"f").value}get category(){return M(this,Z,"f").value}set category(t){M(this,Z,"f").value=t}connectedCallback(){W(this,Z,this.querySelector("#category-filter"),"f"),W(this,j,this.querySelector("#sorting-filter"),"f"),this.addEventListener(T,M(this,_,"m",L).bind(this))}}Z=new WeakMap,j=new WeakMap,_=new WeakSet,L=function(t){this.dispatchEvent(new CustomEvent(P,{bubbles:!0,detail:{category:this.category,sort:this.sort}}))};var q=e(182),z={};z.styleTagTransform=p(),z.setAttributes=c(),z.insert=i().bind(null,"head"),z.domAPI=a(),z.insertStyleElement=A(),n()(q.Z,z),q.Z&&q.Z.locals&&q.Z.locals;var R,I,D,N=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};const H="tabBookmarkItem";class F extends HTMLElement{constructor(){super(),R.add(this),I.set(this,void 0);const t=document.querySelector("#template-bookmark-tab").content.cloneNode(!0);this.appendChild(t)}get isBookmark(){return"bookmark"===this.querySelector(".active").id}connectedCallback(){(function(t,n,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof n?t!==n||!a:!n.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===r?a.call(t,e):a?a.value=e:n.set(t,e)})(this,I,this.querySelectorAll(".tab-item"),"f"),this.addEventListener("click",N(this,R,"m",D).bind(this))}}I=new WeakMap,R=new WeakSet,D=function(t){const n=t.target;N(this,I,"f").forEach((t=>{t.classList.remove("active")})),n.classList.add("active"),this.dispatchEvent(new CustomEvent(H,{bubbles:!0}))};var O=e(207),U={};U.styleTagTransform=p(),U.setAttributes=c(),U.insert=i().bind(null,"head"),U.domAPI=a(),U.insertStyleElement=A(),n()(O.Z,U),O.Z&&O.Z.locals&&O.Z.locals;var X=e(5),G={};G.styleTagTransform=p(),G.setAttributes=c(),G.insert=i().bind(null,"head"),G.domAPI=a(),G.insertStyleElement=A(),n()(X.Z,G),X.Z&&X.Z.locals&&X.Z.locals;const V=e.p+"category-korean.png",$=e.p+"category-chinese.png",J=e.p+"category-japanese.png",Q=e.p+"category-western.png",K=e.p+"category-asian.png",tt=e.p+"category-etc.png";var nt,et,rt,at,ot=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};class it extends HTMLImageElement{constructor(t){super(),nt.add(this),et.set(this,void 0),function(t,n,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof n?t!==n||!a:!n.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===r?a.call(t,e):a?a.value=e:n.set(t,e)}(this,et,t,"f"),this.classList.add(".category-icon"),ot(this,nt,"m",rt).call(this)}}et=new WeakMap,nt=new WeakSet,rt=function(){this.src=ot(this,nt,"m",at).call(this),this.alt=ot(this,et,"f")},at=function(){return"한식"===ot(this,et,"f")?V:"중식"===ot(this,et,"f")?$:"일식"===ot(this,et,"f")?J:"양식"===ot(this,et,"f")?Q:"아시안"===ot(this,et,"f")?K:"기타"===ot(this,et,"f")?tt:""};var st=e(823),ct={};ct.styleTagTransform=p(),ct.setAttributes=c(),ct.insert=i().bind(null,"head"),ct.domAPI=a(),ct.insertStyleElement=A(),n()(st.Z,ct),st.Z&&st.Z.locals&&st.Z.locals;const lt=e.p+"favorite-icon-filled.png",At=e.p+"favorite-icon-lined.png";var dt,pt,ut,ht,mt,ft=function(t,n,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof n?t!==n||!a:!n.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(t,e):a?a.value=e:n.set(t,e),e},Et=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};const gt="bookmarkBtnClicked";class bt extends HTMLButtonElement{constructor(t){super(),dt.add(this),pt.set(this,void 0),ut.set(this,void 0),ft(this,pt,t,"f"),ft(this,ut,Et(this,dt,"m",mt).call(this),"f"),this.classList.add("restaurant__bookmark"),this.appendChild(Et(this,ut,"f")),Et(this,dt,"m",ht).call(this)}connectedCallback(){this.addEventListener("click",(()=>{ft(this,pt,!Et(this,pt,"f"),"f"),Et(this,dt,"m",ht).call(this),this.dispatchEvent(new CustomEvent(gt,{bubbles:!0,detail:{isBookmark:Et(this,pt,"f")}}))}))}}pt=new WeakMap,ut=new WeakMap,dt=new WeakSet,ht=function(){Et(this,ut,"f").src=Et(this,pt,"f")?lt:At},mt=function(){const t=document.createElement("img");return t.src=Et(this,pt,"f")?lt:At,t};var wt=e(309),vt={};vt.styleTagTransform=p(),vt.setAttributes=c(),vt.insert=i().bind(null,"head"),vt.domAPI=a(),vt.insertStyleElement=A(),n()(wt.Z,vt),wt.Z&&wt.Z.locals&&wt.Z.locals;var Ct,yt,Bt,xt,kt,Tt,St,_t,Zt,jt,Lt,Mt,Wt,Pt,Yt=function(t,n,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof n?t!==n||!a:!n.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(t,e):a?a.value=e:n.set(t,e),e},qt=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};const zt="isBookmarkChanged",Rt="deleteRestaurantItem",It="closeRestaurantDetailModal";class Dt extends HTMLElement{constructor(t){super(),Ct.add(this),yt.set(this,void 0),Bt.set(this,void 0),xt.set(this,void 0),kt.set(this,void 0),Tt.set(this,void 0),this.classList.add("restaurant-detail");const n=document.querySelector("#template-restaurant-detail").content.cloneNode(!0);this.appendChild(n),Yt(this,yt,t,"f"),Yt(this,kt,this.querySelector("#delete"),"f"),Yt(this,Tt,this.querySelector("#close"),"f"),Yt(this,Bt,new it(qt(this,yt,"f").category),"f"),this.querySelector(".restaurant__category").appendChild(qt(this,Bt,"f")),Yt(this,xt,new bt(qt(this,yt,"f").isBookmark),"f"),this.querySelector(".restaurant__info").appendChild(qt(this,xt,"f"))}connectedCallback(){qt(this,xt,"f").addEventListener(gt,qt(this,Ct,"m",St).bind(this)),qt(this,kt,"f").addEventListener("click",qt(this,Ct,"m",_t).bind(this)),qt(this,Tt,"f").addEventListener("click",qt(this,Ct,"m",Zt).bind(this)),qt(this,Ct,"m",jt).call(this)}}yt=new WeakMap,Bt=new WeakMap,xt=new WeakMap,kt=new WeakMap,Tt=new WeakMap,Ct=new WeakSet,St=function(t){const{isBookmark:n}=t.detail;qt(this,yt,"f").isBookmark=n,this.dispatchEvent(new CustomEvent(zt,{bubbles:!0,detail:{restaurant:{...qt(this,yt,"f")}}}))},_t=function(){this.dispatchEvent(new CustomEvent(Rt,{bubbles:!0,detail:{id:qt(this,yt,"f").id}}))},Zt=function(){this.dispatchEvent(new CustomEvent(It,{bubbles:!0}))},jt=function(){qt(this,Ct,"m",Lt).call(this),qt(this,Ct,"m",Mt).call(this),qt(this,Ct,"m",Wt).call(this),qt(this,Ct,"m",Pt).call(this)},Lt=function(){this.querySelector(".restaurant__name").textContent=qt(this,yt,"f").name},Mt=function(){this.querySelector(".restaurant__distance").textContent=`캠퍼스로부터 ${qt(this,yt,"f").distance}분 내 `},Wt=function(){const{description:t}=qt(this,yt,"f");if(t){const t=document.createElement("p");t.classList.add("restaurant__description"),t.classList.add("text-body"),t.textContent=qt(this,yt,"f").description,this.querySelector(".restaurant__info").appendChild(t)}},Pt=function(){const{link:t}=qt(this,yt,"f");if(t){const n=document.createElement("a");n.classList.add("restaurant__link"),n.textContent=t,n.href=t,this.querySelector(".restaurant__info").appendChild(n)}};var Nt,Ht,Ft,Ot,Ut,Xt,Gt,Vt,$t,Jt,Qt=function(t,n,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof n?t!==n||!a:!n.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(t,e):a?a.value=e:n.set(t,e),e},Kt=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};const tn="isBookmarkChanged";class nn extends HTMLLIElement{constructor(t){super(),Nt.add(this),Ht.set(this,void 0),Ft.set(this,void 0),Ot.set(this,void 0),this.classList.add("restaurant");const n=document.querySelector("#template-restaurant-item").content.cloneNode(!0);this.appendChild(n),Qt(this,Ht,t,"f"),Qt(this,Ft,new it(Kt(this,Ht,"f").category),"f"),this.querySelector(".restaurant__category").appendChild(Kt(this,Ft,"f")),Qt(this,Ot,new bt(Kt(this,Ht,"f").isBookmark),"f"),this.appendChild(Kt(this,Ot,"f"))}connectedCallback(){Kt(this,Ot,"f").addEventListener(gt,Kt(this,Nt,"m",Ut).bind(this)),this.querySelector(".restaurant__info").addEventListener("click",Kt(this,Nt,"m",Xt).bind(this)),Kt(this,Nt,"m",Gt).call(this)}}Ht=new WeakMap,Ft=new WeakMap,Ot=new WeakMap,Nt=new WeakSet,Ut=function(t){const{isBookmark:n}=t.detail;Kt(this,Ht,"f").isBookmark=n,this.dispatchEvent(new CustomEvent(tn,{bubbles:!0,detail:{restaurant:{...Kt(this,Ht,"f")}}}))},Xt=function(){const t=new Dt({...Kt(this,Ht,"f")});document.querySelector("app-modal").openModal({body:t})},Gt=function(){Kt(this,Nt,"m",Vt).call(this),Kt(this,Nt,"m",$t).call(this),Kt(this,Nt,"m",Jt).call(this)},Vt=function(){this.querySelector(".restaurant__name").textContent=Kt(this,Ht,"f").name},$t=function(){this.querySelector(".restaurant__distance").textContent=`캠퍼스로부터 ${Kt(this,Ht,"f").distance}분 내 `},Jt=function(){this.querySelector(".restaurant__description").textContent=Kt(this,Ht,"f").description};var en=e(27),rn={};rn.styleTagTransform=p(),rn.setAttributes=c(),rn.insert=i().bind(null,"head"),rn.domAPI=a(),rn.insertStyleElement=A(),n()(en.Z,rn),en.Z&&en.Z.locals&&en.Z.locals;var an,on,sn,cn,ln,An,dn=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};const pn="restaurantFormSubmit",un="restaurantFormReset";class hn extends HTMLFormElement{constructor(){super(),an.add(this),on.set(this,void 0);const t=document.querySelector("#template-restaurant-form").content.cloneNode(!0);this.appendChild(t),function(t,n,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof n?t!==n||!a:!n.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===r?a.call(t,e):a?a.value=e:n.set(t,e)}(this,on,this.querySelector("#link"),"f")}connectedCallback(){this.addEventListener("submit",dn(this,an,"m",sn).bind(this)),this.addEventListener("reset",dn(this,an,"m",cn).bind(this)),dn(this,on,"f").addEventListener("invalid",(()=>{dn(this,on,"f").value="",dn(this,on,"f").setCustomValidity("")}))}}on=new WeakMap,an=new WeakSet,sn=function(t){if(t.preventDefault(),!dn(this,an,"m",ln).call(this))return void dn(this,on,"f").setCustomValidity("유효하지 않은 링크입니다.");const n=new FormData(t.target),e=dn(this,an,"m",An).call(this,n);this.dispatchEvent(new CustomEvent(pn,{bubbles:!0,detail:{formData:e}})),this.reset()},cn=function(){this.dispatchEvent(new CustomEvent(un,{bubbles:!0}))},ln=function(){return""===dn(this,on,"f").value||new RegExp("^https?://").test(dn(this,on,"f").value)},An=function(t){return[...t.keys()].reduce(((n,e)=>({...n,[e]:t.get(e)})),{})};var mn,fn=function(t,n,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof n?t!==n||!a:!n.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(t,e):a?a.value=e:n.set(t,e),e},En=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};class gn{constructor(t=[]){mn.set(this,[]),fn(this,mn,[...t],"f")}add(t){En(this,mn,"f").push({id:Date.now(),isBookmark:!1,...t})}delete(t){fn(this,mn,En(this,mn,"f").filter((n=>n.id!==t)),"f")}update(t){const n=En(this,mn,"f").findIndex((n=>n.id===t.id));-1!==n&&(En(this,mn,"f")[n]=t)}getFilteredList(t,n){const e=((t,n)=>n?t?.filter((t=>t.isBookmark)):t)(En(this,mn,"f"),n),r=((t,n)=>"전체"===n?t:t?.filter((t=>t.category===n)))(e,t.category);return((t,n)=>t?"name"===n?[...t].sort(((t,n)=>t.name.localeCompare(n.name))):"distance"===n?[...t].sort(((t,n)=>t.distance-n.distance)):[...t]:[])(r,t.sort)}}mn=new WeakMap;var bn,wn,vn,Cn,yn,Bn,xn,kn,Tn,Sn,_n,Zn,jn,Ln,Mn=function(t,n,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof n?t!==n||!a:!n.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(t,e):a?a.value=e:n.set(t,e),e},Wn=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};wn=new WeakMap,vn=new WeakMap,Cn=new WeakMap,yn=new WeakMap,bn=new WeakSet,Bn=function(){Wn(this,yn,"f").restaurants=JSON.parse(window.localStorage.getItem("restaurants"))},xn=function(){window.localStorage.setItem("restaurants",JSON.stringify(Wn(this,yn,"f").restaurants))},kn=function({category:t,sort:n},e){const r=Wn(this,yn,"f").getFilteredList({category:t,sort:n},e);Wn(this,Cn,"f").restaurants=r},Tn=function(){Wn(this,bn,"m",Sn).call(this),Wn(this,bn,"m",_n).call(this),Wn(this,bn,"m",Zn).call(this),Wn(this,bn,"m",jn).call(this),Wn(this,bn,"m",Ln).call(this)},Sn=function(){document.addEventListener(pn,(t=>{Wn(this,yn,"f").add(t.detail.formData),Wn(this,bn,"m",xn).call(this),Wn(this,wn,"f").category=t.detail.formData.category;const{category:n,sort:e}=Wn(this,wn,"f");Wn(this,bn,"m",kn).call(this,{category:n,sort:e},Wn(this,vn,"f").isBookmark)}))},_n=function(){document.addEventListener(P,(t=>{const{category:n,sort:e}=t.detail;Wn(this,bn,"m",kn).call(this,{category:n,sort:e},Wn(this,vn,"f").isBookmark)}))},Zn=function(){document.addEventListener(H,(()=>{const{category:t,sort:n}=Wn(this,wn,"f");Wn(this,bn,"m",kn).call(this,{category:t,sort:n},Wn(this,vn,"f").isBookmark)}))},jn=function(){document.addEventListener(tn,(t=>{const{restaurant:n}=t.detail;Wn(this,yn,"f").update(n),Wn(this,bn,"m",xn).call(this)})),document.addEventListener(zt,(t=>{const{restaurant:n}=t.detail;Wn(this,yn,"f").update(n),Wn(this,bn,"m",xn).call(this);const{category:e,sort:r}=Wn(this,wn,"f");Wn(this,bn,"m",kn).call(this,{category:e,sort:r},Wn(this,vn,"f").isBookmark)}))},Ln=function(){document.addEventListener(Rt,(t=>{const{id:n}=t.detail;Wn(this,yn,"f").delete(n),Wn(this,bn,"m",xn).call(this);const{category:e,sort:r}=Wn(this,wn,"f");Wn(this,bn,"m",kn).call(this,{category:e,sort:r},Wn(this,vn,"f").isBookmark)}))};var Pn=e(382),Yn={};Yn.styleTagTransform=p(),Yn.setAttributes=c(),Yn.insert=i().bind(null,"head"),Yn.domAPI=a(),Yn.insertStyleElement=A(),n()(Pn.Z,Yn),Pn.Z&&Pn.Z.locals&&Pn.Z.locals,e.p;var qn,zn,Rn,In=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};class Dn extends HTMLElement{constructor(){super(),qn.add(this);const t=document.querySelector("#template-header").content.cloneNode(!0);this.appendChild(t)}connectedCallback(){this.querySelector(".gnb__button").addEventListener("click",(()=>{const t=document.querySelector("app-modal"),n=In(this,qn,"m",zn).call(this),e=In(this,qn,"m",Rn).call(this);t.openModal({title:n,body:e})}))}}qn=new WeakSet,zn=function(){const t=document.createElement("h2");return t.setAttribute("class","modal-title text-title"),t.textContent="새로운 음식점",t},Rn=function(){const t=new hn;return t.setAttribute("is","app-restaurant-form"),t.setAttribute("id","restaurant-form"),t};var Nn=e(400),Hn={};Hn.styleTagTransform=p(),Hn.setAttributes=c(),Hn.insert=i().bind(null,"head"),Hn.domAPI=a(),Hn.insertStyleElement=A(),n()(Nn.Z,Hn),Nn.Z&&Nn.Z.locals&&Nn.Z.locals;var Fn,On,Un,Xn,Gn=function(t,n,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof n?t!==n||!a:!n.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(t,e):a?a.value=e:n.set(t,e),e},Vn=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};class $n extends HTMLElement{constructor(){super(),Fn.add(this),On.set(this,void 0),Un.set(this,void 0);const t=document.querySelector("#template-modal").content.cloneNode(!0);this.appendChild(t),this.classList.add("modal"),Gn(this,On,this.querySelector(".modal-backdrop"),"f"),Gn(this,Un,this.querySelector(".modal-container"),"f")}connectedCallback(){this.addEventListener(pn,Vn(this,Fn,"m",Xn).bind(this)),this.addEventListener(un,Vn(this,Fn,"m",Xn).bind(this)),this.addEventListener(Rt,Vn(this,Fn,"m",Xn).bind(this)),this.addEventListener(It,Vn(this,Fn,"m",Xn).bind(this)),Vn(this,On,"f").addEventListener("click",Vn(this,Fn,"m",Xn).bind(this))}openModal({title:t,body:n}){Vn(this,Un,"f").innerHTML="",t&&Vn(this,Un,"f").appendChild(t),n&&Vn(this,Un,"f").appendChild(n),this.classList.add("modal--open")}}On=new WeakMap,Un=new WeakMap,Fn=new WeakSet,Xn=function(){Vn(this,Un,"f").innerHTML="",this.classList.remove("modal--open")};var Jn=e(555),Qn={};Qn.styleTagTransform=p(),Qn.setAttributes=c(),Qn.insert=i().bind(null,"head"),Qn.domAPI=a(),Qn.insertStyleElement=A(),n()(Jn.Z,Qn),Jn.Z&&Jn.Z.locals&&Jn.Z.locals;var Kn,te,ne,ee=function(t,n,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?t!==n||!r:!n.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(t):r?r.value:n.get(t)};class re extends HTMLUListElement{constructor(){super(),Kn.add(this),te.set(this,void 0),this.classList.add("restaurant-list")}get restaurants(){return[...ee(this,te,"f")]}set restaurants(t){(function(t,n,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof n?t!==n||!a:!n.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===r?a.call(t,e):a?a.value=e:n.set(t,e)})(this,te,t?[...t]:[],"f"),ee(this,Kn,"m",ne).call(this)}}te=new WeakMap,Kn=new WeakSet,ne=function(){this.innerHTML="";const t=document.createDocumentFragment();this.restaurants?.forEach((n=>{const e=new nn(n);t.appendChild(e)})),this.appendChild(t)},window.customElements.define("app-gnb",Dn),window.customElements.define("app-modal",$n),window.customElements.define("app-select",S,{extends:"select"}),window.customElements.define("app-restaurant-form",hn,{extends:"form"}),window.customElements.define("app-restaurant-list",re,{extends:"ul"}),window.customElements.define("app-restaurant-item",nn,{extends:"li"}),window.customElements.define("app-category-image",it,{extends:"img"}),window.customElements.define("app-bookmark-button",bt,{extends:"button"}),window.customElements.define("app-restaurant-detail",Dt),window.customElements.define("app-restaurant-filters",Y),window.customElements.define("app-bookmark-tab",F),(new class{constructor(){bn.add(this),wn.set(this,void 0),vn.set(this,void 0),Cn.set(this,void 0),yn.set(this,void 0),Mn(this,wn,document.querySelector("app-restaurant-filters"),"f"),Mn(this,vn,document.querySelector("app-bookmark-tab"),"f"),Mn(this,Cn,document.querySelector("#restaurant-list"),"f"),Mn(this,yn,new gn,"f")}async start(){const{category:t,sort:n}=Wn(this,wn,"f");Wn(this,bn,"m",Bn).call(this),Wn(this,bn,"m",kn).call(this,{category:t,sort:n}),Wn(this,bn,"m",Tn).call(this)}}).start()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Y2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0FwcC5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9Cb29rbWFya1RhYi9Cb29rbWFya1RhYi5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9HTkIvR05CLmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL01vZGFsL01vZGFsLmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnREZXRhaWwvUmVzdGF1cmFudERldGFpbC5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50RmlsdGVycy9SZXN0YXVyYW50RmlsdGVycy5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50Rm9ybS9SZXN0YXVyYW50Rm9ybS5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50SXRlbS9Cb29rbWFya0J1dHRvbi9Cb29rbWFya0J1dHRvbi5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50SXRlbS9DYXRlZ29yeUljb24vQ2F0ZWdvcnlJY29uLmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRJdGVtL1Jlc3RhdXJhbnRJdGVtLmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRMaXN0L1Jlc3RhdXJhbnRMaXN0LmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1NlbGVjdC9TZWxlY3QuY3NzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvZ2xvYmFsLmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvZ2xvYmFsLmNzcz9mMWE0Iiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvQXBwLmNzcz81NTYxIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudEZpbHRlcnMvUmVzdGF1cmFudEZpbHRlcnMuY3NzP2NkNzMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvc3RhdGljcy9jb25zdGFudHMvc2VsZWN0T3B0aW9ucy5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1NlbGVjdC9TZWxlY3QuY3NzPzhlNzgiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9TZWxlY3QvU2VsZWN0LmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudEZpbHRlcnMvUmVzdGF1cmFudEZpbHRlcnMuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9Cb29rbWFya1RhYi9Cb29rbWFya1RhYi5jc3M/ODA0YSIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0Jvb2ttYXJrVGFiL0Jvb2ttYXJrVGFiLmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudEl0ZW0vUmVzdGF1cmFudEl0ZW0uY3NzPzk0MTciLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50SXRlbS9DYXRlZ29yeUljb24vQ2F0ZWdvcnlJY29uLmNzcz85Y2NmIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL3N0YXRpY3MvaW1ncy9jYXRlZ29yeS1rb3JlYW4ucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL3N0YXRpY3MvaW1ncy9jYXRlZ29yeS1jaGluZXNlLnBuZyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9zdGF0aWNzL2ltZ3MvY2F0ZWdvcnktamFwYW5lc2UucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL3N0YXRpY3MvaW1ncy9jYXRlZ29yeS13ZXN0ZXJuLnBuZyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9zdGF0aWNzL2ltZ3MvY2F0ZWdvcnktYXNpYW4ucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL3N0YXRpY3MvaW1ncy9jYXRlZ29yeS1ldGMucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudEl0ZW0vQ2F0ZWdvcnlJY29uL0NhdGVnb3J5SWNvbi5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRJdGVtL0Jvb2ttYXJrQnV0dG9uL0Jvb2ttYXJrQnV0dG9uLmNzcz8zNWMwIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL3N0YXRpY3MvaW1ncy9mYXZvcml0ZS1pY29uLWZpbGxlZC5wbmciLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvc3RhdGljcy9pbWdzL2Zhdm9yaXRlLWljb24tbGluZWQucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudEl0ZW0vQm9va21hcmtCdXR0b24vQm9va21hcmtCdXR0b24uanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50RGV0YWlsL1Jlc3RhdXJhbnREZXRhaWwuY3NzP2UxODQiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50RGV0YWlsL1Jlc3RhdXJhbnREZXRhaWwuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50SXRlbS9SZXN0YXVyYW50SXRlbS5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRGb3JtL1Jlc3RhdXJhbnRGb3JtLmNzcz9lMjUxIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudEZvcm0vUmVzdGF1cmFudEZvcm0uanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvZG9tYWluL1Jlc3RhdXJhbnRNYW5hZ2VyLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL3V0aWxzL2dldFVuaXF1ZUlELnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2RvbWFpbi9SZXN0YXVyYW50RmlsdGVycy50cyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0FwcC5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0dOQi9HTkIuY3NzP2IzNTQiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvc3RhdGljcy9pbWdzL2FkZC1idXR0b24ucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvR05CL0dOQi5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL01vZGFsL01vZGFsLmNzcz81NTlhIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvTW9kYWwvTW9kYWwuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50TGlzdC9SZXN0YXVyYW50TGlzdC5jc3M/YjE1MSIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRMaXN0L1Jlc3RhdXJhbnRMaXN0LmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLyog7Lm07YWM6rOg66asL+ygleugrCDtlYTthLAgKi9cXG4ucmVzdGF1cmFudC1maWx0ZXItY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuXFxuICBwYWRkaW5nOiAwIDE2cHg7XFxuICBtYXJnaW4tdG9wOiAyNHB4O1xcbn1cXG5cXG4ucmVzdGF1cmFudC1maWx0ZXItY29udGFpbmVyIHNlbGVjdCB7XFxuICBoZWlnaHQ6IDQ0cHg7XFxuICBtaW4td2lkdGg6IDEyNXB4O1xcblxcbiAgYm9yZGVyOiAxcHggc29saWQgI2QwZDVkZDtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcblxcbiAgZm9udC1zaXplOiAxNnB4O1xcbn1cXG5cXG4ucmVzdGF1cmFudC1maWx0ZXIge1xcbiAgcGFkZGluZzogOHB4O1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9BcHAuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLGVBQWU7QUFDZjtFQUNFLGFBQWE7RUFDYiw4QkFBOEI7O0VBRTlCLGVBQWU7RUFDZixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxZQUFZO0VBQ1osZ0JBQWdCOztFQUVoQix5QkFBeUI7RUFDekIsa0JBQWtCO0VBQ2xCLHVCQUF1Qjs7RUFFdkIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLFlBQVk7QUFDZFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvKiDsubTthYzqs6Drpqwv7KCV66CsIO2VhO2EsCAqL1xcbi5yZXN0YXVyYW50LWZpbHRlci1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG5cXG4gIHBhZGRpbmc6IDAgMTZweDtcXG4gIG1hcmdpbi10b3A6IDI0cHg7XFxufVxcblxcbi5yZXN0YXVyYW50LWZpbHRlci1jb250YWluZXIgc2VsZWN0IHtcXG4gIGhlaWdodDogNDRweDtcXG4gIG1pbi13aWR0aDogMTI1cHg7XFxuXFxuICBib3JkZXI6IDFweCBzb2xpZCAjZDBkNWRkO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuXFxuICBmb250LXNpemU6IDE2cHg7XFxufVxcblxcbi5yZXN0YXVyYW50LWZpbHRlciB7XFxuICBwYWRkaW5nOiA4cHg7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5ib29rbWFyay10YWItY29udGFpbmVyIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogMCAxNnB4O1xcbiAgbWFyZ2luLXRvcDogMjJweDtcXG59XFxuXFxuLmJvb2ttYXJrLXRhYiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLnRhYi1pdGVtIHtcXG4gIHdpZHRoOiA1MCU7XFxuICBtaW4taGVpZ2h0OiAxMDAlO1xcbiAgcGFkZGluZzogOXB4IDA7XFxuXFxuICBmb250LXNpemU6IDE2cHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBjb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcblxcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHZhcigtLWdyZXktMjAwKTtcXG59XFxuXFxuLnRhYi1pdGVtLmFjdGl2ZSB7XFxuICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxuXFxuICBib3JkZXItYm90dG9tOiAycHggc29saWQgdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL0Jvb2ttYXJrVGFiL0Jvb2ttYXJrVGFiLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFdBQVc7RUFDWCxlQUFlO0VBQ2YsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLFVBQVU7RUFDVixnQkFBZ0I7RUFDaEIsY0FBYzs7RUFFZCxlQUFlO0VBQ2Ysa0JBQWtCO0VBQ2xCLHNCQUFzQjs7RUFFdEIsd0NBQXdDO0FBQzFDOztBQUVBO0VBQ0UsMkJBQTJCOztFQUUzQiw2Q0FBNkM7QUFDL0NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmJvb2ttYXJrLXRhYi1jb250YWluZXIge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiAwIDE2cHg7XFxuICBtYXJnaW4tdG9wOiAyMnB4O1xcbn1cXG5cXG4uYm9va21hcmstdGFiIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4udGFiLWl0ZW0ge1xcbiAgd2lkdGg6IDUwJTtcXG4gIG1pbi1oZWlnaHQ6IDEwMCU7XFxuICBwYWRkaW5nOiA5cHggMDtcXG5cXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTMwMCk7XFxuXFxuICBib3JkZXItYm90dG9tOiAycHggc29saWQgdmFyKC0tZ3JleS0yMDApO1xcbn1cXG5cXG4udGFiLWl0ZW0uYWN0aXZlIHtcXG4gIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXG5cXG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLyogR05CICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbi5nbmIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBoZWlnaHQ6IDY0cHg7XFxuXFxuICBwYWRkaW5nOiAwIDE2cHg7XFxuXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXG59XFxuXFxuLmduYl9fdGl0bGUge1xcbiAgY29sb3I6ICNmY2ZjZmQ7XFxufVxcblxcbi5nbmJfX2J1dHRvbiB7XFxuICBoZWlnaHQ6IDQwcHg7XFxuXFxuICBib3JkZXI6IG5vbmU7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG5cXG4gIGZvbnQtc2l6ZTogMjRweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmduYl9fYnV0dG9uIGltZyB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiA0MHB4O1xcbiAgaGVpZ2h0OiA0MHB4O1xcbiAgb2JqZWN0LWZpdDogY29udGFpbjtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvR05CL0dOQi5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsbURBQW1EO0FBQ25EO0VBQ0UsYUFBYTtFQUNiLDhCQUE4QjtFQUM5QixtQkFBbUI7RUFDbkIsWUFBWTs7RUFFWixlQUFlOztFQUVmLHNDQUFzQztBQUN4Qzs7QUFFQTtFQUNFLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxZQUFZOztFQUVaLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsdUJBQXVCOztFQUV2QixlQUFlO0VBQ2YsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGNBQWM7RUFDZCxXQUFXO0VBQ1gsWUFBWTtFQUNaLG1CQUFtQjtBQUNyQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvKiBHTkIgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxuLmduYiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGhlaWdodDogNjRweDtcXG5cXG4gIHBhZGRpbmc6IDAgMTZweDtcXG5cXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcbn1cXG5cXG4uZ25iX190aXRsZSB7XFxuICBjb2xvcjogI2ZjZmNmZDtcXG59XFxuXFxuLmduYl9fYnV0dG9uIHtcXG4gIGhlaWdodDogNDBweDtcXG5cXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcblxcbiAgZm9udC1zaXplOiAyNHB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uZ25iX19idXR0b24gaW1nIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2lkdGg6IDQwcHg7XFxuICBoZWlnaHQ6IDQwcHg7XFxuICBvYmplY3QtZml0OiBjb250YWluO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubW9kYWwge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLm1vZGFsLS1vcGVuIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcblxcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcblxcbiAgaGVpZ2h0OiAxMDB2aDtcXG59XFxuXFxuLm1vZGFsLWJhY2tkcm9wIHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG5cXG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4zNSk7XFxufVxcblxcbi5tb2RhbC1jb250YWluZXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm90dG9tOiAwO1xcblxcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xcbiAgbWF4LWhlaWdodDogOTAlO1xcblxcbiAgcGFkZGluZzogMzJweCAxNnB4O1xcblxcbiAgYm9yZGVyLXJhZGl1czogOHB4IDhweCAwcHggMHB4O1xcbiAgYmFja2dyb3VuZDogdmFyKC0tZ3JleS0xMDApO1xcblxcbiAgb3ZlcmZsb3cteTogc2Nyb2xsO1xcbn1cXG5cXG4ubW9kYWwtdGl0bGUge1xcbiAgbWFyZ2luLWJvdHRvbTogMzZweDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvTW9kYWwvTW9kYWwuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsY0FBYzs7RUFFZCxlQUFlO0VBQ2YsTUFBTTtFQUNOLFFBQVE7RUFDUixTQUFTO0VBQ1QsT0FBTzs7RUFFUCxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsTUFBTTtFQUNOLFFBQVE7RUFDUixTQUFTO0VBQ1QsT0FBTzs7RUFFUCwrQkFBK0I7QUFDakM7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsU0FBUzs7RUFFVCxXQUFXO0VBQ1gsbUJBQW1CO0VBQ25CLGVBQWU7O0VBRWYsa0JBQWtCOztFQUVsQiw4QkFBOEI7RUFDOUIsMkJBQTJCOztFQUUzQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxtQkFBbUI7QUFDckJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLm1vZGFsIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5tb2RhbC0tb3BlbiB7XFxuICBkaXNwbGF5OiBibG9jaztcXG5cXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG5cXG4gIGhlaWdodDogMTAwdmg7XFxufVxcblxcbi5tb2RhbC1iYWNrZHJvcCB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB0b3A6IDA7XFxuICByaWdodDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDA7XFxuXFxuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMzUpO1xcbn1cXG5cXG4ubW9kYWwtY29udGFpbmVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvdHRvbTogMDtcXG5cXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiBmaXQtY29udGVudDtcXG4gIG1heC1oZWlnaHQ6IDkwJTtcXG5cXG4gIHBhZGRpbmc6IDMycHggMTZweDtcXG5cXG4gIGJvcmRlci1yYWRpdXM6IDhweCA4cHggMHB4IDBweDtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWdyZXktMTAwKTtcXG5cXG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcXG59XFxuXFxuLm1vZGFsLXRpdGxlIHtcXG4gIG1hcmdpbi1ib3R0b206IDM2cHg7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5yZXN0YXVyYW50LWRldGFpbCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGdhcDogMTZweDtcXG59XFxuXFxuLnJlc3RhdXJhbnQtZGV0YWlsID4gLnJlc3RhdXJhbnRfX2luZm8ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBnYXA6IDE2cHg7XFxuXFxuICBtYXJnaW4tYm90dG9tOiAzMnB4O1xcbn1cXG5cXG4ucmVzdGF1cmFudC1kZXRhaWwgPiAucmVzdGF1cmFudF9faW5mbyA+IC5yZXN0YXVyYW50X19kZXNjcmlwdGlvbiB7XFxuICBwYWRkaW5nOiAwO1xcbiAgdGV4dC1vdmVyZmxvdzogdW5zZXQ7XFxuICAtd2Via2l0LWxpbmUtY2xhbXA6IHVuc2V0O1xcbn1cXG5cXG4ucmVzdGF1cmFudC1kZXRhaWwgPiAucmVzdGF1cmFudF9faW5mbyA+IC5yZXN0YXVyYW50X19ib29rbWFyayB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDMycHg7XFxuICByaWdodDogMzJweDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudERldGFpbC9SZXN0YXVyYW50RGV0YWlsLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsU0FBUztBQUNYOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixTQUFTOztFQUVULG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLFVBQVU7RUFDVixvQkFBb0I7RUFDcEIseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLFNBQVM7RUFDVCxXQUFXO0FBQ2JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnJlc3RhdXJhbnQtZGV0YWlsIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgZ2FwOiAxNnB4O1xcbn1cXG5cXG4ucmVzdGF1cmFudC1kZXRhaWwgPiAucmVzdGF1cmFudF9faW5mbyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGdhcDogMTZweDtcXG5cXG4gIG1hcmdpbi1ib3R0b206IDMycHg7XFxufVxcblxcbi5yZXN0YXVyYW50LWRldGFpbCA+IC5yZXN0YXVyYW50X19pbmZvID4gLnJlc3RhdXJhbnRfX2Rlc2NyaXB0aW9uIHtcXG4gIHBhZGRpbmc6IDA7XFxuICB0ZXh0LW92ZXJmbG93OiB1bnNldDtcXG4gIC13ZWJraXQtbGluZS1jbGFtcDogdW5zZXQ7XFxufVxcblxcbi5yZXN0YXVyYW50LWRldGFpbCA+IC5yZXN0YXVyYW50X19pbmZvID4gLnJlc3RhdXJhbnRfX2Jvb2ttYXJrIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMzJweDtcXG4gIHJpZ2h0OiAzMnB4O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIvKiDsubTthYzqs6Drpqwv7KCV66CsIO2VhO2EsCAqL1xcbi5yZXN0YXVyYW50LWZpbHRlci1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG5cXG4gIHBhZGRpbmc6IDAgMTZweDtcXG4gIG1hcmdpbi10b3A6IDM2cHg7XFxufVxcblxcbi5yZXN0YXVyYW50LWZpbHRlci1jb250YWluZXIgc2VsZWN0IHtcXG4gIGhlaWdodDogNDRweDtcXG4gIG1pbi13aWR0aDogMTI1cHg7XFxuXFxuICBib3JkZXI6IDFweCBzb2xpZCAjZDBkNWRkO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuXFxuICBmb250LXNpemU6IDE2cHg7XFxufVxcblxcbi5yZXN0YXVyYW50LWZpbHRlciB7XFxuICBwYWRkaW5nOiA4cHg7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRGaWx0ZXJzL1Jlc3RhdXJhbnRGaWx0ZXJzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxlQUFlO0FBQ2Y7RUFDRSxhQUFhO0VBQ2IsOEJBQThCOztFQUU5QixlQUFlO0VBQ2YsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsWUFBWTtFQUNaLGdCQUFnQjs7RUFFaEIseUJBQXlCO0VBQ3pCLGtCQUFrQjtFQUNsQix1QkFBdUI7O0VBRXZCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxZQUFZO0FBQ2RcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyog7Lm07YWM6rOg66asL+ygleugrCDtlYTthLAgKi9cXG4ucmVzdGF1cmFudC1maWx0ZXItY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuXFxuICBwYWRkaW5nOiAwIDE2cHg7XFxuICBtYXJnaW4tdG9wOiAzNnB4O1xcbn1cXG5cXG4ucmVzdGF1cmFudC1maWx0ZXItY29udGFpbmVyIHNlbGVjdCB7XFxuICBoZWlnaHQ6IDQ0cHg7XFxuICBtaW4td2lkdGg6IDEyNXB4O1xcblxcbiAgYm9yZGVyOiAxcHggc29saWQgI2QwZDVkZDtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcblxcbiAgZm9udC1zaXplOiAxNnB4O1xcbn1cXG5cXG4ucmVzdGF1cmFudC1maWx0ZXIge1xcbiAgcGFkZGluZzogOHB4O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuaW5wdXQtY29udGFpbmVyIHtcXG4gIGhlaWdodDogODUlO1xcblxcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG59XFxuXFxuLmZvcm0taXRlbSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG5cXG4gIG1hcmdpbi1ib3R0b206IDM2cHg7XFxufVxcblxcbi5mb3JtLWl0ZW0gbGFiZWwge1xcbiAgY29sb3I6IHZhcigtLWdyZXktNDAwKTtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG59XFxuXFxuLmZvcm0taXRlbS0tcmVxdWlyZWQgbGFiZWw6OmFmdGVyIHtcXG4gIHBhZGRpbmctbGVmdDogNHB4O1xcblxcbiAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcbiAgY29udGVudDogJyonO1xcbn1cXG5cXG4uZm9ybS1pdGVtIC5oZWxwLXRleHQge1xcbiAgY29sb3I6IHZhcigtLWdyZXktMzAwKTtcXG59XFxuXFxuLmZvcm0taXRlbSBpbnB1dCxcXG4uZm9ybS1pdGVtIHRleHRhcmVhLFxcbi5mb3JtLWl0ZW0gc2VsZWN0IHtcXG4gIHBhZGRpbmc6IDhweDtcXG4gIG1hcmdpbjogNnB4IDA7XFxuXFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTIwMCk7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuXFxuICBmb250LXNpemU6IDE2cHg7XFxufVxcblxcbi5mb3JtLWl0ZW0gdGV4dGFyZWEge1xcbiAgcmVzaXplOiBub25lO1xcbn1cXG5cXG4uZm9ybS1pdGVtIHNlbGVjdCB7XFxuICBoZWlnaHQ6IDQ0cHg7XFxuXFxuICBwYWRkaW5nOiA4cHg7XFxuXFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTIwMCk7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuXFxuICBjb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcbn1cXG5cXG5pbnB1dFtuYW1lPSduYW1lJ10sXFxuaW5wdXRbbmFtZT0nbGluayddIHtcXG4gIGhlaWdodDogNDRweDtcXG59XFxuXFxuLmJ1dHRvbi1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLmJ1dHRvbiB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogNDRweDtcXG5cXG4gIG1hcmdpbi1yaWdodDogMTZweDtcXG5cXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG5cXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5idXR0b246bGFzdC1jaGlsZCB7XFxuICBtYXJnaW4tcmlnaHQ6IDA7XFxufVxcblxcbi5idXR0b24tLXNlY29uZGFyeSB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTMwMCk7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG5cXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTMwMCk7XFxufVxcblxcbi5idXR0b24tLXByaW1hcnkge1xcbiAgYmFja2dyb3VuZDogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxuXFxuICBjb2xvcjogdmFyKC0tZ3JleS0xMDApO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50Rm9ybS9SZXN0YXVyYW50Rm9ybS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxXQUFXOztFQUVYLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7O0VBRXRCLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLHNCQUFzQjtFQUN0QixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsaUJBQWlCOztFQUVqQiwyQkFBMkI7RUFDM0IsWUFBWTtBQUNkOztBQUVBO0VBQ0Usc0JBQXNCO0FBQ3hCOztBQUVBOzs7RUFHRSxZQUFZO0VBQ1osYUFBYTs7RUFFYixpQ0FBaUM7RUFDakMsa0JBQWtCOztFQUVsQixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUVBO0VBQ0UsWUFBWTs7RUFFWixZQUFZOztFQUVaLGlDQUFpQztFQUNqQyxrQkFBa0I7O0VBRWxCLHNCQUFzQjtBQUN4Qjs7QUFFQTs7RUFFRSxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTs7RUFFWixrQkFBa0I7O0VBRWxCLFlBQVk7RUFDWixrQkFBa0I7O0VBRWxCLGdCQUFnQjtFQUNoQixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGlDQUFpQztFQUNqQyx1QkFBdUI7O0VBRXZCLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGdDQUFnQzs7RUFFaEMsc0JBQXNCO0FBQ3hCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5pbnB1dC1jb250YWluZXIge1xcbiAgaGVpZ2h0OiA4NSU7XFxuXFxuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbn1cXG5cXG4uZm9ybS1pdGVtIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcblxcbiAgbWFyZ2luLWJvdHRvbTogMzZweDtcXG59XFxuXFxuLmZvcm0taXRlbSBsYWJlbCB7XFxuICBjb2xvcjogdmFyKC0tZ3JleS00MDApO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbn1cXG5cXG4uZm9ybS1pdGVtLS1yZXF1aXJlZCBsYWJlbDo6YWZ0ZXIge1xcbiAgcGFkZGluZy1sZWZ0OiA0cHg7XFxuXFxuICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxuICBjb250ZW50OiAnKic7XFxufVxcblxcbi5mb3JtLWl0ZW0gLmhlbHAtdGV4dCB7XFxuICBjb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcbn1cXG5cXG4uZm9ybS1pdGVtIGlucHV0LFxcbi5mb3JtLWl0ZW0gdGV4dGFyZWEsXFxuLmZvcm0taXRlbSBzZWxlY3Qge1xcbiAgcGFkZGluZzogOHB4O1xcbiAgbWFyZ2luOiA2cHggMDtcXG5cXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWdyZXktMjAwKTtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG5cXG4gIGZvbnQtc2l6ZTogMTZweDtcXG59XFxuXFxuLmZvcm0taXRlbSB0ZXh0YXJlYSB7XFxuICByZXNpemU6IG5vbmU7XFxufVxcblxcbi5mb3JtLWl0ZW0gc2VsZWN0IHtcXG4gIGhlaWdodDogNDRweDtcXG5cXG4gIHBhZGRpbmc6IDhweDtcXG5cXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWdyZXktMjAwKTtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG5cXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTMwMCk7XFxufVxcblxcbmlucHV0W25hbWU9J25hbWUnXSxcXG5pbnB1dFtuYW1lPSdsaW5rJ10ge1xcbiAgaGVpZ2h0OiA0NHB4O1xcbn1cXG5cXG4uYnV0dG9uLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5cXG4uYnV0dG9uIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiA0NHB4O1xcblxcbiAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xcblxcbiAgYm9yZGVyOiBub25lO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcblxcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmJ1dHRvbjpsYXN0LWNoaWxkIHtcXG4gIG1hcmdpbi1yaWdodDogMDtcXG59XFxuXFxuLmJ1dHRvbi0tc2Vjb25kYXJ5IHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWdyZXktMzAwKTtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcblxcbiAgY29sb3I6IHZhcigtLWdyZXktMzAwKTtcXG59XFxuXFxuLmJ1dHRvbi0tcHJpbWFyeSB7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXG5cXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTEwMCk7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5yZXN0YXVyYW50X19ib29rbWFyayB7XFxuICBiYWNrZ3JvdW5kOiBub25lO1xcbiAgYm9yZGVyOiBub25lO1xcbn1cXG5cXG4ucmVzdGF1cmFudF9fYm9va21hcmsgPiBpbWcge1xcbiAgd2lkdGg6IDMycHg7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRJdGVtL0Jvb2ttYXJrQnV0dG9uL0Jvb2ttYXJrQnV0dG9uLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGdCQUFnQjtFQUNoQixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxXQUFXO0FBQ2JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnJlc3RhdXJhbnRfX2Jvb2ttYXJrIHtcXG4gIGJhY2tncm91bmQ6IG5vbmU7XFxuICBib3JkZXI6IG5vbmU7XFxufVxcblxcbi5yZXN0YXVyYW50X19ib29rbWFyayA+IGltZyB7XFxuICB3aWR0aDogMzJweDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmNhdGVnb3J5LWljb24ge1xcbiAgd2lkdGg6IDM2cHg7XFxuICBoZWlnaHQ6IDM2cHg7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRJdGVtL0NhdGVnb3J5SWNvbi9DYXRlZ29yeUljb24uY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsV0FBVztFQUNYLFlBQVk7QUFDZFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuY2F0ZWdvcnktaWNvbiB7XFxuICB3aWR0aDogMzZweDtcXG4gIGhlaWdodDogMzZweDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnJlc3RhdXJhbnQge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcblxcbiAgcGFkZGluZzogMTZweCA4cHg7XFxuXFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2U5ZWFlZDtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX2NhdGVnb3J5IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB3aWR0aDogNjRweDtcXG4gIGhlaWdodDogNjRweDtcXG4gIG1pbi13aWR0aDogNjRweDtcXG4gIG1pbi1oZWlnaHQ6IDY0cHg7XFxuXFxuICBtYXJnaW4tcmlnaHQ6IDE2cHg7XFxuXFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1saWdodGVuLWNvbG9yKTtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX2luZm8ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxuXFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX25hbWUge1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG4ucmVzdGF1cmFudF9fZGlzdGFuY2Uge1xcbiAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcbn1cXG5cXG4ucmVzdGF1cmFudF9fZGVzY3JpcHRpb24ge1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuXFxuICBwYWRkaW5nLXRvcDogOHB4O1xcblxcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcbiAgLXdlYmtpdC1saW5lLWNsYW1wOiAyO1xcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudEl0ZW0vUmVzdGF1cmFudEl0ZW0uY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsYUFBYTtFQUNiLHVCQUF1Qjs7RUFFdkIsaUJBQWlCOztFQUVqQixnQ0FBZ0M7QUFDbEM7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtFQUNuQixXQUFXO0VBQ1gsWUFBWTtFQUNaLGVBQWU7RUFDZixnQkFBZ0I7O0VBRWhCLGtCQUFrQjs7RUFFbEIsa0JBQWtCO0VBQ2xCLGdDQUFnQztBQUNsQzs7QUFFQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsMkJBQTJCOztFQUUzQixXQUFXO0FBQ2I7O0FBRUE7RUFDRSxTQUFTO0FBQ1g7O0FBRUE7RUFDRSwyQkFBMkI7QUFDN0I7O0FBRUE7RUFDRSxvQkFBb0I7O0VBRXBCLGdCQUFnQjs7RUFFaEIsZ0JBQWdCO0VBQ2hCLHVCQUF1QjtFQUN2QixxQkFBcUI7RUFDckIsNEJBQTRCO0FBQzlCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5yZXN0YXVyYW50IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG5cXG4gIHBhZGRpbmc6IDE2cHggOHB4O1xcblxcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlOWVhZWQ7XFxufVxcblxcbi5yZXN0YXVyYW50X19jYXRlZ29yeSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgd2lkdGg6IDY0cHg7XFxuICBoZWlnaHQ6IDY0cHg7XFxuICBtaW4td2lkdGg6IDY0cHg7XFxuICBtaW4taGVpZ2h0OiA2NHB4O1xcblxcbiAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xcblxcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgYmFja2dyb3VuZDogdmFyKC0tbGlnaHRlbi1jb2xvcik7XFxufVxcblxcbi5yZXN0YXVyYW50X19pbmZvIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcblxcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcbi5yZXN0YXVyYW50X19uYW1lIHtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX2Rpc3RhbmNlIHtcXG4gIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX2Rlc2NyaXB0aW9uIHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcblxcbiAgcGFkZGluZy10b3A6IDhweDtcXG5cXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG4gIC13ZWJraXQtbGluZS1jbGFtcDogMjtcXG4gIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi8qIOydjOyLneygkCDrqqnroZ0gKi9cXG4ucmVzdGF1cmFudC1saXN0LWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG5cXG4gIHBhZGRpbmc6IDAgMTZweDtcXG4gIG1hcmdpbjogMTZweCAwO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50TGlzdC9SZXN0YXVyYW50TGlzdC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsV0FBVztBQUNYO0VBQ0UsYUFBYTtFQUNiLHNCQUFzQjs7RUFFdEIsZUFBZTtFQUNmLGNBQWM7QUFDaEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyog7J2M7Iud7KCQIOuqqeuhnSAqL1xcbi5yZXN0YXVyYW50LWxpc3QtY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcblxcbiAgcGFkZGluZzogMCAxNnB4O1xcbiAgbWFyZ2luOiAxNnB4IDA7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcInNlbGVjdCB7XFxuICBwYWRkaW5nOiA4cHg7XFxuICBtYXJnaW46IDZweCAwO1xcblxcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZ3JleS0yMDApO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcblxcbiAgZm9udC1zaXplOiAxNnB4O1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9TZWxlY3QvU2VsZWN0LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFlBQVk7RUFDWixhQUFhOztFQUViLGlDQUFpQztFQUNqQyxrQkFBa0I7O0VBRWxCLGVBQWU7QUFDakJcIixcInNvdXJjZXNDb250ZW50XCI6W1wic2VsZWN0IHtcXG4gIHBhZGRpbmc6IDhweDtcXG4gIG1hcmdpbjogNnB4IDA7XFxuXFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTIwMCk7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuXFxuICBmb250LXNpemU6IDE2cHg7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIioge1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbnVsLFxcbmxpIHtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcblxcbmh0bWwsXFxuYm9keSB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG5cXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAxNnB4O1xcblxcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbXMtdXNlLXNlbGVjdDogbm9uZTtcXG4gIHVzZXItc2VsZWN0OiBub25lO1xcbn1cXG5cXG4vKiBDb2xvcnMgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxuOnJvb3Qge1xcbiAgLS1wcmltYXJ5LWNvbG9yOiAjZWM0YTBhO1xcbiAgLS1saWdodGVuLWNvbG9yOiAjZjZhODhhO1xcbiAgLS1ncmV5LTEwMDogI2ZmZmZmZjtcXG4gIC0tZ3JleS0yMDA6ICNkMGQ1ZGQ7XFxuICAtLWdyZXktMzAwOiAjNjY3MDg1O1xcbiAgLS1ncmV5LTQwMDogIzM0NDA1NDtcXG4gIC0tZ3JleS01MDA6ICMwMDAwMDA7XFxufVxcblxcbi8qIFR5cG9ncmFwaHkgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cXG4udGV4dC10aXRsZSB7XFxuICBmb250LXNpemU6IDIwcHg7XFxuICBsaW5lLWhlaWdodDogMjRweDtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxufVxcblxcbi50ZXh0LXN1YnRpdGxlIHtcXG4gIGZvbnQtc2l6ZTogMThweDtcXG4gIGxpbmUtaGVpZ2h0OiAyOHB4O1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG59XFxuXFxuLnRleHQtYm9keSB7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBsaW5lLWhlaWdodDogMjRweDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxufVxcblxcbi50ZXh0LWNhcHRpb24ge1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XFxuICBmb250LXdlaWdodDogNDAwO1xcbn1cXG5cXG4uZHJhZ2dhYmxlIHtcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IGFsbDtcXG4gIC1tb3otdXNlci1zZWxlY3Q6IGFsbDtcXG4gIC1tcy11c2Utc2VsZWN0OiBhbGw7XFxuICB1c2VyLXNlbGVjdDogYWxsO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9nbG9iYWwuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsVUFBVTtFQUNWLFNBQVM7RUFDVCxzQkFBc0I7QUFDeEI7O0FBRUE7O0VBRUUsZ0JBQWdCO0FBQ2xCOztBQUVBOztFQUVFLFdBQVc7RUFDWCxZQUFZOztFQUVaLHVCQUF1QjtFQUN2QixlQUFlOztFQUVmLHlCQUF5QjtFQUN6QixzQkFBc0I7RUFDdEIsb0JBQW9CO0VBQ3BCLGlCQUFpQjtBQUNuQjs7QUFFQSxtREFBbUQ7QUFDbkQ7RUFDRSx3QkFBd0I7RUFDeEIsd0JBQXdCO0VBQ3hCLG1CQUFtQjtFQUNuQixtQkFBbUI7RUFDbkIsbUJBQW1CO0VBQ25CLG1CQUFtQjtFQUNuQixtQkFBbUI7QUFDckI7O0FBRUEsbURBQW1EO0FBQ25EO0VBQ0UsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSx3QkFBd0I7RUFDeEIscUJBQXFCO0VBQ3JCLG1CQUFtQjtFQUNuQixnQkFBZ0I7QUFDbEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKiB7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWFyZ2luOiAwO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxudWwsXFxubGkge1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG59XFxuXFxuaHRtbCxcXG5ib2R5IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcblxcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IDE2cHg7XFxuXFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tcy11c2Utc2VsZWN0OiBub25lO1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxufVxcblxcbi8qIENvbG9ycyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cXG46cm9vdCB7XFxuICAtLXByaW1hcnktY29sb3I6ICNlYzRhMGE7XFxuICAtLWxpZ2h0ZW4tY29sb3I6ICNmNmE4OGE7XFxuICAtLWdyZXktMTAwOiAjZmZmZmZmO1xcbiAgLS1ncmV5LTIwMDogI2QwZDVkZDtcXG4gIC0tZ3JleS0zMDA6ICM2NjcwODU7XFxuICAtLWdyZXktNDAwOiAjMzQ0MDU0O1xcbiAgLS1ncmV5LTUwMDogIzAwMDAwMDtcXG59XFxuXFxuLyogVHlwb2dyYXBoeSAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbi50ZXh0LXRpdGxlIHtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIGxpbmUtaGVpZ2h0OiAyNHB4O1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG59XFxuXFxuLnRleHQtc3VidGl0bGUge1xcbiAgZm9udC1zaXplOiAxOHB4O1xcbiAgbGluZS1oZWlnaHQ6IDI4cHg7XFxuICBmb250LXdlaWdodDogNjAwO1xcbn1cXG5cXG4udGV4dC1ib2R5IHtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIGxpbmUtaGVpZ2h0OiAyNHB4O1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG59XFxuXFxuLnRleHQtY2FwdGlvbiB7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBsaW5lLWhlaWdodDogMjBweDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxufVxcblxcbi5kcmFnZ2FibGUge1xcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogYWxsO1xcbiAgLW1vei11c2VyLXNlbGVjdDogYWxsO1xcbiAgLW1zLXVzZS1zZWxlY3Q6IGFsbDtcXG4gIHVzZXItc2VsZWN0OiBhbGw7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZ2xvYmFsLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZ2xvYmFsLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9BcHAuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9BcHAuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Jlc3RhdXJhbnRGaWx0ZXJzLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUmVzdGF1cmFudEZpbHRlcnMuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiY29uc3QgQ0FURUdPUllfRklMVEVSUyA9IFtcbiAgICB7IHZhbHVlOiAn7KCE7LK0Jywgb3B0aW9uOiAn7KCE7LK0JyB9LFxuICAgIHsgdmFsdWU6ICftlZzsi50nLCBvcHRpb246ICftlZzsi50nIH0sXG4gICAgeyB2YWx1ZTogJ+ykkeyLnScsIG9wdGlvbjogJ+ykkeyLnScgfSxcbiAgICB7IHZhbHVlOiAn7J287IudJywgb3B0aW9uOiAn7J287IudJyB9LFxuICAgIHsgdmFsdWU6ICfslpHsi50nLCBvcHRpb246ICfslpHsi50nIH0sXG4gICAgeyB2YWx1ZTogJ+yVhOyLnOyViCcsIG9wdGlvbjogJ+yVhOyLnOyViCcgfSxcbiAgICB7IHZhbHVlOiAn6riw7YOAJywgb3B0aW9uOiAn6riw7YOAJyB9LFxuXTtcbmNvbnN0IFNPUlRJTkdfRklMVEVSUyA9IFtcbiAgICB7IHZhbHVlOiAnbmFtZScsIG9wdGlvbjogJ+ydtOumhOyInCcgfSxcbiAgICB7IHZhbHVlOiAnZGlzdGFuY2UnLCBvcHRpb246ICfqsbDrpqzsiJwnIH0sXG5dO1xuY29uc3QgQ0FURUdPUklFUyA9IFtcbiAgICB7IHZhbHVlOiAnJywgb3B0aW9uOiAn7ISg7YOd7ZW0IOyjvOyEuOyalCcgfSxcbiAgICB7IHZhbHVlOiAn7ZWc7IudJywgb3B0aW9uOiAn7ZWc7IudJyB9LFxuICAgIHsgdmFsdWU6ICfspJHsi50nLCBvcHRpb246ICfspJHsi50nIH0sXG4gICAgeyB2YWx1ZTogJ+ydvOyLnScsIG9wdGlvbjogJ+ydvOyLnScgfSxcbiAgICB7IHZhbHVlOiAn7JaR7IudJywgb3B0aW9uOiAn7JaR7IudJyB9LFxuICAgIHsgdmFsdWU6ICfslYTsi5zslYgnLCBvcHRpb246ICfslYTsi5zslYgnIH0sXG4gICAgeyB2YWx1ZTogJ+q4sO2DgCcsIG9wdGlvbjogJ+q4sO2DgCcgfSxcbl07XG5jb25zdCBESVNUQU5DRVMgPSBbXG4gICAgeyB2YWx1ZTogNSwgb3B0aW9uOiAnNeu2hCDrgrQnIH0sXG4gICAgeyB2YWx1ZTogMTAsIG9wdGlvbjogJzEw67aEIOuCtCcgfSxcbiAgICB7IHZhbHVlOiAxNSwgb3B0aW9uOiAnMTXrtoQg64K0JyB9LFxuICAgIHsgdmFsdWU6IDIwLCBvcHRpb246ICcyMOu2hCDrgrQnIH0sXG4gICAgeyB2YWx1ZTogMzAsIG9wdGlvbjogJzMw67aEIOuCtCcgfSxcbl07XG5jb25zdCBTRUxFQ1RfT1BUSU9OUyA9IG5ldyBNYXAoW1xuICAgIFsnY2F0ZWdvcnlGaWx0ZXJzJywgQ0FURUdPUllfRklMVEVSU10sXG4gICAgWydzb3J0aW5nRmlsdGVycycsIFNPUlRJTkdfRklMVEVSU10sXG4gICAgWydjYXRlZ29yaWVzJywgQ0FURUdPUklFU10sXG4gICAgWydkaXN0YW5jZXMnLCBESVNUQU5DRVNdLFxuXSk7XG5leHBvcnQgZGVmYXVsdCBTRUxFQ1RfT1BUSU9OUztcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TZWxlY3QuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TZWxlY3QuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX1NlbGVjdF9pbnN0YW5jZXMsIF9TZWxlY3RfaGFuZGxlT25DaGFuZ2UsIF9TZWxlY3RfY3JlYXRlT3B0aW9ucywgX1NlbGVjdF9nZW5lcmF0ZU9wdGlvbnM7XG5pbXBvcnQgU0VMRUNUX09QVElPTlMgZnJvbSAnLi4vLi4vc3RhdGljcy9jb25zdGFudHMvc2VsZWN0T3B0aW9ucyc7XG5pbXBvcnQgJy4vU2VsZWN0LmNzcyc7XG5leHBvcnQgY29uc3QgU0VMRUNUX0VWRU5UUyA9IHtcbiAgICBvbmNoYW5nZTogJ3NlbGVjdE9uQ2hhbmdlJyxcbn07XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWxlY3QgZXh0ZW5kcyBIVE1MU2VsZWN0RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIF9TZWxlY3RfaW5zdGFuY2VzLmFkZCh0aGlzKTtcbiAgICB9XG4gICAgZ2V0IHR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZSgndHlwZScpO1xuICAgIH1cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9TZWxlY3RfaW5zdGFuY2VzLCBcIm1cIiwgX1NlbGVjdF9oYW5kbGVPbkNoYW5nZSkuYmluZCh0aGlzKSk7XG4gICAgfVxuICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjaygpIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfU2VsZWN0X2luc3RhbmNlcywgXCJtXCIsIF9TZWxlY3RfY3JlYXRlT3B0aW9ucykuY2FsbCh0aGlzKTtcbiAgICB9XG59XG5fU2VsZWN0X2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9TZWxlY3RfaGFuZGxlT25DaGFuZ2UgPSBmdW5jdGlvbiBfU2VsZWN0X2hhbmRsZU9uQ2hhbmdlKGUpIHtcbiAgICBjb25zdCB7IHZhbHVlIH0gPSBlLnRhcmdldDtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFNFTEVDVF9FVkVOVFMub25jaGFuZ2UsIHtcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIGlkOiB0aGlzLmlkLFxuICAgICAgICB9LFxuICAgIH0pKTtcbn0sIF9TZWxlY3RfY3JlYXRlT3B0aW9ucyA9IGZ1bmN0aW9uIF9TZWxlY3RfY3JlYXRlT3B0aW9ucygpIHtcbiAgICB0aGlzLmlubmVySFRNTCA9ICcnO1xuICAgIGNvbnN0IGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1NlbGVjdF9pbnN0YW5jZXMsIFwibVwiLCBfU2VsZWN0X2dlbmVyYXRlT3B0aW9ucykuY2FsbCh0aGlzKS5mb3JFYWNoKChvcHRpb24pID0+IGZyYWdtZW50LmFwcGVuZENoaWxkKG9wdGlvbikpO1xuICAgIHRoaXMuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xufSwgX1NlbGVjdF9nZW5lcmF0ZU9wdGlvbnMgPSBmdW5jdGlvbiBfU2VsZWN0X2dlbmVyYXRlT3B0aW9ucygpIHtcbiAgICBjb25zdCBvcHRpb25zID0gU0VMRUNUX09QVElPTlMuZ2V0KHRoaXMudHlwZSkgfHwgW107XG4gICAgcmV0dXJuIG9wdGlvbnMubWFwKCh7IHZhbHVlLCBvcHRpb24gfSkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICAgIGVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSBvcHRpb247XG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH0pO1xufTtcblNlbGVjdC5vYnNlcnZlZEF0dHJpYnV0ZXMgPSBbJ3R5cGUnXTtcbiIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfUmVzdGF1cmFudEZpbHRlcnNfaW5zdGFuY2VzLCBfUmVzdGF1cmFudEZpbHRlcnNfY2F0ZWdvcnlGaWx0ZXIsIF9SZXN0YXVyYW50RmlsdGVyc19zb3J0aW5nRmlsdGVyLCBfUmVzdGF1cmFudEZpbHRlcnNfaGFuZGxlU2VsZWN0T25DaGFuZ2U7XG5pbXBvcnQgJy4vUmVzdGF1cmFudEZpbHRlcnMuY3NzJztcbmltcG9ydCB7IFNFTEVDVF9FVkVOVFMgfSBmcm9tICcuLi9TZWxlY3QvU2VsZWN0JztcbmV4cG9ydCBjb25zdCBSRVNUQVVSQU5UX0ZJTFRFUlNfRVZFTlRTID0ge1xuICAgIGZpbHRlckNoYW5nZTogJ2ZpbHRlckNoYW5nZScsXG59O1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzdGF1cmFudEZpbHRlcnMgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIF9SZXN0YXVyYW50RmlsdGVyc19pbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICBfUmVzdGF1cmFudEZpbHRlcnNfY2F0ZWdvcnlGaWx0ZXIuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9SZXN0YXVyYW50RmlsdGVyc19zb3J0aW5nRmlsdGVyLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0ZW1wbGF0ZS1yZXN0YXVyYW50LWZpbHRlci1jb250YWluZXInKTtcbiAgICAgICAgY29uc3QgY29udGVudCA9IHRlbXBsYXRlLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICB0aGlzLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuICAgIH1cbiAgICBnZXQgc29ydCgpIHtcbiAgICAgICAgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRGaWx0ZXJzX3NvcnRpbmdGaWx0ZXIsIFwiZlwiKS52YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGNhdGVnb3J5KCkge1xuICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEZpbHRlcnNfY2F0ZWdvcnlGaWx0ZXIsIFwiZlwiKS52YWx1ZTtcbiAgICB9XG4gICAgc2V0IGNhdGVnb3J5KGNhdGVnb3J5KSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRGaWx0ZXJzX2NhdGVnb3J5RmlsdGVyLCBcImZcIikudmFsdWUgPSBjYXRlZ29yeTtcbiAgICB9XG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3RhdXJhbnRGaWx0ZXJzX2NhdGVnb3J5RmlsdGVyLCB0aGlzLnF1ZXJ5U2VsZWN0b3IoJyNjYXRlZ29yeS1maWx0ZXInKSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50RmlsdGVyc19zb3J0aW5nRmlsdGVyLCB0aGlzLnF1ZXJ5U2VsZWN0b3IoJyNzb3J0aW5nLWZpbHRlcicpLCBcImZcIik7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihTRUxFQ1RfRVZFTlRTLm9uY2hhbmdlLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50RmlsdGVyc19pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudEZpbHRlcnNfaGFuZGxlU2VsZWN0T25DaGFuZ2UpLmJpbmQodGhpcykpO1xuICAgIH1cbn1cbl9SZXN0YXVyYW50RmlsdGVyc19jYXRlZ29yeUZpbHRlciA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50RmlsdGVyc19zb3J0aW5nRmlsdGVyID0gbmV3IFdlYWtNYXAoKSwgX1Jlc3RhdXJhbnRGaWx0ZXJzX2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9SZXN0YXVyYW50RmlsdGVyc19oYW5kbGVTZWxlY3RPbkNoYW5nZSA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50RmlsdGVyc19oYW5kbGVTZWxlY3RPbkNoYW5nZShlKSB7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChSRVNUQVVSQU5UX0ZJTFRFUlNfRVZFTlRTLmZpbHRlckNoYW5nZSwge1xuICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiB0aGlzLmNhdGVnb3J5LFxuICAgICAgICAgICAgc29ydDogdGhpcy5zb3J0LFxuICAgICAgICB9LFxuICAgIH0pKTtcbn07XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQm9va21hcmtUYWIuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Cb29rbWFya1RhYi5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX0Jvb2ttYXJrVGFiX2luc3RhbmNlcywgX0Jvb2ttYXJrVGFiX3RhYkl0ZW1zLCBfQm9va21hcmtUYWJfaGFuZGxlQ2xpY2tUYWJJdGVtO1xuaW1wb3J0ICcuL0Jvb2ttYXJrVGFiLmNzcyc7XG5leHBvcnQgY29uc3QgQk9PS01BUktfVEFCX0VWRU5UUyA9IHtcbiAgICBjaGFuZ2VUYWI6ICd0YWJCb29rbWFya0l0ZW0nLFxufTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb2ttYXJrVGFiIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBfQm9va21hcmtUYWJfaW5zdGFuY2VzLmFkZCh0aGlzKTtcbiAgICAgICAgX0Jvb2ttYXJrVGFiX3RhYkl0ZW1zLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0ZW1wbGF0ZS1ib29rbWFyay10YWInKTtcbiAgICAgICAgY29uc3QgY29udGVudCA9IHRlbXBsYXRlLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICB0aGlzLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuICAgIH1cbiAgICBnZXQgaXNCb29rbWFyaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvcignLmFjdGl2ZScpLmlkID09PSAnYm9va21hcmsnO1xuICAgIH1cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQm9va21hcmtUYWJfdGFiSXRlbXMsIHRoaXMucXVlcnlTZWxlY3RvckFsbCgnLnRhYi1pdGVtJyksIFwiZlwiKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Jvb2ttYXJrVGFiX2luc3RhbmNlcywgXCJtXCIsIF9Cb29rbWFya1RhYl9oYW5kbGVDbGlja1RhYkl0ZW0pLmJpbmQodGhpcykpO1xuICAgIH1cbn1cbl9Cb29rbWFya1RhYl90YWJJdGVtcyA9IG5ldyBXZWFrTWFwKCksIF9Cb29rbWFya1RhYl9pbnN0YW5jZXMgPSBuZXcgV2Vha1NldCgpLCBfQm9va21hcmtUYWJfaGFuZGxlQ2xpY2tUYWJJdGVtID0gZnVuY3Rpb24gX0Jvb2ttYXJrVGFiX2hhbmRsZUNsaWNrVGFiSXRlbShlKSB7XG4gICAgY29uc3QgdGFyZ2V0SXRlbSA9IGUudGFyZ2V0O1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Jvb2ttYXJrVGFiX3RhYkl0ZW1zLCBcImZcIikuZm9yRWFjaCgodGFiSXRlbSkgPT4ge1xuICAgICAgICB0YWJJdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgIH0pO1xuICAgIHRhcmdldEl0ZW0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChCT09LTUFSS19UQUJfRVZFTlRTLmNoYW5nZVRhYiwge1xuICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgIH0pKTtcbn07XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUmVzdGF1cmFudEl0ZW0uY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SZXN0YXVyYW50SXRlbS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQ2F0ZWdvcnlJY29uLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQ2F0ZWdvcnlJY29uLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjYXRlZ29yeS1rb3JlYW4ucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImNhdGVnb3J5LWNoaW5lc2UucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImNhdGVnb3J5LWphcGFuZXNlLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjYXRlZ29yeS13ZXN0ZXJuLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjYXRlZ29yeS1hc2lhbi5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiY2F0ZWdvcnktZXRjLnBuZ1wiOyIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfQ2F0ZWdvcnlJY29uX2luc3RhbmNlcywgX0NhdGVnb3J5SWNvbl9jYXRlZ29yeSwgX0NhdGVnb3J5SWNvbl9yZW5kZXIsIF9DYXRlZ29yeUljb25fZ2V0Q2F0ZWdvcnlJY29uVXJsO1xuaW1wb3J0ICcuL0NhdGVnb3J5SWNvbi5jc3MnO1xuLy8gaWNvbiBpbWFnZXNcbmltcG9ydCBrb3JlYW5JY29uIGZyb20gJy4uLy4uLy4uL3N0YXRpY3MvaW1ncy9jYXRlZ29yeS1rb3JlYW4ucG5nJztcbmltcG9ydCBjaGluZXNlSWNvbiBmcm9tICcuLi8uLi8uLi9zdGF0aWNzL2ltZ3MvY2F0ZWdvcnktY2hpbmVzZS5wbmcnO1xuaW1wb3J0IGphcGFuZXNlSWNvbiBmcm9tICcuLi8uLi8uLi9zdGF0aWNzL2ltZ3MvY2F0ZWdvcnktamFwYW5lc2UucG5nJztcbmltcG9ydCB3ZXN0ZXJuSWNvbiBmcm9tICcuLi8uLi8uLi9zdGF0aWNzL2ltZ3MvY2F0ZWdvcnktd2VzdGVybi5wbmcnO1xuaW1wb3J0IGFzaWFuSWNvbiBmcm9tICcuLi8uLi8uLi9zdGF0aWNzL2ltZ3MvY2F0ZWdvcnktYXNpYW4ucG5nJztcbmltcG9ydCBldGNJY29uIGZyb20gJy4uLy4uLy4uL3N0YXRpY3MvaW1ncy9jYXRlZ29yeS1ldGMucG5nJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhdGVnb3J5SWNvbiBleHRlbmRzIEhUTUxJbWFnZUVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKGNhdGVnb3J5KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIF9DYXRlZ29yeUljb25faW5zdGFuY2VzLmFkZCh0aGlzKTtcbiAgICAgICAgX0NhdGVnb3J5SWNvbl9jYXRlZ29yeS5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQ2F0ZWdvcnlJY29uX2NhdGVnb3J5LCBjYXRlZ29yeSwgXCJmXCIpO1xuICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJy5jYXRlZ29yeS1pY29uJyk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0NhdGVnb3J5SWNvbl9pbnN0YW5jZXMsIFwibVwiLCBfQ2F0ZWdvcnlJY29uX3JlbmRlcikuY2FsbCh0aGlzKTtcbiAgICB9XG59XG5fQ2F0ZWdvcnlJY29uX2NhdGVnb3J5ID0gbmV3IFdlYWtNYXAoKSwgX0NhdGVnb3J5SWNvbl9pbnN0YW5jZXMgPSBuZXcgV2Vha1NldCgpLCBfQ2F0ZWdvcnlJY29uX3JlbmRlciA9IGZ1bmN0aW9uIF9DYXRlZ29yeUljb25fcmVuZGVyKCkge1xuICAgIHRoaXMuc3JjID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQ2F0ZWdvcnlJY29uX2luc3RhbmNlcywgXCJtXCIsIF9DYXRlZ29yeUljb25fZ2V0Q2F0ZWdvcnlJY29uVXJsKS5jYWxsKHRoaXMpO1xuICAgIHRoaXMuYWx0ID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQ2F0ZWdvcnlJY29uX2NhdGVnb3J5LCBcImZcIik7XG59LCBfQ2F0ZWdvcnlJY29uX2dldENhdGVnb3J5SWNvblVybCA9IGZ1bmN0aW9uIF9DYXRlZ29yeUljb25fZ2V0Q2F0ZWdvcnlJY29uVXJsKCkge1xuICAgIGlmIChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DYXRlZ29yeUljb25fY2F0ZWdvcnksIFwiZlwiKSA9PT0gJ+2VnOyLnScpXG4gICAgICAgIHJldHVybiBrb3JlYW5JY29uO1xuICAgIGlmIChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DYXRlZ29yeUljb25fY2F0ZWdvcnksIFwiZlwiKSA9PT0gJ+ykkeyLnScpXG4gICAgICAgIHJldHVybiBjaGluZXNlSWNvbjtcbiAgICBpZiAoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQ2F0ZWdvcnlJY29uX2NhdGVnb3J5LCBcImZcIikgPT09ICfsnbzsi50nKVxuICAgICAgICByZXR1cm4gamFwYW5lc2VJY29uO1xuICAgIGlmIChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DYXRlZ29yeUljb25fY2F0ZWdvcnksIFwiZlwiKSA9PT0gJ+yWkeyLnScpXG4gICAgICAgIHJldHVybiB3ZXN0ZXJuSWNvbjtcbiAgICBpZiAoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQ2F0ZWdvcnlJY29uX2NhdGVnb3J5LCBcImZcIikgPT09ICfslYTsi5zslYgnKVxuICAgICAgICByZXR1cm4gYXNpYW5JY29uO1xuICAgIGlmIChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9DYXRlZ29yeUljb25fY2F0ZWdvcnksIFwiZlwiKSA9PT0gJ+q4sO2DgCcpXG4gICAgICAgIHJldHVybiBldGNJY29uO1xuICAgIHJldHVybiAnJztcbn07XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQm9va21hcmtCdXR0b24uY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Cb29rbWFya0J1dHRvbi5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZmF2b3JpdGUtaWNvbi1maWxsZWQucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZhdm9yaXRlLWljb24tbGluZWQucG5nXCI7IiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9Cb29rbWFya0J1dHRvbl9pbnN0YW5jZXMsIF9Cb29rbWFya0J1dHRvbl9pc0Jvb2ttYXJrLCBfQm9va21hcmtCdXR0b25faW1hZ2VFbGVtZW50LCBfQm9va21hcmtCdXR0b25fcmVuZGVyLCBfQm9va21hcmtCdXR0b25fY3JlYXRlSW1nRWxlbWVudDtcbmltcG9ydCAnLi9Cb29rbWFya0J1dHRvbi5jc3MnO1xuLy8gaW1hZ2VzXG5pbXBvcnQgYm9va21hcmtJY29uRmlsbGVkIGZyb20gJy4uLy4uLy4uL3N0YXRpY3MvaW1ncy9mYXZvcml0ZS1pY29uLWZpbGxlZC5wbmcnO1xuaW1wb3J0IGJvb2ttYXJrSWNvbkxpbmVkIGZyb20gJy4uLy4uLy4uL3N0YXRpY3MvaW1ncy9mYXZvcml0ZS1pY29uLWxpbmVkLnBuZyc7XG5leHBvcnQgY29uc3QgQk9PS01BUktfQlVUVE9OX0VWRU5UUyA9IHtcbiAgICBjbGljazogJ2Jvb2ttYXJrQnRuQ2xpY2tlZCcsXG59O1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9va21hcmtCdXR0b24gZXh0ZW5kcyBIVE1MQnV0dG9uRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoaXNCb29rbWFyaykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBfQm9va21hcmtCdXR0b25faW5zdGFuY2VzLmFkZCh0aGlzKTtcbiAgICAgICAgX0Jvb2ttYXJrQnV0dG9uX2lzQm9va21hcmsuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9Cb29rbWFya0J1dHRvbl9pbWFnZUVsZW1lbnQuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0Jvb2ttYXJrQnV0dG9uX2lzQm9va21hcmssIGlzQm9va21hcmssIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQm9va21hcmtCdXR0b25faW1hZ2VFbGVtZW50LCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Cb29rbWFya0J1dHRvbl9pbnN0YW5jZXMsIFwibVwiLCBfQm9va21hcmtCdXR0b25fY3JlYXRlSW1nRWxlbWVudCkuY2FsbCh0aGlzKSwgXCJmXCIpO1xuICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ3Jlc3RhdXJhbnRfX2Jvb2ttYXJrJyk7XG4gICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQm9va21hcmtCdXR0b25faW1hZ2VFbGVtZW50LCBcImZcIikpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Cb29rbWFya0J1dHRvbl9pbnN0YW5jZXMsIFwibVwiLCBfQm9va21hcmtCdXR0b25fcmVuZGVyKS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0Jvb2ttYXJrQnV0dG9uX2lzQm9va21hcmssICFfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Cb29rbWFya0J1dHRvbl9pc0Jvb2ttYXJrLCBcImZcIiksIFwiZlwiKTtcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Jvb2ttYXJrQnV0dG9uX2luc3RhbmNlcywgXCJtXCIsIF9Cb29rbWFya0J1dHRvbl9yZW5kZXIpLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KEJPT0tNQVJLX0JVVFRPTl9FVkVOVFMuY2xpY2ssIHtcbiAgICAgICAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGRldGFpbDogeyBpc0Jvb2ttYXJrOiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Cb29rbWFya0J1dHRvbl9pc0Jvb2ttYXJrLCBcImZcIikgfSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuX0Jvb2ttYXJrQnV0dG9uX2lzQm9va21hcmsgPSBuZXcgV2Vha01hcCgpLCBfQm9va21hcmtCdXR0b25faW1hZ2VFbGVtZW50ID0gbmV3IFdlYWtNYXAoKSwgX0Jvb2ttYXJrQnV0dG9uX2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9Cb29rbWFya0J1dHRvbl9yZW5kZXIgPSBmdW5jdGlvbiBfQm9va21hcmtCdXR0b25fcmVuZGVyKCkge1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Jvb2ttYXJrQnV0dG9uX2ltYWdlRWxlbWVudCwgXCJmXCIpLnNyYyA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Jvb2ttYXJrQnV0dG9uX2lzQm9va21hcmssIFwiZlwiKSA/IGJvb2ttYXJrSWNvbkZpbGxlZCA6IGJvb2ttYXJrSWNvbkxpbmVkO1xufSwgX0Jvb2ttYXJrQnV0dG9uX2NyZWF0ZUltZ0VsZW1lbnQgPSBmdW5jdGlvbiBfQm9va21hcmtCdXR0b25fY3JlYXRlSW1nRWxlbWVudCgpIHtcbiAgICBjb25zdCBpbWdFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgaW1nRWxlbWVudC5zcmMgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Cb29rbWFya0J1dHRvbl9pc0Jvb2ttYXJrLCBcImZcIikgPyBib29rbWFya0ljb25GaWxsZWQgOiBib29rbWFya0ljb25MaW5lZDtcbiAgICByZXR1cm4gaW1nRWxlbWVudDtcbn07XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUmVzdGF1cmFudERldGFpbC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Jlc3RhdXJhbnREZXRhaWwuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9SZXN0YXVyYW50RGV0YWlsX2luc3RhbmNlcywgX1Jlc3RhdXJhbnREZXRhaWxfcmVzdGF1cmFudCwgX1Jlc3RhdXJhbnREZXRhaWxfY2F0ZWdvcnlJY29uLCBfUmVzdGF1cmFudERldGFpbF9ib29rbWFya0J0biwgX1Jlc3RhdXJhbnREZXRhaWxfZGVsZXRlQnRuLCBfUmVzdGF1cmFudERldGFpbF9jbG9zZUJ0biwgX1Jlc3RhdXJhbnREZXRhaWxfb25Ub2dnbGVCb29rbWFyaywgX1Jlc3RhdXJhbnREZXRhaWxfb25DbGlja0RlbGV0ZUJ1dHRvbiwgX1Jlc3RhdXJhbnREZXRhaWxfb25DbGlja0Nsb3NlQnV0dG9uLCBfUmVzdGF1cmFudERldGFpbF9yZW5kZXIsIF9SZXN0YXVyYW50RGV0YWlsX3NldE5hbWUsIF9SZXN0YXVyYW50RGV0YWlsX3NldERpc3RhbmNlLCBfUmVzdGF1cmFudERldGFpbF9zZXREZXNjcmlwdGlvbiwgX1Jlc3RhdXJhbnREZXRhaWxfc2V0TGluaztcbmltcG9ydCAnLi9SZXN0YXVyYW50RGV0YWlsLmNzcyc7XG5pbXBvcnQgQm9va21hcmtCdXR0b24sIHsgQk9PS01BUktfQlVUVE9OX0VWRU5UUyB9IGZyb20gJy4uL1Jlc3RhdXJhbnRJdGVtL0Jvb2ttYXJrQnV0dG9uL0Jvb2ttYXJrQnV0dG9uJztcbmltcG9ydCBDYXRlZ29yeUljb24gZnJvbSAnLi4vUmVzdGF1cmFudEl0ZW0vQ2F0ZWdvcnlJY29uL0NhdGVnb3J5SWNvbic7XG5leHBvcnQgY29uc3QgUkVTVEFVUkFOVF9ERVRBSUxfRVZFTlRTID0ge1xuICAgIGlzQm9va21hcmtDaGFuZ2VkOiAnaXNCb29rbWFya0NoYW5nZWQnLFxuICAgIGRlbGV0ZUl0ZW06ICdkZWxldGVSZXN0YXVyYW50SXRlbScsXG4gICAgY2xvc2VNb2RhbDogJ2Nsb3NlUmVzdGF1cmFudERldGFpbE1vZGFsJyxcbn07XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXN0YXVyYW50RGV0YWlsIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHJlc3RhdXJhbnQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgX1Jlc3RhdXJhbnREZXRhaWxfaW5zdGFuY2VzLmFkZCh0aGlzKTtcbiAgICAgICAgX1Jlc3RhdXJhbnREZXRhaWxfcmVzdGF1cmFudC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX1Jlc3RhdXJhbnREZXRhaWxfY2F0ZWdvcnlJY29uLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfUmVzdGF1cmFudERldGFpbF9ib29rbWFya0J0bi5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX1Jlc3RhdXJhbnREZXRhaWxfZGVsZXRlQnRuLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfUmVzdGF1cmFudERldGFpbF9jbG9zZUJ0bi5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdyZXN0YXVyYW50LWRldGFpbCcpO1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0ZW1wbGF0ZS1yZXN0YXVyYW50LWRldGFpbCcpO1xuICAgICAgICBjb25zdCBjb250ZW50ID0gdGVtcGxhdGUuY29udGVudC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoY29udGVudCk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3RhdXJhbnREZXRhaWxfcmVzdGF1cmFudCwgcmVzdGF1cmFudCwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50RGV0YWlsX2RlbGV0ZUJ0biwgdGhpcy5xdWVyeVNlbGVjdG9yKCcjZGVsZXRlJyksIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudERldGFpbF9jbG9zZUJ0biwgdGhpcy5xdWVyeVNlbGVjdG9yKCcjY2xvc2UnKSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50RGV0YWlsX2NhdGVnb3J5SWNvbiwgbmV3IENhdGVnb3J5SWNvbihfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50RGV0YWlsX3Jlc3RhdXJhbnQsIFwiZlwiKS5jYXRlZ29yeSksIFwiZlwiKTtcbiAgICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKCcucmVzdGF1cmFudF9fY2F0ZWdvcnknKS5hcHBlbmRDaGlsZChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50RGV0YWlsX2NhdGVnb3J5SWNvbiwgXCJmXCIpKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudERldGFpbF9ib29rbWFya0J0biwgbmV3IEJvb2ttYXJrQnV0dG9uKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREZXRhaWxfcmVzdGF1cmFudCwgXCJmXCIpLmlzQm9va21hcmspLCBcImZcIik7XG4gICAgICAgIHRoaXMucXVlcnlTZWxlY3RvcignLnJlc3RhdXJhbnRfX2luZm8nKS5hcHBlbmRDaGlsZChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50RGV0YWlsX2Jvb2ttYXJrQnRuLCBcImZcIikpO1xuICAgIH1cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudERldGFpbF9ib29rbWFya0J0biwgXCJmXCIpLmFkZEV2ZW50TGlzdGVuZXIoQk9PS01BUktfQlVUVE9OX0VWRU5UUy5jbGljaywgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudERldGFpbF9pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudERldGFpbF9vblRvZ2dsZUJvb2ttYXJrKS5iaW5kKHRoaXMpKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudERldGFpbF9kZWxldGVCdG4sIFwiZlwiKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREZXRhaWxfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnREZXRhaWxfb25DbGlja0RlbGV0ZUJ1dHRvbikuYmluZCh0aGlzKSk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREZXRhaWxfY2xvc2VCdG4sIFwiZlwiKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREZXRhaWxfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnREZXRhaWxfb25DbGlja0Nsb3NlQnV0dG9uKS5iaW5kKHRoaXMpKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudERldGFpbF9pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudERldGFpbF9yZW5kZXIpLmNhbGwodGhpcyk7XG4gICAgfVxufVxuX1Jlc3RhdXJhbnREZXRhaWxfcmVzdGF1cmFudCA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50RGV0YWlsX2NhdGVnb3J5SWNvbiA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50RGV0YWlsX2Jvb2ttYXJrQnRuID0gbmV3IFdlYWtNYXAoKSwgX1Jlc3RhdXJhbnREZXRhaWxfZGVsZXRlQnRuID0gbmV3IFdlYWtNYXAoKSwgX1Jlc3RhdXJhbnREZXRhaWxfY2xvc2VCdG4gPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudERldGFpbF9pbnN0YW5jZXMgPSBuZXcgV2Vha1NldCgpLCBfUmVzdGF1cmFudERldGFpbF9vblRvZ2dsZUJvb2ttYXJrID0gZnVuY3Rpb24gX1Jlc3RhdXJhbnREZXRhaWxfb25Ub2dnbGVCb29rbWFyayhlKSB7XG4gICAgY29uc3QgeyBpc0Jvb2ttYXJrIH0gPSBlLmRldGFpbDtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50RGV0YWlsX3Jlc3RhdXJhbnQsIFwiZlwiKS5pc0Jvb2ttYXJrID0gaXNCb29rbWFyaztcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFJFU1RBVVJBTlRfREVUQUlMX0VWRU5UUy5pc0Jvb2ttYXJrQ2hhbmdlZCwge1xuICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICBkZXRhaWw6IHsgcmVzdGF1cmFudDogeyAuLi5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50RGV0YWlsX3Jlc3RhdXJhbnQsIFwiZlwiKSB9IH0sXG4gICAgfSkpO1xufSwgX1Jlc3RhdXJhbnREZXRhaWxfb25DbGlja0RlbGV0ZUJ1dHRvbiA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50RGV0YWlsX29uQ2xpY2tEZWxldGVCdXR0b24oKSB7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChSRVNUQVVSQU5UX0RFVEFJTF9FVkVOVFMuZGVsZXRlSXRlbSwge1xuICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgIGlkOiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50RGV0YWlsX3Jlc3RhdXJhbnQsIFwiZlwiKS5pZCxcbiAgICAgICAgfSxcbiAgICB9KSk7XG59LCBfUmVzdGF1cmFudERldGFpbF9vbkNsaWNrQ2xvc2VCdXR0b24gPSBmdW5jdGlvbiBfUmVzdGF1cmFudERldGFpbF9vbkNsaWNrQ2xvc2VCdXR0b24oKSB7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChSRVNUQVVSQU5UX0RFVEFJTF9FVkVOVFMuY2xvc2VNb2RhbCwge1xuICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgIH0pKTtcbn0sIF9SZXN0YXVyYW50RGV0YWlsX3JlbmRlciA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50RGV0YWlsX3JlbmRlcigpIHtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50RGV0YWlsX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50RGV0YWlsX3NldE5hbWUpLmNhbGwodGhpcyk7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudERldGFpbF9pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudERldGFpbF9zZXREaXN0YW5jZSkuY2FsbCh0aGlzKTtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50RGV0YWlsX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50RGV0YWlsX3NldERlc2NyaXB0aW9uKS5jYWxsKHRoaXMpO1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREZXRhaWxfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnREZXRhaWxfc2V0TGluaykuY2FsbCh0aGlzKTtcbn0sIF9SZXN0YXVyYW50RGV0YWlsX3NldE5hbWUgPSBmdW5jdGlvbiBfUmVzdGF1cmFudERldGFpbF9zZXROYW1lKCkge1xuICAgIHRoaXMucXVlcnlTZWxlY3RvcignLnJlc3RhdXJhbnRfX25hbWUnKS50ZXh0Q29udGVudCA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnREZXRhaWxfcmVzdGF1cmFudCwgXCJmXCIpLm5hbWU7XG59LCBfUmVzdGF1cmFudERldGFpbF9zZXREaXN0YW5jZSA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50RGV0YWlsX3NldERpc3RhbmNlKCkge1xuICAgIHRoaXMucXVlcnlTZWxlY3RvcignLnJlc3RhdXJhbnRfX2Rpc3RhbmNlJykudGV4dENvbnRlbnQgPSBg7Lqg7Y287Iqk66Gc67aA7YSwICR7X19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudERldGFpbF9yZXN0YXVyYW50LCBcImZcIikuZGlzdGFuY2V967aEIOuCtCBgO1xufSwgX1Jlc3RhdXJhbnREZXRhaWxfc2V0RGVzY3JpcHRpb24gPSBmdW5jdGlvbiBfUmVzdGF1cmFudERldGFpbF9zZXREZXNjcmlwdGlvbigpIHtcbiAgICBjb25zdCB7IGRlc2NyaXB0aW9uIH0gPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50RGV0YWlsX3Jlc3RhdXJhbnQsIFwiZlwiKTtcbiAgICBpZiAoZGVzY3JpcHRpb24pIHtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICBkZXNjcmlwdGlvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZCgncmVzdGF1cmFudF9fZGVzY3JpcHRpb24nKTtcbiAgICAgICAgZGVzY3JpcHRpb25FbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3RleHQtYm9keScpO1xuICAgICAgICBkZXNjcmlwdGlvbkVsZW1lbnQudGV4dENvbnRlbnQgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50RGV0YWlsX3Jlc3RhdXJhbnQsIFwiZlwiKS5kZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKCcucmVzdGF1cmFudF9faW5mbycpLmFwcGVuZENoaWxkKGRlc2NyaXB0aW9uRWxlbWVudCk7XG4gICAgfVxufSwgX1Jlc3RhdXJhbnREZXRhaWxfc2V0TGluayA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50RGV0YWlsX3NldExpbmsoKSB7XG4gICAgY29uc3QgeyBsaW5rIH0gPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50RGV0YWlsX3Jlc3RhdXJhbnQsIFwiZlwiKTtcbiAgICBpZiAobGluaykge1xuICAgICAgICBjb25zdCBsaW5rRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgbGlua0VsZW1lbnQuY2xhc3NMaXN0LmFkZCgncmVzdGF1cmFudF9fbGluaycpO1xuICAgICAgICBsaW5rRWxlbWVudC50ZXh0Q29udGVudCA9IGxpbms7XG4gICAgICAgIGxpbmtFbGVtZW50LmhyZWYgPSBsaW5rO1xuICAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5yZXN0YXVyYW50X19pbmZvJykuYXBwZW5kQ2hpbGQobGlua0VsZW1lbnQpO1xuICAgIH1cbn07XG4iLCJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX1Jlc3RhdXJhbnRJdGVtX2luc3RhbmNlcywgX1Jlc3RhdXJhbnRJdGVtX3Jlc3RhdXJhbnQsIF9SZXN0YXVyYW50SXRlbV9jYXRlZ29yeUljb24sIF9SZXN0YXVyYW50SXRlbV9ib29rbWFya0J0biwgX1Jlc3RhdXJhbnRJdGVtX2hhbmRsZVRvZ2dsZUJvb2ttYXJrQnRuLCBfUmVzdGF1cmFudEl0ZW1faGFuZGxlQm9keUNsaWNrLCBfUmVzdGF1cmFudEl0ZW1fcmVuZGVyLCBfUmVzdGF1cmFudEl0ZW1fc2V0TmFtZSwgX1Jlc3RhdXJhbnRJdGVtX3NldERpc3RhbmNlLCBfUmVzdGF1cmFudEl0ZW1fc2V0RGVzY3JpcHRpb247XG5pbXBvcnQgJy4vUmVzdGF1cmFudEl0ZW0uY3NzJztcbmltcG9ydCBDYXRlZ29yeUljb24gZnJvbSAnLi9DYXRlZ29yeUljb24vQ2F0ZWdvcnlJY29uJztcbmltcG9ydCBCb29rbWFya0J1dHRvbiwgeyBCT09LTUFSS19CVVRUT05fRVZFTlRTIH0gZnJvbSAnLi9Cb29rbWFya0J1dHRvbi9Cb29rbWFya0J1dHRvbic7XG5pbXBvcnQgUmVzdGF1cmFudERldGFpbCBmcm9tICcuLi9SZXN0YXVyYW50RGV0YWlsL1Jlc3RhdXJhbnREZXRhaWwnO1xuZXhwb3J0IGNvbnN0IFJFU1RBVVJBTlRfSVRFTV9FVkVOVFMgPSB7XG4gICAgaXNCb29rbWFya0NoYW5nZWQ6ICdpc0Jvb2ttYXJrQ2hhbmdlZCcsXG59O1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzdGF1cmFudEl0ZW0gZXh0ZW5kcyBIVE1MTElFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihyZXN0YXVyYW50KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIF9SZXN0YXVyYW50SXRlbV9pbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICBfUmVzdGF1cmFudEl0ZW1fcmVzdGF1cmFudC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRJdGVtX2NhdGVnb3J5SWNvbi5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRJdGVtX2Jvb2ttYXJrQnRuLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ3Jlc3RhdXJhbnQnKTtcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGVtcGxhdGUtcmVzdGF1cmFudC1pdGVtJyk7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSB0ZW1wbGF0ZS5jb250ZW50LmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChjb250ZW50KTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fcmVzdGF1cmFudCwgcmVzdGF1cmFudCwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9jYXRlZ29yeUljb24sIG5ldyBDYXRlZ29yeUljb24oX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fcmVzdGF1cmFudCwgXCJmXCIpLmNhdGVnb3J5KSwgXCJmXCIpO1xuICAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5yZXN0YXVyYW50X19jYXRlZ29yeScpLmFwcGVuZENoaWxkKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX2NhdGVnb3J5SWNvbiwgXCJmXCIpKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fYm9va21hcmtCdG4sIG5ldyBCb29rbWFya0J1dHRvbihfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50LCBcImZcIikuaXNCb29rbWFyayksIFwiZlwiKTtcbiAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9ib29rbWFya0J0biwgXCJmXCIpKTtcbiAgICB9XG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX2Jvb2ttYXJrQnRuLCBcImZcIikuYWRkRXZlbnRMaXN0ZW5lcihCT09LTUFSS19CVVRUT05fRVZFTlRTLmNsaWNrLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudEl0ZW1faGFuZGxlVG9nZ2xlQm9va21hcmtCdG4pLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5yZXN0YXVyYW50X19pbmZvJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudEl0ZW1faGFuZGxlQm9keUNsaWNrKS5iaW5kKHRoaXMpKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1faW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRJdGVtX3JlbmRlcikuY2FsbCh0aGlzKTtcbiAgICB9XG59XG5fUmVzdGF1cmFudEl0ZW1fcmVzdGF1cmFudCA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50SXRlbV9jYXRlZ29yeUljb24gPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudEl0ZW1fYm9va21hcmtCdG4gPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudEl0ZW1faW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX1Jlc3RhdXJhbnRJdGVtX2hhbmRsZVRvZ2dsZUJvb2ttYXJrQnRuID0gZnVuY3Rpb24gX1Jlc3RhdXJhbnRJdGVtX2hhbmRsZVRvZ2dsZUJvb2ttYXJrQnRuKGUpIHtcbiAgICBjb25zdCB7IGlzQm9va21hcmsgfSA9IGUuZGV0YWlsO1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX3Jlc3RhdXJhbnQsIFwiZlwiKS5pc0Jvb2ttYXJrID0gaXNCb29rbWFyaztcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFJFU1RBVVJBTlRfSVRFTV9FVkVOVFMuaXNCb29rbWFya0NoYW5nZWQsIHtcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgZGV0YWlsOiB7IHJlc3RhdXJhbnQ6IHsgLi4uX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fcmVzdGF1cmFudCwgXCJmXCIpIH0gfSxcbiAgICB9KSk7XG59LCBfUmVzdGF1cmFudEl0ZW1faGFuZGxlQm9keUNsaWNrID0gZnVuY3Rpb24gX1Jlc3RhdXJhbnRJdGVtX2hhbmRsZUJvZHlDbGljaygpIHtcbiAgICBjb25zdCByZXN0YXVyYW50RGV0YWlsID0gbmV3IFJlc3RhdXJhbnREZXRhaWwoeyAuLi5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50LCBcImZcIikgfSk7XG4gICAgY29uc3QgbW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdhcHAtbW9kYWwnKTtcbiAgICBtb2RhbC5vcGVuTW9kYWwoeyBib2R5OiByZXN0YXVyYW50RGV0YWlsIH0pO1xufSwgX1Jlc3RhdXJhbnRJdGVtX3JlbmRlciA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50SXRlbV9yZW5kZXIoKSB7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1faW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRJdGVtX3NldE5hbWUpLmNhbGwodGhpcyk7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1faW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRJdGVtX3NldERpc3RhbmNlKS5jYWxsKHRoaXMpO1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRJdGVtX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50SXRlbV9zZXREZXNjcmlwdGlvbikuY2FsbCh0aGlzKTtcbn0sIF9SZXN0YXVyYW50SXRlbV9zZXROYW1lID0gZnVuY3Rpb24gX1Jlc3RhdXJhbnRJdGVtX3NldE5hbWUoKSB7XG4gICAgdGhpcy5xdWVyeVNlbGVjdG9yKCcucmVzdGF1cmFudF9fbmFtZScpLnRleHRDb250ZW50ID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEl0ZW1fcmVzdGF1cmFudCwgXCJmXCIpLm5hbWU7XG59LCBfUmVzdGF1cmFudEl0ZW1fc2V0RGlzdGFuY2UgPSBmdW5jdGlvbiBfUmVzdGF1cmFudEl0ZW1fc2V0RGlzdGFuY2UoKSB7XG4gICAgdGhpcy5xdWVyeVNlbGVjdG9yKCcucmVzdGF1cmFudF9fZGlzdGFuY2UnKS50ZXh0Q29udGVudCA9IGDsuqDtjbzsiqTroZzrtoDthLAgJHtfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50LCBcImZcIikuZGlzdGFuY2V967aEIOuCtCBgO1xufSwgX1Jlc3RhdXJhbnRJdGVtX3NldERlc2NyaXB0aW9uID0gZnVuY3Rpb24gX1Jlc3RhdXJhbnRJdGVtX3NldERlc2NyaXB0aW9uKCkge1xuICAgIHRoaXMucXVlcnlTZWxlY3RvcignLnJlc3RhdXJhbnRfX2Rlc2NyaXB0aW9uJykudGV4dENvbnRlbnQgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50LCBcImZcIikuZGVzY3JpcHRpb247XG59O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Jlc3RhdXJhbnRGb3JtLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUmVzdGF1cmFudEZvcm0uY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9SZXN0YXVyYW50Rm9ybV9pbnN0YW5jZXMsIF9SZXN0YXVyYW50Rm9ybV9saW5rSW5wdXQsIF9SZXN0YXVyYW50Rm9ybV9oYW5kbGVTdWJtaXQsIF9SZXN0YXVyYW50Rm9ybV9oYW5kbGVSZXNldCwgX1Jlc3RhdXJhbnRGb3JtX2NoZWNrTGlua0lucHV0VmFpbGRpdHksIF9SZXN0YXVyYW50Rm9ybV9nZXRGb3JtRGF0YU9iajtcbmltcG9ydCAnLi9SZXN0YXVyYW50Rm9ybS5jc3MnO1xuZXhwb3J0IGNvbnN0IFJFU1RBVVJBTlRfRk9STV9FVkVOVFMgPSB7XG4gICAgc3VibWl0OiAncmVzdGF1cmFudEZvcm1TdWJtaXQnLFxuICAgIHJlc2V0OiAncmVzdGF1cmFudEZvcm1SZXNldCcsXG59O1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzdGF1cmFudEZvcm0gZXh0ZW5kcyBIVE1MRm9ybUVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBfUmVzdGF1cmFudEZvcm1faW5zdGFuY2VzLmFkZCh0aGlzKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRGb3JtX2xpbmtJbnB1dC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGVtcGxhdGUtcmVzdGF1cmFudC1mb3JtJyk7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSB0ZW1wbGF0ZS5jb250ZW50LmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChjb250ZW50KTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudEZvcm1fbGlua0lucHV0LCB0aGlzLnF1ZXJ5U2VsZWN0b3IoJyNsaW5rJyksIFwiZlwiKTtcbiAgICB9XG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEZvcm1faW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRGb3JtX2hhbmRsZVN1Ym1pdCkuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigncmVzZXQnLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50Rm9ybV9pbnN0YW5jZXMsIFwibVwiLCBfUmVzdGF1cmFudEZvcm1faGFuZGxlUmVzZXQpLmJpbmQodGhpcykpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50Rm9ybV9saW5rSW5wdXQsIFwiZlwiKS5hZGRFdmVudExpc3RlbmVyKCdpbnZhbGlkJywgKCkgPT4ge1xuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEZvcm1fbGlua0lucHV0LCBcImZcIikudmFsdWUgPSAnJztcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRGb3JtX2xpbmtJbnB1dCwgXCJmXCIpLnNldEN1c3RvbVZhbGlkaXR5KCcnKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuX1Jlc3RhdXJhbnRGb3JtX2xpbmtJbnB1dCA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50Rm9ybV9pbnN0YW5jZXMgPSBuZXcgV2Vha1NldCgpLCBfUmVzdGF1cmFudEZvcm1faGFuZGxlU3VibWl0ID0gZnVuY3Rpb24gX1Jlc3RhdXJhbnRGb3JtX2hhbmRsZVN1Ym1pdChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmICghX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEZvcm1faW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRGb3JtX2NoZWNrTGlua0lucHV0VmFpbGRpdHkpLmNhbGwodGhpcykpIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEZvcm1fbGlua0lucHV0LCBcImZcIikuc2V0Q3VzdG9tVmFsaWRpdHkoJ+ycoO2aqO2VmOyngCDslYrsnYAg66eB7YGs7J6F64uI64ukLicpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBuZXcgRm9ybURhdGEoZS50YXJnZXQpO1xuICAgIGNvbnN0IGZvcm1EYXRhID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudEZvcm1faW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRGb3JtX2dldEZvcm1EYXRhT2JqKS5jYWxsKHRoaXMsIGRhdGEpO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoUkVTVEFVUkFOVF9GT1JNX0VWRU5UUy5zdWJtaXQsIHtcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgZGV0YWlsOiB7IGZvcm1EYXRhIH0sXG4gICAgfSkpO1xuICAgIHRoaXMucmVzZXQoKTtcbn0sIF9SZXN0YXVyYW50Rm9ybV9oYW5kbGVSZXNldCA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50Rm9ybV9oYW5kbGVSZXNldCgpIHtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFJFU1RBVVJBTlRfRk9STV9FVkVOVFMucmVzZXQsIHtcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICB9KSk7XG59LCBfUmVzdGF1cmFudEZvcm1fY2hlY2tMaW5rSW5wdXRWYWlsZGl0eSA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50Rm9ybV9jaGVja0xpbmtJbnB1dFZhaWxkaXR5KCkge1xuICAgIGlmIChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50Rm9ybV9saW5rSW5wdXQsIFwiZlwiKS52YWx1ZSA9PT0gJycpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cCgnXmh0dHBzPzovLycpO1xuICAgIHJldHVybiByZWdleC50ZXN0KF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRGb3JtX2xpbmtJbnB1dCwgXCJmXCIpLnZhbHVlKTtcbn0sIF9SZXN0YXVyYW50Rm9ybV9nZXRGb3JtRGF0YU9iaiA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50Rm9ybV9nZXRGb3JtRGF0YU9iaihkYXRhKSB7XG4gICAgcmV0dXJuIFsuLi5kYXRhLmtleXMoKV0ucmVkdWNlKChmb3JtRGF0YSwga2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZGF0YS5nZXQoa2V5KTtcbiAgICAgICAgcmV0dXJuIHsgLi4uZm9ybURhdGEsIFtrZXldOiB2YWx1ZSB9O1xuICAgIH0sIHt9KTtcbn07XG4iLCJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX1Jlc3RhdXJhbnRNYW5hZ2VyX3Jlc3RhdXJhbnRzO1xuaW1wb3J0IGdldFVuaXF1ZUlEIGZyb20gJy4uL3V0aWxzL2dldFVuaXF1ZUlEJztcbmltcG9ydCB7IGZpbHRlckJ5Qm9va21hcmssIGZpbHRlckJ5Q2F0ZWdvcnksIHNvcnRCeU9wdGlvbiB9IGZyb20gJy4vUmVzdGF1cmFudEZpbHRlcnMnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzdGF1cmFudE1hbmFnZXIge1xuICAgIGNvbnN0cnVjdG9yKHJlc3RhdXJhbnRzID0gW10pIHtcbiAgICAgICAgX1Jlc3RhdXJhbnRNYW5hZ2VyX3Jlc3RhdXJhbnRzLnNldCh0aGlzLCBbXSk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3RhdXJhbnRNYW5hZ2VyX3Jlc3RhdXJhbnRzLCBbLi4ucmVzdGF1cmFudHNdLCBcImZcIik7XG4gICAgfVxuICAgIGFkZChyZXN0YXVyYW50KSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRNYW5hZ2VyX3Jlc3RhdXJhbnRzLCBcImZcIikucHVzaCh7IGlkOiBnZXRVbmlxdWVJRCgpLCBpc0Jvb2ttYXJrOiBmYWxzZSwgLi4ucmVzdGF1cmFudCB9KTtcbiAgICB9XG4gICAgZGVsZXRlKGlkKSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3RhdXJhbnRNYW5hZ2VyX3Jlc3RhdXJhbnRzLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50TWFuYWdlcl9yZXN0YXVyYW50cywgXCJmXCIpLmZpbHRlcigocmVzdGF1cmFudCkgPT4gcmVzdGF1cmFudC5pZCAhPT0gaWQpLCBcImZcIik7XG4gICAgfVxuICAgIHVwZGF0ZSh1cGRhdGVkUmVzdGF1cmFudCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRNYW5hZ2VyX3Jlc3RhdXJhbnRzLCBcImZcIikuZmluZEluZGV4KChyZXN0YXVyYW50KSA9PiByZXN0YXVyYW50LmlkID09PSB1cGRhdGVkUmVzdGF1cmFudC5pZCk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRNYW5hZ2VyX3Jlc3RhdXJhbnRzLCBcImZcIilbaW5kZXhdID0gdXBkYXRlZFJlc3RhdXJhbnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0RmlsdGVyZWRMaXN0KG9wdGlvbnMsIGlzQm9va21hcmspIHtcbiAgICAgICAgY29uc3QgcmVzdGF1cmFudHMgPSBmaWx0ZXJCeUJvb2ttYXJrKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRNYW5hZ2VyX3Jlc3RhdXJhbnRzLCBcImZcIiksIGlzQm9va21hcmspO1xuICAgICAgICBjb25zdCBmaWx0ZXJlZFJlc3RhdXJhbnRzID0gZmlsdGVyQnlDYXRlZ29yeShyZXN0YXVyYW50cywgb3B0aW9ucy5jYXRlZ29yeSk7XG4gICAgICAgIHJldHVybiBzb3J0QnlPcHRpb24oZmlsdGVyZWRSZXN0YXVyYW50cywgb3B0aW9ucy5zb3J0KTtcbiAgICB9XG59XG5fUmVzdGF1cmFudE1hbmFnZXJfcmVzdGF1cmFudHMgPSBuZXcgV2Vha01hcCgpO1xuIiwiY29uc3QgZ2V0VW5pcXVlSUQgPSAoKSA9PiBEYXRlLm5vdygpO1xuZXhwb3J0IGRlZmF1bHQgZ2V0VW5pcXVlSUQ7XG4iLCJleHBvcnQgY29uc3QgZmlsdGVyQnlCb29rbWFyayA9IChyZXN0YXVyYW50cywgaXNCb29rbWFyaykgPT4ge1xuICAgIGlmIChpc0Jvb2ttYXJrKSB7XG4gICAgICAgIHJldHVybiByZXN0YXVyYW50cz8uZmlsdGVyKChyZXN0YXVyYW50KSA9PiByZXN0YXVyYW50LmlzQm9va21hcmspO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdGF1cmFudHM7XG59O1xuZXhwb3J0IGNvbnN0IGZpbHRlckJ5Q2F0ZWdvcnkgPSAocmVzdGF1cmFudHMsIGNhdGVnb3J5KSA9PiB7XG4gICAgaWYgKGNhdGVnb3J5ID09PSAn7KCE7LK0Jykge1xuICAgICAgICByZXR1cm4gcmVzdGF1cmFudHM7XG4gICAgfVxuICAgIHJldHVybiByZXN0YXVyYW50cz8uZmlsdGVyKChyZXN0YXVyYW50KSA9PiByZXN0YXVyYW50LmNhdGVnb3J5ID09PSBjYXRlZ29yeSk7XG59O1xuZXhwb3J0IGNvbnN0IHNvcnRCeU9wdGlvbiA9IChyZXN0YXVyYW50cywgc29ydCkgPT4ge1xuICAgIGlmICghcmVzdGF1cmFudHMpXG4gICAgICAgIHJldHVybiBbXTtcbiAgICBpZiAoc29ydCA9PT0gJ25hbWUnKSB7XG4gICAgICAgIHJldHVybiBbLi4ucmVzdGF1cmFudHNdLnNvcnQoKGEsIGIpID0+IGEubmFtZS5sb2NhbGVDb21wYXJlKGIubmFtZSkpO1xuICAgIH1cbiAgICBpZiAoc29ydCA9PT0gJ2Rpc3RhbmNlJykge1xuICAgICAgICByZXR1cm4gWy4uLnJlc3RhdXJhbnRzXS5zb3J0KChhLCBiKSA9PiBhLmRpc3RhbmNlIC0gYi5kaXN0YW5jZSk7XG4gICAgfVxuICAgIHJldHVybiBbLi4ucmVzdGF1cmFudHNdO1xufTtcbiIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfQXBwX2luc3RhbmNlcywgX0FwcF9yZXN0YXVyYW50RmlsdGVycywgX0FwcF9ib29rbWFya1RhYiwgX0FwcF9yZXN0YXVyYW50TGlzdCwgX0FwcF9yZXN0YXVyYW50TWFuZ2VyLCBfQXBwX2xvYWREYXRhRnJvbUxvY2FsU3RvcmFnZSwgX0FwcF91cGRhdGVEYXRhVG9Mb2NhbFN0b3JhZ2UsIF9BcHBfdXBkYXRlUmVzdGF1cmFudExpc3QsIF9BcHBfYWRkRXZlbnRMaXN0ZW5lcnMsIF9BcHBfYWRkUmVzdGF1cmFudFN1Ym1pdEV2ZW50TGlzdGVuZXIsIF9BcHBfYWRkRmlsdGVyT25jaGFuZ2VFdmVudExpc3RlbmVyLCBfQXBwX2FkZEJvb2ttYXJrVGFiT25DaGFuZ2VFdmVudExpc3RlbmVyLCBfQXBwX2FkZEJvb2ttYXJrT25jaGFuZ2VFdmVudExpc3RlbmVyLCBfQXBwX2FkZERlbGV0ZVJlc3RhdXJhbnRJdGVtRXZlbnRMaXN0ZW5lcjtcbi8vIHN0eWxlc1xuaW1wb3J0ICcuL0FwcC5jc3MnO1xuLy8gZXZlbnRzXG5pbXBvcnQgeyBSRVNUQVVSQU5UX0ZJTFRFUlNfRVZFTlRTIH0gZnJvbSAnLi9SZXN0YXVyYW50RmlsdGVycy9SZXN0YXVyYW50RmlsdGVycyc7XG5pbXBvcnQgeyBCT09LTUFSS19UQUJfRVZFTlRTIH0gZnJvbSAnLi9Cb29rbWFya1RhYi9Cb29rbWFya1RhYic7XG5pbXBvcnQgeyBSRVNUQVVSQU5UX0lURU1fRVZFTlRTIH0gZnJvbSAnLi9SZXN0YXVyYW50SXRlbS9SZXN0YXVyYW50SXRlbSc7XG5pbXBvcnQgeyBSRVNUQVVSQU5UX0RFVEFJTF9FVkVOVFMgfSBmcm9tICcuL1Jlc3RhdXJhbnREZXRhaWwvUmVzdGF1cmFudERldGFpbCc7XG5pbXBvcnQgeyBSRVNUQVVSQU5UX0ZPUk1fRVZFTlRTIH0gZnJvbSAnLi9SZXN0YXVyYW50Rm9ybS9SZXN0YXVyYW50Rm9ybSc7XG4vLyBkb21haW5cbmltcG9ydCBSZXN0YXVyYW50TWFuYWdlciBmcm9tICcuLi9kb21haW4vUmVzdGF1cmFudE1hbmFnZXInO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBwIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgX0FwcF9pbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICBfQXBwX3Jlc3RhdXJhbnRGaWx0ZXJzLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfQXBwX2Jvb2ttYXJrVGFiLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfQXBwX3Jlc3RhdXJhbnRMaXN0LnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfQXBwX3Jlc3RhdXJhbnRNYW5nZXIuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0FwcF9yZXN0YXVyYW50RmlsdGVycywgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYXBwLXJlc3RhdXJhbnQtZmlsdGVycycpLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0FwcF9ib29rbWFya1RhYiwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYXBwLWJvb2ttYXJrLXRhYicpLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0FwcF9yZXN0YXVyYW50TGlzdCwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Jlc3RhdXJhbnQtbGlzdCcpLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0FwcF9yZXN0YXVyYW50TWFuZ2VyLCBuZXcgUmVzdGF1cmFudE1hbmFnZXIoKSwgXCJmXCIpO1xuICAgIH1cbiAgICBhc3luYyBzdGFydCgpIHtcbiAgICAgICAgY29uc3QgeyBjYXRlZ29yeSwgc29ydCB9ID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX3Jlc3RhdXJhbnRGaWx0ZXJzLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FwcF9pbnN0YW5jZXMsIFwibVwiLCBfQXBwX2xvYWREYXRhRnJvbUxvY2FsU3RvcmFnZSkuY2FsbCh0aGlzKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX2luc3RhbmNlcywgXCJtXCIsIF9BcHBfdXBkYXRlUmVzdGF1cmFudExpc3QpLmNhbGwodGhpcywge1xuICAgICAgICAgICAgY2F0ZWdvcnksXG4gICAgICAgICAgICBzb3J0LFxuICAgICAgICB9KTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX2luc3RhbmNlcywgXCJtXCIsIF9BcHBfYWRkRXZlbnRMaXN0ZW5lcnMpLmNhbGwodGhpcyk7XG4gICAgfVxufVxuX0FwcF9yZXN0YXVyYW50RmlsdGVycyA9IG5ldyBXZWFrTWFwKCksIF9BcHBfYm9va21hcmtUYWIgPSBuZXcgV2Vha01hcCgpLCBfQXBwX3Jlc3RhdXJhbnRMaXN0ID0gbmV3IFdlYWtNYXAoKSwgX0FwcF9yZXN0YXVyYW50TWFuZ2VyID0gbmV3IFdlYWtNYXAoKSwgX0FwcF9pbnN0YW5jZXMgPSBuZXcgV2Vha1NldCgpLCBfQXBwX2xvYWREYXRhRnJvbUxvY2FsU3RvcmFnZSA9IGZ1bmN0aW9uIF9BcHBfbG9hZERhdGFGcm9tTG9jYWxTdG9yYWdlKCkge1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FwcF9yZXN0YXVyYW50TWFuZ2VyLCBcImZcIikucmVzdGF1cmFudHMgPSBKU09OLnBhcnNlKHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncmVzdGF1cmFudHMnKSk7XG59LCBfQXBwX3VwZGF0ZURhdGFUb0xvY2FsU3RvcmFnZSA9IGZ1bmN0aW9uIF9BcHBfdXBkYXRlRGF0YVRvTG9jYWxTdG9yYWdlKCkge1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncmVzdGF1cmFudHMnLCBKU09OLnN0cmluZ2lmeShfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfcmVzdGF1cmFudE1hbmdlciwgXCJmXCIpLnJlc3RhdXJhbnRzKSk7XG59LCBfQXBwX3VwZGF0ZVJlc3RhdXJhbnRMaXN0ID0gZnVuY3Rpb24gX0FwcF91cGRhdGVSZXN0YXVyYW50TGlzdCh7IGNhdGVnb3J5LCBzb3J0IH0sIGlzQm9va21hcmspIHtcbiAgICBjb25zdCByZXN1bHQgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfcmVzdGF1cmFudE1hbmdlciwgXCJmXCIpLmdldEZpbHRlcmVkTGlzdCh7IGNhdGVnb3J5LCBzb3J0IH0sIGlzQm9va21hcmspO1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FwcF9yZXN0YXVyYW50TGlzdCwgXCJmXCIpLnJlc3RhdXJhbnRzID0gcmVzdWx0O1xufSwgX0FwcF9hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIF9BcHBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX2luc3RhbmNlcywgXCJtXCIsIF9BcHBfYWRkUmVzdGF1cmFudFN1Ym1pdEV2ZW50TGlzdGVuZXIpLmNhbGwodGhpcyk7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX2luc3RhbmNlcywgXCJtXCIsIF9BcHBfYWRkRmlsdGVyT25jaGFuZ2VFdmVudExpc3RlbmVyKS5jYWxsKHRoaXMpO1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FwcF9pbnN0YW5jZXMsIFwibVwiLCBfQXBwX2FkZEJvb2ttYXJrVGFiT25DaGFuZ2VFdmVudExpc3RlbmVyKS5jYWxsKHRoaXMpO1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FwcF9pbnN0YW5jZXMsIFwibVwiLCBfQXBwX2FkZEJvb2ttYXJrT25jaGFuZ2VFdmVudExpc3RlbmVyKS5jYWxsKHRoaXMpO1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FwcF9pbnN0YW5jZXMsIFwibVwiLCBfQXBwX2FkZERlbGV0ZVJlc3RhdXJhbnRJdGVtRXZlbnRMaXN0ZW5lcikuY2FsbCh0aGlzKTtcbn0sIF9BcHBfYWRkUmVzdGF1cmFudFN1Ym1pdEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiBfQXBwX2FkZFJlc3RhdXJhbnRTdWJtaXRFdmVudExpc3RlbmVyKCkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoUkVTVEFVUkFOVF9GT1JNX0VWRU5UUy5zdWJtaXQsIChlKSA9PiB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FwcF9yZXN0YXVyYW50TWFuZ2VyLCBcImZcIikuYWRkKGUuZGV0YWlsLmZvcm1EYXRhKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX2luc3RhbmNlcywgXCJtXCIsIF9BcHBfdXBkYXRlRGF0YVRvTG9jYWxTdG9yYWdlKS5jYWxsKHRoaXMpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfcmVzdGF1cmFudEZpbHRlcnMsIFwiZlwiKS5jYXRlZ29yeSA9IGUuZGV0YWlsLmZvcm1EYXRhLmNhdGVnb3J5O1xuICAgICAgICBjb25zdCB7IGNhdGVnb3J5LCBzb3J0IH0gPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfcmVzdGF1cmFudEZpbHRlcnMsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX2luc3RhbmNlcywgXCJtXCIsIF9BcHBfdXBkYXRlUmVzdGF1cmFudExpc3QpLmNhbGwodGhpcywgeyBjYXRlZ29yeSwgc29ydCB9LCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfYm9va21hcmtUYWIsIFwiZlwiKS5pc0Jvb2ttYXJrKTtcbiAgICB9KTtcbn0sIF9BcHBfYWRkRmlsdGVyT25jaGFuZ2VFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gX0FwcF9hZGRGaWx0ZXJPbmNoYW5nZUV2ZW50TGlzdGVuZXIoKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihSRVNUQVVSQU5UX0ZJTFRFUlNfRVZFTlRTLmZpbHRlckNoYW5nZSwgKGUpID0+IHtcbiAgICAgICAgY29uc3QgeyBjYXRlZ29yeSwgc29ydCB9ID0gZS5kZXRhaWw7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FwcF9pbnN0YW5jZXMsIFwibVwiLCBfQXBwX3VwZGF0ZVJlc3RhdXJhbnRMaXN0KS5jYWxsKHRoaXMsIHsgY2F0ZWdvcnksIHNvcnQgfSwgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX2Jvb2ttYXJrVGFiLCBcImZcIikuaXNCb29rbWFyayk7XG4gICAgfSk7XG59LCBfQXBwX2FkZEJvb2ttYXJrVGFiT25DaGFuZ2VFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gX0FwcF9hZGRCb29rbWFya1RhYk9uQ2hhbmdlRXZlbnRMaXN0ZW5lcigpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKEJPT0tNQVJLX1RBQl9FVkVOVFMuY2hhbmdlVGFiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgY2F0ZWdvcnksIHNvcnQgfSA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FwcF9yZXN0YXVyYW50RmlsdGVycywgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfaW5zdGFuY2VzLCBcIm1cIiwgX0FwcF91cGRhdGVSZXN0YXVyYW50TGlzdCkuY2FsbCh0aGlzLCB7IGNhdGVnb3J5LCBzb3J0IH0sIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FwcF9ib29rbWFya1RhYiwgXCJmXCIpLmlzQm9va21hcmspO1xuICAgIH0pO1xufSwgX0FwcF9hZGRCb29rbWFya09uY2hhbmdlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIF9BcHBfYWRkQm9va21hcmtPbmNoYW5nZUV2ZW50TGlzdGVuZXIoKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihSRVNUQVVSQU5UX0lURU1fRVZFTlRTLmlzQm9va21hcmtDaGFuZ2VkLCAoZSkgPT4ge1xuICAgICAgICBjb25zdCB7IHJlc3RhdXJhbnQgfSA9IGUuZGV0YWlsO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfcmVzdGF1cmFudE1hbmdlciwgXCJmXCIpLnVwZGF0ZShyZXN0YXVyYW50KTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX2luc3RhbmNlcywgXCJtXCIsIF9BcHBfdXBkYXRlRGF0YVRvTG9jYWxTdG9yYWdlKS5jYWxsKHRoaXMpO1xuICAgIH0pO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoUkVTVEFVUkFOVF9ERVRBSUxfRVZFTlRTLmlzQm9va21hcmtDaGFuZ2VkLCAoZSkgPT4ge1xuICAgICAgICBjb25zdCB7IHJlc3RhdXJhbnQgfSA9IGUuZGV0YWlsO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfcmVzdGF1cmFudE1hbmdlciwgXCJmXCIpLnVwZGF0ZShyZXN0YXVyYW50KTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX2luc3RhbmNlcywgXCJtXCIsIF9BcHBfdXBkYXRlRGF0YVRvTG9jYWxTdG9yYWdlKS5jYWxsKHRoaXMpO1xuICAgICAgICBjb25zdCB7IGNhdGVnb3J5LCBzb3J0IH0gPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfcmVzdGF1cmFudEZpbHRlcnMsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX2luc3RhbmNlcywgXCJtXCIsIF9BcHBfdXBkYXRlUmVzdGF1cmFudExpc3QpLmNhbGwodGhpcywgeyBjYXRlZ29yeSwgc29ydCB9LCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfYm9va21hcmtUYWIsIFwiZlwiKS5pc0Jvb2ttYXJrKTtcbiAgICB9KTtcbn0sIF9BcHBfYWRkRGVsZXRlUmVzdGF1cmFudEl0ZW1FdmVudExpc3RlbmVyID0gZnVuY3Rpb24gX0FwcF9hZGREZWxldGVSZXN0YXVyYW50SXRlbUV2ZW50TGlzdGVuZXIoKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihSRVNUQVVSQU5UX0RFVEFJTF9FVkVOVFMuZGVsZXRlSXRlbSwgKGUpID0+IHtcbiAgICAgICAgY29uc3QgeyBpZCB9ID0gZS5kZXRhaWw7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FwcF9yZXN0YXVyYW50TWFuZ2VyLCBcImZcIikuZGVsZXRlKGlkKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX2luc3RhbmNlcywgXCJtXCIsIF9BcHBfdXBkYXRlRGF0YVRvTG9jYWxTdG9yYWdlKS5jYWxsKHRoaXMpO1xuICAgICAgICBjb25zdCB7IGNhdGVnb3J5LCBzb3J0IH0gPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfcmVzdGF1cmFudEZpbHRlcnMsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQXBwX2luc3RhbmNlcywgXCJtXCIsIF9BcHBfdXBkYXRlUmVzdGF1cmFudExpc3QpLmNhbGwodGhpcywgeyBjYXRlZ29yeSwgc29ydCB9LCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BcHBfYm9va21hcmtUYWIsIFwiZlwiKS5pc0Jvb2ttYXJrKTtcbiAgICB9KTtcbn07XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vR05CLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vR05CLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhZGQtYnV0dG9uLnBuZ1wiOyIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9HTkJfaW5zdGFuY2VzLCBfR05CX2NyZWF0ZVJlc3RhdXJhbnRGb3JtVGl0bGUsIF9HTkJfY3JlYXRlUmVzdGF1cmFudEZvcm07XG5pbXBvcnQgJy4vR05CLmNzcyc7XG5pbXBvcnQgJy4uLy4uL3N0YXRpY3MvaW1ncy9hZGQtYnV0dG9uLnBuZyc7XG5pbXBvcnQgUmVzdGF1cmFudEZvcm0gZnJvbSAnLi4vUmVzdGF1cmFudEZvcm0vUmVzdGF1cmFudEZvcm0nO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR05CIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBfR05CX2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RlbXBsYXRlLWhlYWRlcicpO1xuICAgICAgICBjb25zdCBjb250ZW50ID0gdGVtcGxhdGUuY29udGVudC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoY29udGVudCk7XG4gICAgfVxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICBjb25zdCBidXR0b24gPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5nbmJfX2J1dHRvbicpO1xuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2FwcC1tb2RhbCcpO1xuICAgICAgICAgICAgY29uc3QgdGl0bGUgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9HTkJfaW5zdGFuY2VzLCBcIm1cIiwgX0dOQl9jcmVhdGVSZXN0YXVyYW50Rm9ybVRpdGxlKS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0dOQl9pbnN0YW5jZXMsIFwibVwiLCBfR05CX2NyZWF0ZVJlc3RhdXJhbnRGb3JtKS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgbW9kYWwub3Blbk1vZGFsKHsgdGl0bGUsIGJvZHkgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbl9HTkJfaW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX0dOQl9jcmVhdGVSZXN0YXVyYW50Rm9ybVRpdGxlID0gZnVuY3Rpb24gX0dOQl9jcmVhdGVSZXN0YXVyYW50Rm9ybVRpdGxlKCkge1xuICAgIGNvbnN0IHJlc3RhdXJhbnRGb3JtVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xuICAgIHJlc3RhdXJhbnRGb3JtVGl0bGUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdtb2RhbC10aXRsZSB0ZXh0LXRpdGxlJyk7XG4gICAgcmVzdGF1cmFudEZvcm1UaXRsZS50ZXh0Q29udGVudCA9ICfsg4jroZzsmrQg7J2M7Iud7KCQJztcbiAgICByZXR1cm4gcmVzdGF1cmFudEZvcm1UaXRsZTtcbn0sIF9HTkJfY3JlYXRlUmVzdGF1cmFudEZvcm0gPSBmdW5jdGlvbiBfR05CX2NyZWF0ZVJlc3RhdXJhbnRGb3JtKCkge1xuICAgIGNvbnN0IHJlc3RhdXJhbnRGb3JtID0gbmV3IFJlc3RhdXJhbnRGb3JtKCk7XG4gICAgcmVzdGF1cmFudEZvcm0uc2V0QXR0cmlidXRlKCdpcycsICdhcHAtcmVzdGF1cmFudC1mb3JtJyk7XG4gICAgcmVzdGF1cmFudEZvcm0uc2V0QXR0cmlidXRlKCdpZCcsICdyZXN0YXVyYW50LWZvcm0nKTtcbiAgICByZXR1cm4gcmVzdGF1cmFudEZvcm07XG59O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL01vZGFsLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTW9kYWwuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwidmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9Nb2RhbF9pbnN0YW5jZXMsIF9Nb2RhbF9iYWNrZHJvcCwgX01vZGFsX2NvbnRhaW5lciwgX01vZGFsX2Nsb3NlTW9kYWw7XG5pbXBvcnQgJy4vTW9kYWwuY3NzJztcbmltcG9ydCB7IFJFU1RBVVJBTlRfREVUQUlMX0VWRU5UUyB9IGZyb20gJy4uL1Jlc3RhdXJhbnREZXRhaWwvUmVzdGF1cmFudERldGFpbCc7XG5pbXBvcnQgeyBSRVNUQVVSQU5UX0ZPUk1fRVZFTlRTIH0gZnJvbSAnLi4vUmVzdGF1cmFudEZvcm0vUmVzdGF1cmFudEZvcm0nO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9kYWwgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIF9Nb2RhbF9pbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICBfTW9kYWxfYmFja2Ryb3Auc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9Nb2RhbF9jb250YWluZXIuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RlbXBsYXRlLW1vZGFsJyk7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSB0ZW1wbGF0ZS5jb250ZW50LmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChjb250ZW50KTtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdtb2RhbCcpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9Nb2RhbF9iYWNrZHJvcCwgdGhpcy5xdWVyeVNlbGVjdG9yKCcubW9kYWwtYmFja2Ryb3AnKSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9Nb2RhbF9jb250YWluZXIsIHRoaXMucXVlcnlTZWxlY3RvcignLm1vZGFsLWNvbnRhaW5lcicpLCBcImZcIik7XG4gICAgfVxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoUkVTVEFVUkFOVF9GT1JNX0VWRU5UUy5zdWJtaXQsIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01vZGFsX2luc3RhbmNlcywgXCJtXCIsIF9Nb2RhbF9jbG9zZU1vZGFsKS5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFJFU1RBVVJBTlRfRk9STV9FVkVOVFMucmVzZXQsIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01vZGFsX2luc3RhbmNlcywgXCJtXCIsIF9Nb2RhbF9jbG9zZU1vZGFsKS5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFJFU1RBVVJBTlRfREVUQUlMX0VWRU5UUy5kZWxldGVJdGVtLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Nb2RhbF9pbnN0YW5jZXMsIFwibVwiLCBfTW9kYWxfY2xvc2VNb2RhbCkuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihSRVNUQVVSQU5UX0RFVEFJTF9FVkVOVFMuY2xvc2VNb2RhbCwgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTW9kYWxfaW5zdGFuY2VzLCBcIm1cIiwgX01vZGFsX2Nsb3NlTW9kYWwpLmJpbmQodGhpcykpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Nb2RhbF9iYWNrZHJvcCwgXCJmXCIpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTW9kYWxfaW5zdGFuY2VzLCBcIm1cIiwgX01vZGFsX2Nsb3NlTW9kYWwpLmJpbmQodGhpcykpO1xuICAgIH1cbiAgICBvcGVuTW9kYWwoeyB0aXRsZSwgYm9keSB9KSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01vZGFsX2NvbnRhaW5lciwgXCJmXCIpLmlubmVySFRNTCA9ICcnO1xuICAgICAgICBpZiAodGl0bGUpXG4gICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Nb2RhbF9jb250YWluZXIsIFwiZlwiKS5hcHBlbmRDaGlsZCh0aXRsZSk7XG4gICAgICAgIGlmIChib2R5KVxuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTW9kYWxfY29udGFpbmVyLCBcImZcIikuYXBwZW5kQ2hpbGQoYm9keSk7XG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnbW9kYWwtLW9wZW4nKTtcbiAgICB9XG59XG5fTW9kYWxfYmFja2Ryb3AgPSBuZXcgV2Vha01hcCgpLCBfTW9kYWxfY29udGFpbmVyID0gbmV3IFdlYWtNYXAoKSwgX01vZGFsX2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9Nb2RhbF9jbG9zZU1vZGFsID0gZnVuY3Rpb24gX01vZGFsX2Nsb3NlTW9kYWwoKSB7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTW9kYWxfY29udGFpbmVyLCBcImZcIikuaW5uZXJIVE1MID0gJyc7XG4gICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKCdtb2RhbC0tb3BlbicpO1xufTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SZXN0YXVyYW50TGlzdC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Jlc3RhdXJhbnRMaXN0LmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfUmVzdGF1cmFudExpc3RfaW5zdGFuY2VzLCBfUmVzdGF1cmFudExpc3RfcmVzdGF1cmFudHMsIF9SZXN0YXVyYW50TGlzdF91cGRhdGVMaXN0O1xuaW1wb3J0ICcuL1Jlc3RhdXJhbnRMaXN0LmNzcyc7XG5pbXBvcnQgUmVzdGF1cmFudEl0ZW0gZnJvbSAnLi4vUmVzdGF1cmFudEl0ZW0vUmVzdGF1cmFudEl0ZW0nO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzdGF1cmFudExpc3QgZXh0ZW5kcyBIVE1MVUxpc3RFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRMaXN0X2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIF9SZXN0YXVyYW50TGlzdF9yZXN0YXVyYW50cy5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdyZXN0YXVyYW50LWxpc3QnKTtcbiAgICB9XG4gICAgZ2V0IHJlc3RhdXJhbnRzKCkge1xuICAgICAgICByZXR1cm4gWy4uLl9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRMaXN0X3Jlc3RhdXJhbnRzLCBcImZcIildO1xuICAgIH1cbiAgICBzZXQgcmVzdGF1cmFudHMocmVzdGF1cmFudHMpIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudExpc3RfcmVzdGF1cmFudHMsIHJlc3RhdXJhbnRzID8gWy4uLnJlc3RhdXJhbnRzXSA6IFtdLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRMaXN0X2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50TGlzdF91cGRhdGVMaXN0KS5jYWxsKHRoaXMpO1xuICAgIH1cbn1cbl9SZXN0YXVyYW50TGlzdF9yZXN0YXVyYW50cyA9IG5ldyBXZWFrTWFwKCksIF9SZXN0YXVyYW50TGlzdF9pbnN0YW5jZXMgPSBuZXcgV2Vha1NldCgpLCBfUmVzdGF1cmFudExpc3RfdXBkYXRlTGlzdCA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50TGlzdF91cGRhdGVMaXN0KCkge1xuICAgIHRoaXMuaW5uZXJIVE1MID0gJyc7XG4gICAgY29uc3QgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgdGhpcy5yZXN0YXVyYW50cz8uZm9yRWFjaCgocmVzdGF1cmFudCkgPT4ge1xuICAgICAgICBjb25zdCByZXN0YXVyYW50SXRlbSA9IG5ldyBSZXN0YXVyYW50SXRlbShyZXN0YXVyYW50KTtcbiAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQocmVzdGF1cmFudEl0ZW0pO1xuICAgIH0pO1xuICAgIHRoaXMuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xufTtcbiIsIi8vIHN0eWxlc1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvZ2xvYmFsLmNzcyc7XG4vLyBjb21wb25lbnRzXG5pbXBvcnQgQXBwIGZyb20gJy4vY29tcG9uZW50cy9BcHAnO1xuaW1wb3J0IEdOQiBmcm9tICcuL2NvbXBvbmVudHMvR05CL0dOQic7XG5pbXBvcnQgTW9kYWwgZnJvbSAnLi9jb21wb25lbnRzL01vZGFsL01vZGFsJztcbmltcG9ydCBTZWxlY3QgZnJvbSAnLi9jb21wb25lbnRzL1NlbGVjdC9TZWxlY3QnO1xuaW1wb3J0IFJlc3RhdXJhbnRGb3JtIGZyb20gJy4vY29tcG9uZW50cy9SZXN0YXVyYW50Rm9ybS9SZXN0YXVyYW50Rm9ybSc7XG5pbXBvcnQgUmVzdGF1cmFudExpc3QgZnJvbSAnLi9jb21wb25lbnRzL1Jlc3RhdXJhbnRMaXN0L1Jlc3RhdXJhbnRMaXN0JztcbmltcG9ydCBSZXN0YXVyYW50SXRlbSBmcm9tICcuL2NvbXBvbmVudHMvUmVzdGF1cmFudEl0ZW0vUmVzdGF1cmFudEl0ZW0nO1xuaW1wb3J0IFJlc3RhdXJhbnRGaWx0ZXJzIGZyb20gJy4vY29tcG9uZW50cy9SZXN0YXVyYW50RmlsdGVycy9SZXN0YXVyYW50RmlsdGVycyc7XG5pbXBvcnQgQm9va21hcmtUYWIgZnJvbSAnLi9jb21wb25lbnRzL0Jvb2ttYXJrVGFiL0Jvb2ttYXJrVGFiJztcbmltcG9ydCBDYXRlZ29yeUljb24gZnJvbSAnLi9jb21wb25lbnRzL1Jlc3RhdXJhbnRJdGVtL0NhdGVnb3J5SWNvbi9DYXRlZ29yeUljb24nO1xuaW1wb3J0IEJvb2ttYXJrQnV0dG9uIGZyb20gJy4vY29tcG9uZW50cy9SZXN0YXVyYW50SXRlbS9Cb29rbWFya0J1dHRvbi9Cb29rbWFya0J1dHRvbic7XG5pbXBvcnQgUmVzdGF1cmFudERldGFpbCBmcm9tICcuL2NvbXBvbmVudHMvUmVzdGF1cmFudERldGFpbC9SZXN0YXVyYW50RGV0YWlsJztcbndpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ2FwcC1nbmInLCBHTkIpO1xud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnYXBwLW1vZGFsJywgTW9kYWwpO1xud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnYXBwLXNlbGVjdCcsIFNlbGVjdCwgeyBleHRlbmRzOiAnc2VsZWN0JyB9KTtcbndpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ2FwcC1yZXN0YXVyYW50LWZvcm0nLCBSZXN0YXVyYW50Rm9ybSwgeyBleHRlbmRzOiAnZm9ybScgfSk7XG53aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdhcHAtcmVzdGF1cmFudC1saXN0JywgUmVzdGF1cmFudExpc3QsIHsgZXh0ZW5kczogJ3VsJyB9KTtcbndpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ2FwcC1yZXN0YXVyYW50LWl0ZW0nLCBSZXN0YXVyYW50SXRlbSwgeyBleHRlbmRzOiAnbGknIH0pO1xud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnYXBwLWNhdGVnb3J5LWltYWdlJywgQ2F0ZWdvcnlJY29uLCB7IGV4dGVuZHM6ICdpbWcnIH0pO1xud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnYXBwLWJvb2ttYXJrLWJ1dHRvbicsIEJvb2ttYXJrQnV0dG9uLCB7IGV4dGVuZHM6ICdidXR0b24nIH0pO1xud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnYXBwLXJlc3RhdXJhbnQtZGV0YWlsJywgUmVzdGF1cmFudERldGFpbCk7XG53aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdhcHAtcmVzdGF1cmFudC1maWx0ZXJzJywgUmVzdGF1cmFudEZpbHRlcnMpO1xud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnYXBwLWJvb2ttYXJrLXRhYicsIEJvb2ttYXJrVGFiKTtcbmNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcbmFwcC5zdGFydCgpO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInJlcGxhY2UiLCJwIiwibmMiLCJNYXAiLCJ2YWx1ZSIsIm9wdGlvbiIsIl9TZWxlY3RfaW5zdGFuY2VzIiwiX1NlbGVjdF9oYW5kbGVPbkNoYW5nZSIsIl9TZWxlY3RfY3JlYXRlT3B0aW9ucyIsIl9TZWxlY3RfZ2VuZXJhdGVPcHRpb25zIiwiX19jbGFzc1ByaXZhdGVGaWVsZEdldCIsInJlY2VpdmVyIiwic3RhdGUiLCJraW5kIiwiZiIsIlR5cGVFcnJvciIsImhhcyIsIlNFTEVDVF9FVkVOVFMiLCJIVE1MU2VsZWN0RWxlbWVudCIsImNvbnN0cnVjdG9yIiwic3VwZXIiLCJhcmd1bWVudHMiLCJhZGQiLCJ0eXBlIiwiZ2V0QXR0cmlidXRlIiwiY29ubmVjdGVkQ2FsbGJhY2siLCJhZGRFdmVudExpc3RlbmVyIiwiYmluZCIsImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayIsIldlYWtTZXQiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJidWJibGVzIiwiZGV0YWlsIiwiaW5uZXJIVE1MIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiZm9yRWFjaCIsIm9ic2VydmVkQXR0cmlidXRlcyIsIl9SZXN0YXVyYW50RmlsdGVyc19pbnN0YW5jZXMiLCJfUmVzdGF1cmFudEZpbHRlcnNfY2F0ZWdvcnlGaWx0ZXIiLCJfUmVzdGF1cmFudEZpbHRlcnNfc29ydGluZ0ZpbHRlciIsIl9SZXN0YXVyYW50RmlsdGVyc19oYW5kbGVTZWxlY3RPbkNoYW5nZSIsIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCJzZXQiLCJSRVNUQVVSQU5UX0ZJTFRFUlNfRVZFTlRTIiwiSFRNTEVsZW1lbnQiLCJjbG9uZU5vZGUiLCJzb3J0IiwiY2F0ZWdvcnkiLCJXZWFrTWFwIiwiX0Jvb2ttYXJrVGFiX2luc3RhbmNlcyIsIl9Cb29rbWFya1RhYl90YWJJdGVtcyIsIl9Cb29rbWFya1RhYl9oYW5kbGVDbGlja1RhYkl0ZW0iLCJCT09LTUFSS19UQUJfRVZFTlRTIiwiaXNCb29rbWFyayIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0YXJnZXRJdGVtIiwidGFiSXRlbSIsImNsYXNzTGlzdCIsIl9DYXRlZ29yeUljb25faW5zdGFuY2VzIiwiX0NhdGVnb3J5SWNvbl9jYXRlZ29yeSIsIl9DYXRlZ29yeUljb25fcmVuZGVyIiwiX0NhdGVnb3J5SWNvbl9nZXRDYXRlZ29yeUljb25VcmwiLCJIVE1MSW1hZ2VFbGVtZW50IiwiYWx0IiwiX0Jvb2ttYXJrQnV0dG9uX2luc3RhbmNlcyIsIl9Cb29rbWFya0J1dHRvbl9pc0Jvb2ttYXJrIiwiX0Jvb2ttYXJrQnV0dG9uX2ltYWdlRWxlbWVudCIsIl9Cb29rbWFya0J1dHRvbl9yZW5kZXIiLCJfQm9va21hcmtCdXR0b25fY3JlYXRlSW1nRWxlbWVudCIsIkJPT0tNQVJLX0JVVFRPTl9FVkVOVFMiLCJIVE1MQnV0dG9uRWxlbWVudCIsImltZ0VsZW1lbnQiLCJfUmVzdGF1cmFudERldGFpbF9pbnN0YW5jZXMiLCJfUmVzdGF1cmFudERldGFpbF9yZXN0YXVyYW50IiwiX1Jlc3RhdXJhbnREZXRhaWxfY2F0ZWdvcnlJY29uIiwiX1Jlc3RhdXJhbnREZXRhaWxfYm9va21hcmtCdG4iLCJfUmVzdGF1cmFudERldGFpbF9kZWxldGVCdG4iLCJfUmVzdGF1cmFudERldGFpbF9jbG9zZUJ0biIsIl9SZXN0YXVyYW50RGV0YWlsX29uVG9nZ2xlQm9va21hcmsiLCJfUmVzdGF1cmFudERldGFpbF9vbkNsaWNrRGVsZXRlQnV0dG9uIiwiX1Jlc3RhdXJhbnREZXRhaWxfb25DbGlja0Nsb3NlQnV0dG9uIiwiX1Jlc3RhdXJhbnREZXRhaWxfcmVuZGVyIiwiX1Jlc3RhdXJhbnREZXRhaWxfc2V0TmFtZSIsIl9SZXN0YXVyYW50RGV0YWlsX3NldERpc3RhbmNlIiwiX1Jlc3RhdXJhbnREZXRhaWxfc2V0RGVzY3JpcHRpb24iLCJfUmVzdGF1cmFudERldGFpbF9zZXRMaW5rIiwiUkVTVEFVUkFOVF9ERVRBSUxfRVZFTlRTIiwicmVzdGF1cmFudCIsInRleHRDb250ZW50IiwibmFtZSIsImRpc3RhbmNlIiwiZGVzY3JpcHRpb24iLCJkZXNjcmlwdGlvbkVsZW1lbnQiLCJsaW5rIiwibGlua0VsZW1lbnQiLCJocmVmIiwiX1Jlc3RhdXJhbnRJdGVtX2luc3RhbmNlcyIsIl9SZXN0YXVyYW50SXRlbV9yZXN0YXVyYW50IiwiX1Jlc3RhdXJhbnRJdGVtX2NhdGVnb3J5SWNvbiIsIl9SZXN0YXVyYW50SXRlbV9ib29rbWFya0J0biIsIl9SZXN0YXVyYW50SXRlbV9oYW5kbGVUb2dnbGVCb29rbWFya0J0biIsIl9SZXN0YXVyYW50SXRlbV9oYW5kbGVCb2R5Q2xpY2siLCJfUmVzdGF1cmFudEl0ZW1fcmVuZGVyIiwiX1Jlc3RhdXJhbnRJdGVtX3NldE5hbWUiLCJfUmVzdGF1cmFudEl0ZW1fc2V0RGlzdGFuY2UiLCJfUmVzdGF1cmFudEl0ZW1fc2V0RGVzY3JpcHRpb24iLCJSRVNUQVVSQU5UX0lURU1fRVZFTlRTIiwiSFRNTExJRWxlbWVudCIsInJlc3RhdXJhbnREZXRhaWwiLCJvcGVuTW9kYWwiLCJib2R5IiwiX1Jlc3RhdXJhbnRGb3JtX2luc3RhbmNlcyIsIl9SZXN0YXVyYW50Rm9ybV9saW5rSW5wdXQiLCJfUmVzdGF1cmFudEZvcm1faGFuZGxlU3VibWl0IiwiX1Jlc3RhdXJhbnRGb3JtX2hhbmRsZVJlc2V0IiwiX1Jlc3RhdXJhbnRGb3JtX2NoZWNrTGlua0lucHV0VmFpbGRpdHkiLCJfUmVzdGF1cmFudEZvcm1fZ2V0Rm9ybURhdGFPYmoiLCJSRVNUQVVSQU5UX0ZPUk1fRVZFTlRTIiwiSFRNTEZvcm1FbGVtZW50Iiwic2V0Q3VzdG9tVmFsaWRpdHkiLCJwcmV2ZW50RGVmYXVsdCIsIkZvcm1EYXRhIiwiZm9ybURhdGEiLCJyZXNldCIsIlJlZ0V4cCIsInRlc3QiLCJrZXlzIiwicmVkdWNlIiwiX1Jlc3RhdXJhbnRNYW5hZ2VyX3Jlc3RhdXJhbnRzIiwiUmVzdGF1cmFudE1hbmFnZXIiLCJyZXN0YXVyYW50cyIsIkRhdGUiLCJub3ciLCJkZWxldGUiLCJmaWx0ZXIiLCJ1cGRhdGVkUmVzdGF1cmFudCIsImZpbmRJbmRleCIsImdldEZpbHRlcmVkTGlzdCIsImZpbHRlckJ5Qm9va21hcmsiLCJmaWx0ZXJlZFJlc3RhdXJhbnRzIiwiZmlsdGVyQnlDYXRlZ29yeSIsImIiLCJsb2NhbGVDb21wYXJlIiwic29ydEJ5T3B0aW9uIiwiX0FwcF9pbnN0YW5jZXMiLCJfQXBwX3Jlc3RhdXJhbnRGaWx0ZXJzIiwiX0FwcF9ib29rbWFya1RhYiIsIl9BcHBfcmVzdGF1cmFudExpc3QiLCJfQXBwX3Jlc3RhdXJhbnRNYW5nZXIiLCJfQXBwX2xvYWREYXRhRnJvbUxvY2FsU3RvcmFnZSIsIl9BcHBfdXBkYXRlRGF0YVRvTG9jYWxTdG9yYWdlIiwiX0FwcF91cGRhdGVSZXN0YXVyYW50TGlzdCIsIl9BcHBfYWRkRXZlbnRMaXN0ZW5lcnMiLCJfQXBwX2FkZFJlc3RhdXJhbnRTdWJtaXRFdmVudExpc3RlbmVyIiwiX0FwcF9hZGRGaWx0ZXJPbmNoYW5nZUV2ZW50TGlzdGVuZXIiLCJfQXBwX2FkZEJvb2ttYXJrVGFiT25DaGFuZ2VFdmVudExpc3RlbmVyIiwiX0FwcF9hZGRCb29rbWFya09uY2hhbmdlRXZlbnRMaXN0ZW5lciIsIl9BcHBfYWRkRGVsZXRlUmVzdGF1cmFudEl0ZW1FdmVudExpc3RlbmVyIiwicGFyc2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwic2V0SXRlbSIsIl9HTkJfaW5zdGFuY2VzIiwiX0dOQl9jcmVhdGVSZXN0YXVyYW50Rm9ybVRpdGxlIiwiX0dOQl9jcmVhdGVSZXN0YXVyYW50Rm9ybSIsIm1vZGFsIiwidGl0bGUiLCJyZXN0YXVyYW50Rm9ybVRpdGxlIiwicmVzdGF1cmFudEZvcm0iLCJfTW9kYWxfaW5zdGFuY2VzIiwiX01vZGFsX2JhY2tkcm9wIiwiX01vZGFsX2NvbnRhaW5lciIsIl9Nb2RhbF9jbG9zZU1vZGFsIiwiX1Jlc3RhdXJhbnRMaXN0X2luc3RhbmNlcyIsIl9SZXN0YXVyYW50TGlzdF9yZXN0YXVyYW50cyIsIl9SZXN0YXVyYW50TGlzdF91cGRhdGVMaXN0IiwiSFRNTFVMaXN0RWxlbWVudCIsInJlc3RhdXJhbnRJdGVtIiwiY3VzdG9tRWxlbWVudHMiLCJkZWZpbmUiLCJleHRlbmRzIiwiYXN5bmMiLCJzdGFydCJdLCJzb3VyY2VSb290IjoiIn0=